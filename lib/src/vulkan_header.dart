//  Copyright 2019 root.ext@gmail.com
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

import 'dart:ffi';
import 'dart:convert';

const int VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
const int VK_UUID_SIZE = 16;
const int VK_LUID_SIZE = 8;
const int VK_LUID_SIZE_KHR = VK_LUID_SIZE;
const int VK_MAX_EXTENSION_NAME_SIZE = 256;
const int VK_MAX_DESCRIPTION_SIZE = 256;
const int VK_MAX_MEMORY_TYPES = 32;
const int VK_MAX_MEMORY_HEAPS = 16;
const double VK_LOD_CLAMP_NONE = 1000.0;
const int VK_REMAINING_MIP_LEVELS = ~0;
const int VK_REMAINING_ARRAY_LAYERS = ~0;
const int VK_WHOLE_SIZE = ~0;
const int VK_ATTACHMENT_UNUSED = ~0;
const int VK_TRUE = 1;
const int VK_FALSE = 0;
const int VK_QUEUE_FAMILY_IGNORED = ~0;
const int VK_QUEUE_FAMILY_EXTERNAL = ~0-1;
const int VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
const int VK_QUEUE_FAMILY_FOREIGN_EXT = ~0-2;
const int VK_SUBPASS_EXTERNAL = ~0;
const int VK_MAX_DEVICE_GROUP_SIZE = 32;
const int VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
const int VK_MAX_DRIVER_NAME_SIZE = 256;
const int VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
const int VK_MAX_DRIVER_INFO_SIZE = 256;
const int VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
const int VK_SHADER_UNUSED_KHR = ~0;
const int VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;

//VkImageLayout
const int VK_IMAGE_LAYOUT_UNDEFINED = 0;
const int VK_IMAGE_LAYOUT_GENERAL = 1;
const int VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2;
const int VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3;
const int VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4;
const int VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5;
const int VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6;
const int VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7;
const int VK_IMAGE_LAYOUT_PREINITIALIZED = 8;
const int VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000;
const int VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001;
const int VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000;
const int VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001;
const int VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002;
const int VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003;
const int VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002;
const int VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000;
const int VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
const int VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
const int VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003;
const int VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000;
const int VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
const int VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
const int VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
const int VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
const int VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF;

//VkAttachmentLoadOp
const int VK_ATTACHMENT_LOAD_OP_LOAD = 0;
const int VK_ATTACHMENT_LOAD_OP_CLEAR = 1;
const int VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2;
const int VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF;

//VkAttachmentStoreOp
const int VK_ATTACHMENT_STORE_OP_STORE = 0;
const int VK_ATTACHMENT_STORE_OP_DONT_CARE = 1;
const int VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000;
const int VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF;

//VkImageType
const int VK_IMAGE_TYPE_1D = 0;
const int VK_IMAGE_TYPE_2D = 1;
const int VK_IMAGE_TYPE_3D = 2;
const int VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkImageTiling
const int VK_IMAGE_TILING_OPTIMAL = 0;
const int VK_IMAGE_TILING_LINEAR = 1;
const int VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000;
const int VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF;

//VkImageViewType
const int VK_IMAGE_VIEW_TYPE_1D = 0;
const int VK_IMAGE_VIEW_TYPE_2D = 1;
const int VK_IMAGE_VIEW_TYPE_3D = 2;
const int VK_IMAGE_VIEW_TYPE_CUBE = 3;
const int VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4;
const int VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5;
const int VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6;
const int VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkCommandBufferLevel
const int VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0;
const int VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1;
const int VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF;

//VkComponentSwizzle
const int VK_COMPONENT_SWIZZLE_IDENTITY = 0;
const int VK_COMPONENT_SWIZZLE_ZERO = 1;
const int VK_COMPONENT_SWIZZLE_ONE = 2;
const int VK_COMPONENT_SWIZZLE_R = 3;
const int VK_COMPONENT_SWIZZLE_G = 4;
const int VK_COMPONENT_SWIZZLE_B = 5;
const int VK_COMPONENT_SWIZZLE_A = 6;
const int VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF;

//VkDescriptorType
const int VK_DESCRIPTOR_TYPE_SAMPLER = 0;
const int VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1;
const int VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2;
const int VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3;
const int VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4;
const int VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5;
const int VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6;
const int VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7;
const int VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8;
const int VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9;
const int VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10;
const int VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000;
const int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000;
const int VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
const int VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkQueryType
const int VK_QUERY_TYPE_OCCLUSION = 0;
const int VK_QUERY_TYPE_PIPELINE_STATISTICS = 1;
const int VK_QUERY_TYPE_TIMESTAMP = 2;
const int VK_QUERY_TYPE_RESERVED_8 = 1000023008;
const int VK_QUERY_TYPE_RESERVED_4 = 1000024004;
const int VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004;
const int VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000;
const int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000;
const int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000;
const int VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR;
const int VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000;
const int VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkBorderColor
const int VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0;
const int VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1;
const int VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2;
const int VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3;
const int VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4;
const int VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5;
const int VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003;
const int VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004;
const int VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineBindPoint
const int VK_PIPELINE_BIND_POINT_GRAPHICS = 0;
const int VK_PIPELINE_BIND_POINT_COMPUTE = 1;
const int VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000;
const int VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR;
const int VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineCacheHeaderVersion
const int VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1;
const int VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineCacheCreateFlagBits
const int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 0x00000001;
const int VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPrimitiveTopology
const int VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0;
const int VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1;
const int VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2;
const int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3;
const int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4;
const int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5;
const int VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6;
const int VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7;
const int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8;
const int VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9;
const int VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10;
const int VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF;

//VkSharingMode
const int VK_SHARING_MODE_EXCLUSIVE = 0;
const int VK_SHARING_MODE_CONCURRENT = 1;
const int VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF;

//VkIndexType
const int VK_INDEX_TYPE_UINT16 = 0;
const int VK_INDEX_TYPE_UINT32 = 1;
const int VK_INDEX_TYPE_NONE_KHR = 1000165000;
const int VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR;
const int VK_INDEX_TYPE_UINT8_EXT = 1000265000;
const int VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkFilter
const int VK_FILTER_NEAREST = 0;
const int VK_FILTER_LINEAR = 1;
const int VK_FILTER_CUBIC_IMG = 1000015000;
const int VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG;
const int VK_FILTER_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerMipmapMode
const int VK_SAMPLER_MIPMAP_MODE_NEAREST = 0;
const int VK_SAMPLER_MIPMAP_MODE_LINEAR = 1;
const int VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerAddressMode
const int VK_SAMPLER_ADDRESS_MODE_REPEAT = 0;
const int VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1;
const int VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2;
const int VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3;
const int VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4;
const int VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
const int VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF;

//VkCompareOp
const int VK_COMPARE_OP_NEVER = 0;
const int VK_COMPARE_OP_LESS = 1;
const int VK_COMPARE_OP_EQUAL = 2;
const int VK_COMPARE_OP_LESS_OR_EQUAL = 3;
const int VK_COMPARE_OP_GREATER = 4;
const int VK_COMPARE_OP_NOT_EQUAL = 5;
const int VK_COMPARE_OP_GREATER_OR_EQUAL = 6;
const int VK_COMPARE_OP_ALWAYS = 7;
const int VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF;

//VkPolygonMode
const int VK_POLYGON_MODE_FILL = 0;
const int VK_POLYGON_MODE_LINE = 1;
const int VK_POLYGON_MODE_POINT = 2;
const int VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000;
const int VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF;

//VkCullModeFlagBits
const int VK_CULL_MODE_NONE = 0;
const int VK_CULL_MODE_FRONT_BIT = 0x00000001;
const int VK_CULL_MODE_BACK_BIT = 0x00000002;
const int VK_CULL_MODE_FRONT_AND_BACK = 0x00000003;
const int VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkFrontFace
const int VK_FRONT_FACE_COUNTER_CLOCKWISE = 0;
const int VK_FRONT_FACE_CLOCKWISE = 1;
const int VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF;

//VkBlendFactor
const int VK_BLEND_FACTOR_ZERO = 0;
const int VK_BLEND_FACTOR_ONE = 1;
const int VK_BLEND_FACTOR_SRC_COLOR = 2;
const int VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3;
const int VK_BLEND_FACTOR_DST_COLOR = 4;
const int VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5;
const int VK_BLEND_FACTOR_SRC_ALPHA = 6;
const int VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7;
const int VK_BLEND_FACTOR_DST_ALPHA = 8;
const int VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9;
const int VK_BLEND_FACTOR_CONSTANT_COLOR = 10;
const int VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11;
const int VK_BLEND_FACTOR_CONSTANT_ALPHA = 12;
const int VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13;
const int VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14;
const int VK_BLEND_FACTOR_SRC1_COLOR = 15;
const int VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16;
const int VK_BLEND_FACTOR_SRC1_ALPHA = 17;
const int VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18;
const int VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF;

//VkBlendOp
const int VK_BLEND_OP_ADD = 0;
const int VK_BLEND_OP_SUBTRACT = 1;
const int VK_BLEND_OP_REVERSE_SUBTRACT = 2;
const int VK_BLEND_OP_MIN = 3;
const int VK_BLEND_OP_MAX = 4;
const int VK_BLEND_OP_ZERO_EXT = 1000148000;
const int VK_BLEND_OP_SRC_EXT = 1000148001;
const int VK_BLEND_OP_DST_EXT = 1000148002;
const int VK_BLEND_OP_SRC_OVER_EXT = 1000148003;
const int VK_BLEND_OP_DST_OVER_EXT = 1000148004;
const int VK_BLEND_OP_SRC_IN_EXT = 1000148005;
const int VK_BLEND_OP_DST_IN_EXT = 1000148006;
const int VK_BLEND_OP_SRC_OUT_EXT = 1000148007;
const int VK_BLEND_OP_DST_OUT_EXT = 1000148008;
const int VK_BLEND_OP_SRC_ATOP_EXT = 1000148009;
const int VK_BLEND_OP_DST_ATOP_EXT = 1000148010;
const int VK_BLEND_OP_XOR_EXT = 1000148011;
const int VK_BLEND_OP_MULTIPLY_EXT = 1000148012;
const int VK_BLEND_OP_SCREEN_EXT = 1000148013;
const int VK_BLEND_OP_OVERLAY_EXT = 1000148014;
const int VK_BLEND_OP_DARKEN_EXT = 1000148015;
const int VK_BLEND_OP_LIGHTEN_EXT = 1000148016;
const int VK_BLEND_OP_COLORDODGE_EXT = 1000148017;
const int VK_BLEND_OP_COLORBURN_EXT = 1000148018;
const int VK_BLEND_OP_HARDLIGHT_EXT = 1000148019;
const int VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020;
const int VK_BLEND_OP_DIFFERENCE_EXT = 1000148021;
const int VK_BLEND_OP_EXCLUSION_EXT = 1000148022;
const int VK_BLEND_OP_INVERT_EXT = 1000148023;
const int VK_BLEND_OP_INVERT_RGB_EXT = 1000148024;
const int VK_BLEND_OP_LINEARDODGE_EXT = 1000148025;
const int VK_BLEND_OP_LINEARBURN_EXT = 1000148026;
const int VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027;
const int VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028;
const int VK_BLEND_OP_PINLIGHT_EXT = 1000148029;
const int VK_BLEND_OP_HARDMIX_EXT = 1000148030;
const int VK_BLEND_OP_HSL_HUE_EXT = 1000148031;
const int VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032;
const int VK_BLEND_OP_HSL_COLOR_EXT = 1000148033;
const int VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034;
const int VK_BLEND_OP_PLUS_EXT = 1000148035;
const int VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036;
const int VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037;
const int VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038;
const int VK_BLEND_OP_MINUS_EXT = 1000148039;
const int VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040;
const int VK_BLEND_OP_CONTRAST_EXT = 1000148041;
const int VK_BLEND_OP_INVERT_OVG_EXT = 1000148042;
const int VK_BLEND_OP_RED_EXT = 1000148043;
const int VK_BLEND_OP_GREEN_EXT = 1000148044;
const int VK_BLEND_OP_BLUE_EXT = 1000148045;
const int VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF;

//VkStencilOp
const int VK_STENCIL_OP_KEEP = 0;
const int VK_STENCIL_OP_ZERO = 1;
const int VK_STENCIL_OP_REPLACE = 2;
const int VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3;
const int VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4;
const int VK_STENCIL_OP_INVERT = 5;
const int VK_STENCIL_OP_INCREMENT_AND_WRAP = 6;
const int VK_STENCIL_OP_DECREMENT_AND_WRAP = 7;
const int VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF;

//VkLogicOp
const int VK_LOGIC_OP_CLEAR = 0;
const int VK_LOGIC_OP_AND = 1;
const int VK_LOGIC_OP_AND_REVERSE = 2;
const int VK_LOGIC_OP_COPY = 3;
const int VK_LOGIC_OP_AND_INVERTED = 4;
const int VK_LOGIC_OP_NO_OP = 5;
const int VK_LOGIC_OP_XOR = 6;
const int VK_LOGIC_OP_OR = 7;
const int VK_LOGIC_OP_NOR = 8;
const int VK_LOGIC_OP_EQUIVALENT = 9;
const int VK_LOGIC_OP_INVERT = 10;
const int VK_LOGIC_OP_OR_REVERSE = 11;
const int VK_LOGIC_OP_COPY_INVERTED = 12;
const int VK_LOGIC_OP_OR_INVERTED = 13;
const int VK_LOGIC_OP_NAND = 14;
const int VK_LOGIC_OP_SET = 15;
const int VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF;

//VkInternalAllocationType
const int VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0;
const int VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkSystemAllocationScope
const int VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0;
const int VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1;
const int VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2;
const int VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3;
const int VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4;
const int VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF;

//VkPhysicalDeviceType
const int VK_PHYSICAL_DEVICE_TYPE_OTHER = 0;
const int VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1;
const int VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2;
const int VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3;
const int VK_PHYSICAL_DEVICE_TYPE_CPU = 4;
const int VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkVertexInputRate
const int VK_VERTEX_INPUT_RATE_VERTEX = 0;
const int VK_VERTEX_INPUT_RATE_INSTANCE = 1;
const int VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF;

//VkFormat
const int VK_FORMAT_UNDEFINED = 0;
const int VK_FORMAT_R4G4_UNORM_PACK8 = 1;
const int VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;
const int VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;
const int VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;
const int VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;
const int VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;
const int VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;
const int VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;
const int VK_FORMAT_R8_UNORM = 9;
const int VK_FORMAT_R8_SNORM = 10;
const int VK_FORMAT_R8_USCALED = 11;
const int VK_FORMAT_R8_SSCALED = 12;
const int VK_FORMAT_R8_UINT = 13;
const int VK_FORMAT_R8_SINT = 14;
const int VK_FORMAT_R8_SRGB = 15;
const int VK_FORMAT_R8G8_UNORM = 16;
const int VK_FORMAT_R8G8_SNORM = 17;
const int VK_FORMAT_R8G8_USCALED = 18;
const int VK_FORMAT_R8G8_SSCALED = 19;
const int VK_FORMAT_R8G8_UINT = 20;
const int VK_FORMAT_R8G8_SINT = 21;
const int VK_FORMAT_R8G8_SRGB = 22;
const int VK_FORMAT_R8G8B8_UNORM = 23;
const int VK_FORMAT_R8G8B8_SNORM = 24;
const int VK_FORMAT_R8G8B8_USCALED = 25;
const int VK_FORMAT_R8G8B8_SSCALED = 26;
const int VK_FORMAT_R8G8B8_UINT = 27;
const int VK_FORMAT_R8G8B8_SINT = 28;
const int VK_FORMAT_R8G8B8_SRGB = 29;
const int VK_FORMAT_B8G8R8_UNORM = 30;
const int VK_FORMAT_B8G8R8_SNORM = 31;
const int VK_FORMAT_B8G8R8_USCALED = 32;
const int VK_FORMAT_B8G8R8_SSCALED = 33;
const int VK_FORMAT_B8G8R8_UINT = 34;
const int VK_FORMAT_B8G8R8_SINT = 35;
const int VK_FORMAT_B8G8R8_SRGB = 36;
const int VK_FORMAT_R8G8B8A8_UNORM = 37;
const int VK_FORMAT_R8G8B8A8_SNORM = 38;
const int VK_FORMAT_R8G8B8A8_USCALED = 39;
const int VK_FORMAT_R8G8B8A8_SSCALED = 40;
const int VK_FORMAT_R8G8B8A8_UINT = 41;
const int VK_FORMAT_R8G8B8A8_SINT = 42;
const int VK_FORMAT_R8G8B8A8_SRGB = 43;
const int VK_FORMAT_B8G8R8A8_UNORM = 44;
const int VK_FORMAT_B8G8R8A8_SNORM = 45;
const int VK_FORMAT_B8G8R8A8_USCALED = 46;
const int VK_FORMAT_B8G8R8A8_SSCALED = 47;
const int VK_FORMAT_B8G8R8A8_UINT = 48;
const int VK_FORMAT_B8G8R8A8_SINT = 49;
const int VK_FORMAT_B8G8R8A8_SRGB = 50;
const int VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51;
const int VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52;
const int VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53;
const int VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54;
const int VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55;
const int VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56;
const int VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57;
const int VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;
const int VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;
const int VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60;
const int VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61;
const int VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;
const int VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;
const int VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;
const int VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;
const int VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66;
const int VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67;
const int VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;
const int VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;
const int VK_FORMAT_R16_UNORM = 70;
const int VK_FORMAT_R16_SNORM = 71;
const int VK_FORMAT_R16_USCALED = 72;
const int VK_FORMAT_R16_SSCALED = 73;
const int VK_FORMAT_R16_UINT = 74;
const int VK_FORMAT_R16_SINT = 75;
const int VK_FORMAT_R16_SFLOAT = 76;
const int VK_FORMAT_R16G16_UNORM = 77;
const int VK_FORMAT_R16G16_SNORM = 78;
const int VK_FORMAT_R16G16_USCALED = 79;
const int VK_FORMAT_R16G16_SSCALED = 80;
const int VK_FORMAT_R16G16_UINT = 81;
const int VK_FORMAT_R16G16_SINT = 82;
const int VK_FORMAT_R16G16_SFLOAT = 83;
const int VK_FORMAT_R16G16B16_UNORM = 84;
const int VK_FORMAT_R16G16B16_SNORM = 85;
const int VK_FORMAT_R16G16B16_USCALED = 86;
const int VK_FORMAT_R16G16B16_SSCALED = 87;
const int VK_FORMAT_R16G16B16_UINT = 88;
const int VK_FORMAT_R16G16B16_SINT = 89;
const int VK_FORMAT_R16G16B16_SFLOAT = 90;
const int VK_FORMAT_R16G16B16A16_UNORM = 91;
const int VK_FORMAT_R16G16B16A16_SNORM = 92;
const int VK_FORMAT_R16G16B16A16_USCALED = 93;
const int VK_FORMAT_R16G16B16A16_SSCALED = 94;
const int VK_FORMAT_R16G16B16A16_UINT = 95;
const int VK_FORMAT_R16G16B16A16_SINT = 96;
const int VK_FORMAT_R16G16B16A16_SFLOAT = 97;
const int VK_FORMAT_R32_UINT = 98;
const int VK_FORMAT_R32_SINT = 99;
const int VK_FORMAT_R32_SFLOAT = 100;
const int VK_FORMAT_R32G32_UINT = 101;
const int VK_FORMAT_R32G32_SINT = 102;
const int VK_FORMAT_R32G32_SFLOAT = 103;
const int VK_FORMAT_R32G32B32_UINT = 104;
const int VK_FORMAT_R32G32B32_SINT = 105;
const int VK_FORMAT_R32G32B32_SFLOAT = 106;
const int VK_FORMAT_R32G32B32A32_UINT = 107;
const int VK_FORMAT_R32G32B32A32_SINT = 108;
const int VK_FORMAT_R32G32B32A32_SFLOAT = 109;
const int VK_FORMAT_R64_UINT = 110;
const int VK_FORMAT_R64_SINT = 111;
const int VK_FORMAT_R64_SFLOAT = 112;
const int VK_FORMAT_R64G64_UINT = 113;
const int VK_FORMAT_R64G64_SINT = 114;
const int VK_FORMAT_R64G64_SFLOAT = 115;
const int VK_FORMAT_R64G64B64_UINT = 116;
const int VK_FORMAT_R64G64B64_SINT = 117;
const int VK_FORMAT_R64G64B64_SFLOAT = 118;
const int VK_FORMAT_R64G64B64A64_UINT = 119;
const int VK_FORMAT_R64G64B64A64_SINT = 120;
const int VK_FORMAT_R64G64B64A64_SFLOAT = 121;
const int VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;
const int VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;
const int VK_FORMAT_D16_UNORM = 124;
const int VK_FORMAT_X8_D24_UNORM_PACK32 = 125;
const int VK_FORMAT_D32_SFLOAT = 126;
const int VK_FORMAT_S8_UINT = 127;
const int VK_FORMAT_D16_UNORM_S8_UINT = 128;
const int VK_FORMAT_D24_UNORM_S8_UINT = 129;
const int VK_FORMAT_D32_SFLOAT_S8_UINT = 130;
const int VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;
const int VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;
const int VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;
const int VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;
const int VK_FORMAT_BC2_UNORM_BLOCK = 135;
const int VK_FORMAT_BC2_SRGB_BLOCK = 136;
const int VK_FORMAT_BC3_UNORM_BLOCK = 137;
const int VK_FORMAT_BC3_SRGB_BLOCK = 138;
const int VK_FORMAT_BC4_UNORM_BLOCK = 139;
const int VK_FORMAT_BC4_SNORM_BLOCK = 140;
const int VK_FORMAT_BC5_UNORM_BLOCK = 141;
const int VK_FORMAT_BC5_SNORM_BLOCK = 142;
const int VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;
const int VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;
const int VK_FORMAT_BC7_UNORM_BLOCK = 145;
const int VK_FORMAT_BC7_SRGB_BLOCK = 146;
const int VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;
const int VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;
const int VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;
const int VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;
const int VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;
const int VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;
const int VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;
const int VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;
const int VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;
const int VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;
const int VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;
const int VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;
const int VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;
const int VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;
const int VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;
const int VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;
const int VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;
const int VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;
const int VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;
const int VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;
const int VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;
const int VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;
const int VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;
const int VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;
const int VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;
const int VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;
const int VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;
const int VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;
const int VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;
const int VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;
const int VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;
const int VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;
const int VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;
const int VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;
const int VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;
const int VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;
const int VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;
const int VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;
const int VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000;
const int VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001;
const int VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002;
const int VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003;
const int VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004;
const int VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005;
const int VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006;
const int VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;
const int VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;
const int VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;
const int VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;
const int VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012;
const int VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014;
const int VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016;
const int VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;
const int VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;
const int VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;
const int VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;
const int VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022;
const int VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024;
const int VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026;
const int VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027;
const int VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028;
const int VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029;
const int VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030;
const int VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031;
const int VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032;
const int VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033;
const int VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;
const int VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;
const int VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;
const int VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;
const int VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;
const int VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;
const int VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;
const int VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;
const int VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;
const int VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;
const int VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;
const int VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;
const int VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;
const int VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;
const int VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;
const int VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;
const int VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;
const int VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;
const int VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;
const int VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;
const int VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;
const int VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;
const int VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM;
const int VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM;
const int VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
const int VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
const int VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
const int VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
const int VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
const int VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16;
const int VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
const int VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
const int VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
const int VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
const int VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
const int VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
const int VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
const int VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16;
const int VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
const int VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
const int VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
const int VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
const int VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
const int VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
const int VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
const int VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM;
const int VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM;
const int VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
const int VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
const int VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
const int VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
const int VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
const int VK_FORMAT_ASTC_3x3x3_UNORM_BLOCK_EXT = 1000288000;
const int VK_FORMAT_ASTC_3x3x3_SRGB_BLOCK_EXT = 1000288001;
const int VK_FORMAT_ASTC_3x3x3_SFLOAT_BLOCK_EXT = 1000288002;
const int VK_FORMAT_ASTC_4x3x3_UNORM_BLOCK_EXT = 1000288003;
const int VK_FORMAT_ASTC_4x3x3_SRGB_BLOCK_EXT = 1000288004;
const int VK_FORMAT_ASTC_4x3x3_SFLOAT_BLOCK_EXT = 1000288005;
const int VK_FORMAT_ASTC_4x4x3_UNORM_BLOCK_EXT = 1000288006;
const int VK_FORMAT_ASTC_4x4x3_SRGB_BLOCK_EXT = 1000288007;
const int VK_FORMAT_ASTC_4x4x3_SFLOAT_BLOCK_EXT = 1000288008;
const int VK_FORMAT_ASTC_4x4x4_UNORM_BLOCK_EXT = 1000288009;
const int VK_FORMAT_ASTC_4x4x4_SRGB_BLOCK_EXT = 1000288010;
const int VK_FORMAT_ASTC_4x4x4_SFLOAT_BLOCK_EXT = 1000288011;
const int VK_FORMAT_ASTC_5x4x4_UNORM_BLOCK_EXT = 1000288012;
const int VK_FORMAT_ASTC_5x4x4_SRGB_BLOCK_EXT = 1000288013;
const int VK_FORMAT_ASTC_5x4x4_SFLOAT_BLOCK_EXT = 1000288014;
const int VK_FORMAT_ASTC_5x5x4_UNORM_BLOCK_EXT = 1000288015;
const int VK_FORMAT_ASTC_5x5x4_SRGB_BLOCK_EXT = 1000288016;
const int VK_FORMAT_ASTC_5x5x4_SFLOAT_BLOCK_EXT = 1000288017;
const int VK_FORMAT_ASTC_5x5x5_UNORM_BLOCK_EXT = 1000288018;
const int VK_FORMAT_ASTC_5x5x5_SRGB_BLOCK_EXT = 1000288019;
const int VK_FORMAT_ASTC_5x5x5_SFLOAT_BLOCK_EXT = 1000288020;
const int VK_FORMAT_ASTC_6x5x5_UNORM_BLOCK_EXT = 1000288021;
const int VK_FORMAT_ASTC_6x5x5_SRGB_BLOCK_EXT = 1000288022;
const int VK_FORMAT_ASTC_6x5x5_SFLOAT_BLOCK_EXT = 1000288023;
const int VK_FORMAT_ASTC_6x6x5_UNORM_BLOCK_EXT = 1000288024;
const int VK_FORMAT_ASTC_6x6x5_SRGB_BLOCK_EXT = 1000288025;
const int VK_FORMAT_ASTC_6x6x5_SFLOAT_BLOCK_EXT = 1000288026;
const int VK_FORMAT_ASTC_6x6x6_UNORM_BLOCK_EXT = 1000288027;
const int VK_FORMAT_ASTC_6x6x6_SRGB_BLOCK_EXT = 1000288028;
const int VK_FORMAT_ASTC_6x6x6_SFLOAT_BLOCK_EXT = 1000288029;
const int VK_FORMAT_MAX_ENUM = 0x7FFFFFFF;

//VkStructureType
const int VK_STRUCTURE_TYPE_APPLICATION_INFO = 0;
const int VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1;
const int VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2;
const int VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3;
const int VK_STRUCTURE_TYPE_SUBMIT_INFO = 4;
const int VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5;
const int VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6;
const int VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7;
const int VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8;
const int VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9;
const int VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10;
const int VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11;
const int VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12;
const int VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13;
const int VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15;
const int VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16;
const int VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17;
const int VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18;
const int VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19;
const int VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20;
const int VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23;
const int VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24;
const int VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25;
const int VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26;
const int VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27;
const int VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28;
const int VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29;
const int VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30;
const int VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34;
const int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35;
const int VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37;
const int VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38;
const int VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39;
const int VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40;
const int VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41;
const int VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42;
const int VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43;
const int VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44;
const int VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45;
const int VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46;
const int VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47;
const int VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000;
const int VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000;
const int VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000;
const int VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001;
const int VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006;
const int VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001;
const int VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000;
const int VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001;
const int VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002;
const int VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003;
const int VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001;
const int VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002;
const int VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004;
const int VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006;
const int VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000;
const int VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002;
const int VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003;
const int VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
const int VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002;
const int VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002;
const int VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000;
const int VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002;
const int VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004;
const int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000;
const int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001;
const int VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000;
const int VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001;
const int VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000;
const int VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000;
const int VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52;
const int VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000;
const int VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000;
const int VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001;
const int VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002;
const int VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003;
const int VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004;
const int VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005;
const int VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000;
const int VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000;
const int VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000;
const int VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002;
const int VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000;
const int VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001;
const int VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001;
const int VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002;
const int VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003;
const int VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004;
const int VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000;
const int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001;
const int VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002;
const int VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003;
const int VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004;
const int VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000;
const int VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007;
const int VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009;
const int VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012;
const int VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000;
const int VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001;
const int VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000;
const int VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000;
const int VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000;
const int VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000;
const int VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000;
const int VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000;
const int VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID = 1000010000;
const int VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID = 1000010001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID = 1000010002;
const int VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000;
const int VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000;
const int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000;
const int VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001;
const int VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002;
const int VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000;
const int VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001;
const int VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001;
const int VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000;
const int VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000;
const int VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
const int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000;
const int VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001;
const int VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000;
const int VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001;
const int VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
const int VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
const int VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
const int VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
const int VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000;
const int VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
const int VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
const int VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
const int VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
const int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
const int VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
const int VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000;
const int VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001;
const int VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002;
const int VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003;
const int VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000;
const int VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001;
const int VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002;
const int VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
const int VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
const int VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000;
const int VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001;
const int VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002;
const int VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003;
const int VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000;
const int VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000;
const int VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001;
const int VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
const int VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000;
const int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000;
const int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
const int VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000;
const int VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001;
const int VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002;
const int VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003;
const int VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000;
const int VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001;
const int VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
const int VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
const int VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
const int VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
const int VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
const int VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
const int VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
const int VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
const int VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
const int VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
const int VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
const int VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000;
const int VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001;
const int VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002;
const int VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000;
const int VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001;
const int VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002;
const int VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003;
const int VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004;
const int VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005;
const int VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
const int VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
const int VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000;
const int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001;
const int VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
const int VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000;
const int VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001;
const int VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002;
const int VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003;
const int VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004;
const int VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000;
const int VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000;
const int VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
const int VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
const int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000;
const int VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001;
const int VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002;
const int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003;
const int VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004;
const int VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000;
const int VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001;
const int VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002;
const int VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003;
const int VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004;
const int VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
const int VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001;
const int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003;
const int VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000;
const int VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001;
const int VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003;
const int VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004;
const int VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
const int VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
const int VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
const int VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
const int VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
const int VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001;
const int VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002;
const int VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000;
const int VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006;
const int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009;
const int VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010;
const int VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011;
const int VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014;
const int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015;
const int VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017;
const int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018;
const int VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
const int VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
const int VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
const int VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
const int VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
const int VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000;
const int VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002;
const int VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003;
const int VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004;
const int VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005;
const int VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000;
const int VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005;
const int VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001;
const int VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003;
const int VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004;
const int VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005;
const int VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR;
const int VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009;
const int VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011;
const int VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000;
const int VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
const int VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000;
const int VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001;
const int VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
const int VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000;
const int VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000;
const int VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000;
const int VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000;
const int VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000;
const int VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002;
const int VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000;
const int VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
const int VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000;
const int VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002;
const int VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000;
const int VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
const int VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
const int VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
const int VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000;
const int VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000;
const int VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
const int VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001;
const int VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002;
const int VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003;
const int VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004;
const int VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000;
const int VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000;
const int VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001;
const int VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000;
const int VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001;
const int VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000;
const int VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000;
const int VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001;
const int VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
const int VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
const int VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
const int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
const int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000;
const int VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
const int VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000;
const int VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000;
const int VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001;
const int VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
const int VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000;
const int VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002;
const int VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001;
const int VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
const int VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
const int VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
const int VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
const int VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000;
const int VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000;
const int VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000;
const int VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001;
const int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002;
const int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003;
const int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004;
const int VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000;
const int VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001;
const int VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002;
const int VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003;
const int VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004;
const int VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005;
const int VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001;
const int VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000;
const int VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001;
const int VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002;
const int VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000;
const int VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001;
const int VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000;
const int VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000;
const int VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001;
const int VK_STRUCTURE_TYPE_RESERVED_QCOM = 1000309000;
const int VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkSubpassContents
const int VK_SUBPASS_CONTENTS_INLINE = 0;
const int VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1;
const int VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF;

//VkResult
const int VK_SUCCESS = 0;
const int VK_NOT_READY = 1;
const int VK_TIMEOUT = 2;
const int VK_EVENT_SET = 3;
const int VK_EVENT_RESET = 4;
const int VK_INCOMPLETE = 5;
const int VK_ERROR_OUT_OF_HOST_MEMORY = -1;
const int VK_ERROR_OUT_OF_DEVICE_MEMORY = -2;
const int VK_ERROR_INITIALIZATION_FAILED = -3;
const int VK_ERROR_DEVICE_LOST = -4;
const int VK_ERROR_MEMORY_MAP_FAILED = -5;
const int VK_ERROR_LAYER_NOT_PRESENT = -6;
const int VK_ERROR_EXTENSION_NOT_PRESENT = -7;
const int VK_ERROR_FEATURE_NOT_PRESENT = -8;
const int VK_ERROR_INCOMPATIBLE_DRIVER = -9;
const int VK_ERROR_TOO_MANY_OBJECTS = -10;
const int VK_ERROR_FORMAT_NOT_SUPPORTED = -11;
const int VK_ERROR_FRAGMENTED_POOL = -12;
const int VK_ERROR_UNKNOWN = -13;
const int VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000;
const int VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003;
const int VK_ERROR_FRAGMENTATION = -1000161000;
const int VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000;
const int VK_ERROR_SURFACE_LOST_KHR = -1000000000;
const int VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001;
const int VK_SUBOPTIMAL_KHR = 1000001003;
const int VK_ERROR_OUT_OF_DATE_KHR = -1000001004;
const int VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001;
const int VK_ERROR_VALIDATION_FAILED_EXT = -1000011001;
const int VK_ERROR_INVALID_SHADER_NV = -1000012000;
const int VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY;
const int VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE;
const int VK_ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000;
const int VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000;
const int VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION;
const int VK_ERROR_NOT_PERMITTED_EXT = -1000174001;
const int VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
const int VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000;
const int VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
const int VK_THREAD_IDLE_KHR = 1000268000;
const int VK_THREAD_DONE_KHR = 1000268001;
const int VK_OPERATION_DEFERRED_KHR = 1000268002;
const int VK_OPERATION_NOT_DEFERRED_KHR = 1000268003;
const int VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000;
const int VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED_EXT;
const int VK_RESULT_MAX_ENUM = 0x7FFFFFFF;

//VkDynamicState
const int VK_DYNAMIC_STATE_VIEWPORT = 0;
const int VK_DYNAMIC_STATE_SCISSOR = 1;
const int VK_DYNAMIC_STATE_LINE_WIDTH = 2;
const int VK_DYNAMIC_STATE_DEPTH_BIAS = 3;
const int VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4;
const int VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5;
const int VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6;
const int VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7;
const int VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8;
const int VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000;
const int VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000;
const int VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000;
const int VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004;
const int VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006;
const int VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001;
const int VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000;
const int VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000;
const int VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001;
const int VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002;
const int VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003;
const int VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004;
const int VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005;
const int VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006;
const int VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007;
const int VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008;
const int VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009;
const int VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010;
const int VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011;
const int VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF;

//VkDescriptorUpdateTemplateType
const int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0;
const int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1;
const int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
const int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkObjectType
const int VK_OBJECT_TYPE_UNKNOWN = 0;
const int VK_OBJECT_TYPE_INSTANCE = 1;
const int VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2;
const int VK_OBJECT_TYPE_DEVICE = 3;
const int VK_OBJECT_TYPE_QUEUE = 4;
const int VK_OBJECT_TYPE_SEMAPHORE = 5;
const int VK_OBJECT_TYPE_COMMAND_BUFFER = 6;
const int VK_OBJECT_TYPE_FENCE = 7;
const int VK_OBJECT_TYPE_DEVICE_MEMORY = 8;
const int VK_OBJECT_TYPE_BUFFER = 9;
const int VK_OBJECT_TYPE_IMAGE = 10;
const int VK_OBJECT_TYPE_EVENT = 11;
const int VK_OBJECT_TYPE_QUERY_POOL = 12;
const int VK_OBJECT_TYPE_BUFFER_VIEW = 13;
const int VK_OBJECT_TYPE_IMAGE_VIEW = 14;
const int VK_OBJECT_TYPE_SHADER_MODULE = 15;
const int VK_OBJECT_TYPE_PIPELINE_CACHE = 16;
const int VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17;
const int VK_OBJECT_TYPE_RENDER_PASS = 18;
const int VK_OBJECT_TYPE_PIPELINE = 19;
const int VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20;
const int VK_OBJECT_TYPE_SAMPLER = 21;
const int VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22;
const int VK_OBJECT_TYPE_DESCRIPTOR_SET = 23;
const int VK_OBJECT_TYPE_FRAMEBUFFER = 24;
const int VK_OBJECT_TYPE_COMMAND_POOL = 25;
const int VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000;
const int VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000;
const int VK_OBJECT_TYPE_SURFACE_KHR = 1000000000;
const int VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000;
const int VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000;
const int VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001;
const int VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000;
const int VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
const int VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000;
const int VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000;
const int VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
const int VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000;
const int VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR;
const int VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000;
const int VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000;
const int VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000;
const int VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000;
const int VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkQueueFlagBits
const int VK_QUEUE_GRAPHICS_BIT = 0x00000001;
const int VK_QUEUE_COMPUTE_BIT = 0x00000002;
const int VK_QUEUE_TRANSFER_BIT = 0x00000004;
const int VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008;
const int VK_QUEUE_PROTECTED_BIT = 0x00000010;
const int VK_QUEUE_RESERVED_6_BIT_KHR = 0x00000040;
const int VK_QUEUE_RESERVED_5_BIT_KHR = 0x00000020;
const int VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkRenderPassCreateFlagBits
const int VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR = 0x00000001;
const int VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002;
const int VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkDeviceQueueCreateFlagBits
const int VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001;
const int VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkMemoryPropertyFlagBits
const int VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001;
const int VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002;
const int VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004;
const int VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008;
const int VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010;
const int VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020;
const int VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040;
const int VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080;
const int VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkMemoryHeapFlagBits
const int VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001;
const int VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002;
const int VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT;
const int VK_MEMORY_HEAP_RESERVED_2_BIT_KHR = 0x00000004;
const int VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkAccessFlagBits
const int VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001;
const int VK_ACCESS_INDEX_READ_BIT = 0x00000002;
const int VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004;
const int VK_ACCESS_UNIFORM_READ_BIT = 0x00000008;
const int VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010;
const int VK_ACCESS_SHADER_READ_BIT = 0x00000020;
const int VK_ACCESS_SHADER_WRITE_BIT = 0x00000040;
const int VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080;
const int VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100;
const int VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200;
const int VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400;
const int VK_ACCESS_TRANSFER_READ_BIT = 0x00000800;
const int VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000;
const int VK_ACCESS_HOST_READ_BIT = 0x00002000;
const int VK_ACCESS_HOST_WRITE_BIT = 0x00004000;
const int VK_ACCESS_MEMORY_READ_BIT = 0x00008000;
const int VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000;
const int VK_ACCESS_RESERVED_30_BIT_KHR = 0x40000000;
const int VK_ACCESS_RESERVED_28_BIT_KHR = 0x10000000;
const int VK_ACCESS_RESERVED_29_BIT_KHR = 0x20000000;
const int VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000;
const int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000;
const int VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000;
const int VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000;
const int VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000;
const int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000;
const int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000;
const int VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000;
const int VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
const int VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
const int VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000;
const int VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000;
const int VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000;
const int VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkBufferUsageFlagBits
const int VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001;
const int VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002;
const int VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004;
const int VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008;
const int VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010;
const int VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020;
const int VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040;
const int VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080;
const int VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100;
const int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000;
const int VK_BUFFER_USAGE_RESERVED_15_BIT_KHR = 0x00008000;
const int VK_BUFFER_USAGE_RESERVED_16_BIT_KHR = 0x00010000;
const int VK_BUFFER_USAGE_RESERVED_13_BIT_KHR = 0x00002000;
const int VK_BUFFER_USAGE_RESERVED_14_BIT_KHR = 0x00004000;
const int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800;
const int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000;
const int VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200;
const int VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR = 0x00000400;
const int VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR;
const int VK_BUFFER_USAGE_RESERVED_18_BIT_QCOM = 0x00040000;
const int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
const int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
const int VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkBufferCreateFlagBits
const int VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001;
const int VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
const int VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
const int VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008;
const int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010;
const int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
const int VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
const int VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkShaderStageFlagBits
const int VK_SHADER_STAGE_VERTEX_BIT = 0x00000001;
const int VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002;
const int VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004;
const int VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008;
const int VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010;
const int VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020;
const int VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F;
const int VK_SHADER_STAGE_ALL = 0x7FFFFFFF;
const int VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100;
const int VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200;
const int VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400;
const int VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800;
const int VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000;
const int VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000;
const int VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR;
const int VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR;
const int VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
const int VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR;
const int VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR;
const int VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR;
const int VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040;
const int VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080;
const int VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkImageUsageFlagBits
const int VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001;
const int VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002;
const int VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004;
const int VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008;
const int VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010;
const int VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020;
const int VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040;
const int VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080;
const int VK_IMAGE_USAGE_RESERVED_13_BIT_KHR = 0x00002000;
const int VK_IMAGE_USAGE_RESERVED_14_BIT_KHR = 0x00004000;
const int VK_IMAGE_USAGE_RESERVED_15_BIT_KHR = 0x00008000;
const int VK_IMAGE_USAGE_RESERVED_10_BIT_KHR = 0x00000400;
const int VK_IMAGE_USAGE_RESERVED_11_BIT_KHR = 0x00000800;
const int VK_IMAGE_USAGE_RESERVED_12_BIT_KHR = 0x00001000;
const int VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00000100;
const int VK_IMAGE_USAGE_RESERVED_16_BIT_QCOM = 0x00010000;
const int VK_IMAGE_USAGE_RESERVED_17_BIT_QCOM = 0x00020000;
const int VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200;
const int VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkImageCreateFlagBits
const int VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001;
const int VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002;
const int VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004;
const int VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008;
const int VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010;
const int VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400;
const int VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040;
const int VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020;
const int VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080;
const int VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100;
const int VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800;
const int VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200;
const int VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000;
const int VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
const int VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
const int VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
const int VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
const int VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000;
const int VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT;
const int VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT;
const int VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000;
const int VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkImageViewCreateFlagBits
const int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001;
const int VK_IMAGE_VIEW_CREATE_RESERVED_1_BIT_EXT = 0x00000002;
const int VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerCreateFlagBits
const int VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001;
const int VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002;
const int VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineCreateFlagBits
const int VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001;
const int VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002;
const int VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004;
const int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008;
const int VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010;
const int VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
const int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
const int VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE;
const int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000;
const int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000;
const int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000;
const int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000;
const int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000;
const int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000;
const int VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020;
const int VK_PIPELINE_CREATE_RESERVED_19_BIT_KHR = 0x00080000;
const int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040;
const int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080;
const int VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000;
const int VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800;
const int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 0x00000100;
const int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 0x00000200;
const int VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineShaderStageCreateFlagBits
const int VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_2_BIT_NV = 0x00000004;
const int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 0x00000001;
const int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 0x00000002;
const int VK_PIPELINE_SHADER_STAGE_CREATE_RESERVED_3_BIT_KHR = 0x00000008;
const int VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkColorComponentFlagBits
const int VK_COLOR_COMPONENT_R_BIT = 0x00000001;
const int VK_COLOR_COMPONENT_G_BIT = 0x00000002;
const int VK_COLOR_COMPONENT_B_BIT = 0x00000004;
const int VK_COLOR_COMPONENT_A_BIT = 0x00000008;
const int VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkFenceCreateFlagBits
const int VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001;
const int VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSemaphoreCreateFlagBits
const int VK_SEMAPHORE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkFormatFeatureFlagBits
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001;
const int VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002;
const int VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004;
const int VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008;
const int VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010;
const int VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020;
const int VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040;
const int VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080;
const int VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100;
const int VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200;
const int VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400;
const int VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000;
const int VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000;
const int VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000;
const int VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000;
const int VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000;
const int VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000;
const int VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR = 0x08000000;
const int VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR = 0x10000000;
const int VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR = 0x02000000;
const int VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR = 0x04000000;
const int VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT;
const int VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
const int VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000;
const int VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT;
const int VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT;
const int VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
const int VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG;
const int VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000;
const int VK_FORMAT_FEATURE_AMD_RESERVED_30_BIT = 0x40000000;
const int VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkQueryControlFlagBits
const int VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001;
const int VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkQueryResultFlagBits
const int VK_QUERY_RESULT_64_BIT = 0x00000001;
const int VK_QUERY_RESULT_WAIT_BIT = 0x00000002;
const int VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004;
const int VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008;
const int VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkCommandBufferUsageFlagBits
const int VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001;
const int VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002;
const int VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004;
const int VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkQueryPipelineStatisticFlagBits
const int VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001;
const int VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002;
const int VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004;
const int VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008;
const int VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010;
const int VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020;
const int VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040;
const int VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080;
const int VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100;
const int VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200;
const int VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400;
const int VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkImageAspectFlagBits
const int VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001;
const int VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002;
const int VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004;
const int VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008;
const int VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010;
const int VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020;
const int VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040;
const int VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT;
const int VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT;
const int VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT;
const int VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080;
const int VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100;
const int VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200;
const int VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400;
const int VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSparseImageFormatFlagBits
const int VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001;
const int VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002;
const int VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004;
const int VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSparseMemoryBindFlagBits
const int VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001;
const int VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineStageFlagBits
const int VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001;
const int VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002;
const int VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004;
const int VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008;
const int VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010;
const int VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020;
const int VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040;
const int VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080;
const int VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100;
const int VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200;
const int VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400;
const int VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800;
const int VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000;
const int VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000;
const int VK_PIPELINE_STAGE_HOST_BIT = 0x00004000;
const int VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000;
const int VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000;
const int VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR = 0x08000000;
const int VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR = 0x04000000;
const int VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000;
const int VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000;
const int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000;
const int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000;
const int VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 0x00400000;
const int VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
const int VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
const int VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000;
const int VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000;
const int VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000;
const int VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000;
const int VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkCommandPoolCreateFlagBits
const int VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001;
const int VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002;
const int VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004;
const int VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkCommandPoolResetFlagBits
const int VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001;
const int VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkCommandBufferResetFlagBits
const int VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001;
const int VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSampleCountFlagBits
const int VK_SAMPLE_COUNT_1_BIT = 0x00000001;
const int VK_SAMPLE_COUNT_2_BIT = 0x00000002;
const int VK_SAMPLE_COUNT_4_BIT = 0x00000004;
const int VK_SAMPLE_COUNT_8_BIT = 0x00000008;
const int VK_SAMPLE_COUNT_16_BIT = 0x00000010;
const int VK_SAMPLE_COUNT_32_BIT = 0x00000020;
const int VK_SAMPLE_COUNT_64_BIT = 0x00000040;
const int VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkAttachmentDescriptionFlagBits
const int VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001;
const int VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkStencilFaceFlagBits
const int VK_STENCIL_FACE_FRONT_BIT = 0x00000001;
const int VK_STENCIL_FACE_BACK_BIT = 0x00000002;
const int VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003;
const int VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK;
const int VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkDescriptorPoolCreateFlagBits
const int VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001;
const int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002;
const int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
const int VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkDependencyFlagBits
const int VK_DEPENDENCY_BY_REGION_BIT = 0x00000001;
const int VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004;
const int VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002;
const int VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT;
const int VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT;
const int VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSemaphoreType
const int VK_SEMAPHORE_TYPE_BINARY = 0;
const int VK_SEMAPHORE_TYPE_TIMELINE = 1;
const int VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY;
const int VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE;
const int VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF;

//VkSemaphoreWaitFlagBits
const int VK_SEMAPHORE_WAIT_ANY_BIT = 0x00000001;
const int VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT;
const int VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPresentModeKHR
const int VK_PRESENT_MODE_IMMEDIATE_KHR = 0;
const int VK_PRESENT_MODE_MAILBOX_KHR = 1;
const int VK_PRESENT_MODE_FIFO_KHR = 2;
const int VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3;
const int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000;
const int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001;
const int VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkColorSpaceKHR
const int VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0;
const int VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
const int VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001;
const int VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002;
const int VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003;
const int VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004;
const int VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005;
const int VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006;
const int VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007;
const int VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008;
const int VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009;
const int VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010;
const int VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011;
const int VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012;
const int VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013;
const int VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014;
const int VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
const int VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000;
const int VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkDisplayPlaneAlphaFlagBitsKHR
const int VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
const int VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002;
const int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004;
const int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008;
const int VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkCompositeAlphaFlagBitsKHR
const int VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001;
const int VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002;
const int VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004;
const int VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008;
const int VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkSurfaceTransformFlagBitsKHR
const int VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001;
const int VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002;
const int VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004;
const int VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008;
const int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010;
const int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020;
const int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040;
const int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080;
const int VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100;
const int VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkSwapchainImageUsageFlagBitsANDROID
const int VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID = 0x00000001;
const int VK_SWAPCHAIN_IMAGE_USAGE_FLAG_BITS_MAX_ENUM_ANDROID = 0x7FFFFFFF;

//VkTimeDomainEXT
const int VK_TIME_DOMAIN_DEVICE_EXT = 0;
const int VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1;
const int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2;
const int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3;
const int VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDebugReportFlagBitsEXT
const int VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001;
const int VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002;
const int VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004;
const int VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008;
const int VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010;
const int VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDebugReportObjectTypeEXT
const int VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0;
const int VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1;
const int VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3;
const int VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5;
const int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6;
const int VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8;
const int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9;
const int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10;
const int VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11;
const int VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12;
const int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13;
const int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15;
const int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16;
const int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17;
const int VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18;
const int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23;
const int VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24;
const int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30;
const int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33;
const int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000;
const int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
const int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000;
const int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
const int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT;
const int VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkRasterizationOrderAMD
const int VK_RASTERIZATION_ORDER_STRICT_AMD = 0;
const int VK_RASTERIZATION_ORDER_RELAXED_AMD = 1;
const int VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF;

//VkExternalMemoryHandleTypeFlagBitsNV
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;

//VkExternalMemoryFeatureFlagBitsNV
const int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001;
const int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002;
const int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004;
const int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;

//VkValidationCheckEXT
const int VK_VALIDATION_CHECK_ALL_EXT = 0;
const int VK_VALIDATION_CHECK_SHADERS_EXT = 1;
const int VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkValidationFeatureEnableEXT
const int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0;
const int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1;
const int VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2;
const int VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3;
const int VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkValidationFeatureDisableEXT
const int VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0;
const int VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1;
const int VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2;
const int VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3;
const int VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4;
const int VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5;
const int VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6;
const int VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkSubgroupFeatureFlagBits
const int VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001;
const int VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002;
const int VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004;
const int VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008;
const int VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010;
const int VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020;
const int VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040;
const int VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080;
const int VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
const int VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkIndirectCommandsLayoutUsageFlagBitsNV
const int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001;
const int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002;
const int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004;
const int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;

//VkIndirectStateFlagBitsNV
const int VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001;
const int VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;

//VkIndirectCommandsTokenTypeNV
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7;
const int VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkPrivateDataSlotCreateFlagBitsEXT
const int VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDescriptorSetLayoutCreateFlagBits
const int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002;
const int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001;
const int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT;
const int VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalMemoryHandleTypeFlagBits
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100;
const int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalMemoryFeatureFlagBits
const int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001;
const int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002;
const int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004;
const int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
const int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
const int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
const int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalSemaphoreHandleTypeFlagBits
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
const int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalSemaphoreFeatureFlagBits
const int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001;
const int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002;
const int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
const int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
const int VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSemaphoreImportFlagBits
const int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001;
const int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
const int VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalFenceHandleTypeFlagBits
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
const int VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkExternalFenceFeatureFlagBits
const int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001;
const int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002;
const int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
const int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
const int VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkFenceImportFlagBits
const int VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001;
const int VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT;
const int VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkSurfaceCounterFlagBitsEXT
const int VK_SURFACE_COUNTER_VBLANK_EXT = 0x00000001;
const int VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDisplayPowerStateEXT
const int VK_DISPLAY_POWER_STATE_OFF_EXT = 0;
const int VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1;
const int VK_DISPLAY_POWER_STATE_ON_EXT = 2;
const int VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDeviceEventTypeEXT
const int VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0;
const int VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDisplayEventTypeEXT
const int VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0;
const int VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkPeerMemoryFeatureFlagBits
const int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001;
const int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002;
const int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004;
const int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008;
const int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT;
const int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT;
const int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
const int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
const int VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkMemoryAllocateFlagBits
const int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001;
const int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002;
const int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004;
const int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT;
const int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
const int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
const int VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkDeviceGroupPresentModeFlagBitsKHR
const int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001;
const int VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002;
const int VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004;
const int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008;
const int VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkSwapchainCreateFlagBitsKHR
const int VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001;
const int VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002;
const int VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004;
const int VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkViewportCoordinateSwizzleNV
const int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7;
const int VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkDiscardRectangleModeEXT
const int VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0;
const int VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1;
const int VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkSubpassDescriptionFlagBits
const int VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001;
const int VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002;
const int VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004;
const int VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008;
const int VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPointClippingBehavior
const int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0;
const int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1;
const int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
const int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
const int VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerReductionMode
const int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0;
const int VK_SAMPLER_REDUCTION_MODE_MIN = 1;
const int VK_SAMPLER_REDUCTION_MODE_MAX = 2;
const int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
const int VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN;
const int VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX;
const int VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF;

//VkTessellationDomainOrigin
const int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0;
const int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1;
const int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
const int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
const int VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerYcbcrModelConversion
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
const int VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF;

//VkSamplerYcbcrRange
const int VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0;
const int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1;
const int VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL;
const int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW;
const int VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF;

//VkChromaLocation
const int VK_CHROMA_LOCATION_COSITED_EVEN = 0;
const int VK_CHROMA_LOCATION_MIDPOINT = 1;
const int VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN;
const int VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT;
const int VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF;

//VkBlendOverlapEXT
const int VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0;
const int VK_BLEND_OVERLAP_DISJOINT_EXT = 1;
const int VK_BLEND_OVERLAP_CONJOINT_EXT = 2;
const int VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkCoverageModulationModeNV
const int VK_COVERAGE_MODULATION_MODE_NONE_NV = 0;
const int VK_COVERAGE_MODULATION_MODE_RGB_NV = 1;
const int VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2;
const int VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3;
const int VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkCoverageReductionModeNV
const int VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0;
const int VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1;
const int VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkValidationCacheHeaderVersionEXT
const int VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1;
const int VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkShaderInfoTypeAMD
const int VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0;
const int VK_SHADER_INFO_TYPE_BINARY_AMD = 1;
const int VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2;
const int VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF;

//VkQueueGlobalPriorityEXT
const int VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128;
const int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256;
const int VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512;
const int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024;
const int VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDebugUtilsMessageSeverityFlagBitsEXT
const int VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001;
const int VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010;
const int VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100;
const int VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000;
const int VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDebugUtilsMessageTypeFlagBitsEXT
const int VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001;
const int VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002;
const int VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004;
const int VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkConservativeRasterizationModeEXT
const int VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0;
const int VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1;
const int VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2;
const int VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkDescriptorBindingFlagBits
const int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001;
const int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002;
const int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004;
const int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008;
const int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
const int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
const int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
const int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
const int VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkVendorId
const int VK_VENDOR_ID_VIV = 0x10001;
const int VK_VENDOR_ID_VSI = 0x10002;
const int VK_VENDOR_ID_KAZAN = 0x10003;
const int VK_VENDOR_ID_CODEPLAY = 0x10004;
const int VK_VENDOR_ID_MESA = 0x10005;
const int VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF;

//VkDriverId
const int VK_DRIVER_ID_AMD_PROPRIETARY = 1;
const int VK_DRIVER_ID_AMD_OPEN_SOURCE = 2;
const int VK_DRIVER_ID_MESA_RADV = 3;
const int VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4;
const int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5;
const int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6;
const int VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7;
const int VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8;
const int VK_DRIVER_ID_ARM_PROPRIETARY = 9;
const int VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10;
const int VK_DRIVER_ID_GGP_PROPRIETARY = 11;
const int VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12;
const int VK_DRIVER_ID_MESA_LLVMPIPE = 13;
const int VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY;
const int VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE;
const int VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV;
const int VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY;
const int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
const int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
const int VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY;
const int VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY;
const int VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY;
const int VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER;
const int VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY;
const int VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY;
const int VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF;

//VkConditionalRenderingFlagBitsEXT
const int VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001;
const int VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkResolveModeFlagBits
const int VK_RESOLVE_MODE_NONE = 0;
const int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001;
const int VK_RESOLVE_MODE_AVERAGE_BIT = 0x00000002;
const int VK_RESOLVE_MODE_MIN_BIT = 0x00000004;
const int VK_RESOLVE_MODE_MAX_BIT = 0x00000008;
const int VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE;
const int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
const int VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT;
const int VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT;
const int VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT;
const int VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkShadingRatePaletteEntryNV
const int VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0;
const int VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1;
const int VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2;
const int VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3;
const int VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10;
const int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11;
const int VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF;

//VkCoarseSampleOrderTypeNV
const int VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0;
const int VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1;
const int VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2;
const int VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3;
const int VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkGeometryInstanceFlagBitsKHR
const int VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001;
const int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 0x00000002;
const int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004;
const int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008;
const int VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
const int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR;
const int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
const int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
const int VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkGeometryFlagBitsKHR
const int VK_GEOMETRY_OPAQUE_BIT_KHR = 0x00000001;
const int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002;
const int VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR;
const int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
const int VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkBuildAccelerationStructureFlagBitsKHR
const int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001;
const int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002;
const int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004;
const int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008;
const int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010;
const int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR;
const int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR;
const int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR;
const int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR;
const int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
const int VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkCopyAccelerationStructureModeKHR
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
const int VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkAccelerationStructureTypeKHR
const int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0;
const int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1;
const int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
const int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
const int VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkGeometryTypeKHR
const int VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0;
const int VK_GEOMETRY_TYPE_AABBS_KHR = 1;
const int VK_GEOMETRY_TYPE_INSTANCES_KHR = 1000150000;
const int VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR;
const int VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR;
const int VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkAccelerationStructureMemoryRequirementsTypeKHR
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR;
const int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkAccelerationStructureBuildTypeKHR
const int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0;
const int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1;
const int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2;
const int VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkRayTracingShaderGroupTypeKHR
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
const int VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkMemoryOverallocationBehaviorAMD
const int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0;
const int VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1;
const int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2;
const int VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF;

//VkFramebufferCreateFlagBits
const int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001;
const int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT;
const int VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkScopeNV
const int VK_SCOPE_DEVICE_NV = 1;
const int VK_SCOPE_WORKGROUP_NV = 2;
const int VK_SCOPE_SUBGROUP_NV = 3;
const int VK_SCOPE_QUEUE_FAMILY_NV = 5;
const int VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkComponentTypeNV
const int VK_COMPONENT_TYPE_FLOAT16_NV = 0;
const int VK_COMPONENT_TYPE_FLOAT32_NV = 1;
const int VK_COMPONENT_TYPE_FLOAT64_NV = 2;
const int VK_COMPONENT_TYPE_SINT8_NV = 3;
const int VK_COMPONENT_TYPE_SINT16_NV = 4;
const int VK_COMPONENT_TYPE_SINT32_NV = 5;
const int VK_COMPONENT_TYPE_SINT64_NV = 6;
const int VK_COMPONENT_TYPE_UINT8_NV = 7;
const int VK_COMPONENT_TYPE_UINT16_NV = 8;
const int VK_COMPONENT_TYPE_UINT32_NV = 9;
const int VK_COMPONENT_TYPE_UINT64_NV = 10;
const int VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF;

//VkDeviceDiagnosticsConfigFlagBitsNV
const int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001;
const int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002;
const int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004;
const int VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF;

//VkPipelineCreationFeedbackFlagBitsEXT
const int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 0x00000001;
const int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 0x00000002;
const int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 0x00000004;
const int VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkFullScreenExclusiveEXT
const int VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0;
const int VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1;
const int VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2;
const int VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3;
const int VK_FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkPerformanceCounterScopeKHR
const int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0;
const int VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1;
const int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2;
const int VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
const int VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
const int VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
const int VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkPerformanceCounterUnitKHR
const int VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0;
const int VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1;
const int VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2;
const int VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3;
const int VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4;
const int VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5;
const int VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6;
const int VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7;
const int VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8;
const int VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9;
const int VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10;
const int VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkPerformanceCounterStorageKHR
const int VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0;
const int VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1;
const int VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2;
const int VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3;
const int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4;
const int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5;
const int VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkPerformanceCounterDescriptionFlagBitsKHR
const int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 0x00000001;
const int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 0x00000002;
const int VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkAcquireProfilingLockFlagBitsKHR
const int VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkShaderCorePropertiesFlagBitsAMD
const int VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF;

//VkPerformanceConfigurationTypeINTEL
const int VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0;
const int VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;

//VkQueryPoolSamplingModeINTEL
const int VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0;
const int VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF;

//VkPerformanceOverrideTypeINTEL
const int VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0;
const int VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1;
const int VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;

//VkPerformanceParameterTypeINTEL
const int VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0;
const int VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1;
const int VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;

//VkPerformanceValueTypeINTEL
const int VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0;
const int VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1;
const int VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2;
const int VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3;
const int VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4;
const int VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF;

//VkShaderFloatControlsIndependence
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
const int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineExecutableStatisticFormatKHR
const int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0;
const int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1;
const int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2;
const int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3;
const int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF;

//VkLineRasterizationModeEXT
const int VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0;
const int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1;
const int VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2;
const int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3;
const int VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF;

//VkShaderModuleCreateFlagBits
const int VK_SHADER_MODULE_CREATE_RESERVED_0_BIT_NV = 0x00000001;
const int VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF;

//VkPipelineCompilerControlFlagBitsAMD
const int VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF;

//VkToolPurposeFlagBitsEXT
const int VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 0x00000001;
const int VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 0x00000002;
const int VK_TOOL_PURPOSE_TRACING_BIT_EXT = 0x00000004;
const int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 0x00000008;
const int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 0x00000010;
const int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020;
const int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040;
const int VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF;

class VkInstance extends Struct {
}

class VkPhysicalDevice extends Struct {
}

class VkDevice extends Struct {
}

class VkQueue extends Struct {
}

class VkCommandBuffer extends Struct {
}

class VkDeviceMemory extends Struct {
}

class VkCommandPool extends Struct {
}

class VkBuffer extends Struct {
}

class VkBufferView extends Struct {
}

class VkImage extends Struct {
}

class VkImageView extends Struct {
}

class VkShaderModule extends Struct {
}

class VkPipeline extends Struct {
}

class VkPipelineLayout extends Struct {
}

class VkSampler extends Struct {
}

class VkDescriptorSet extends Struct {
}

class VkDescriptorSetLayout extends Struct {
}

class VkDescriptorPool extends Struct {
}

class VkFence extends Struct {
}

class VkSemaphore extends Struct {
}

class VkEvent extends Struct {
}

class VkQueryPool extends Struct {
}

class VkFramebuffer extends Struct {
}

class VkRenderPass extends Struct {
}

class VkPipelineCache extends Struct {
}

class VkIndirectCommandsLayoutNV extends Struct {
}

class VkDescriptorUpdateTemplate extends Struct {
}

class VkSamplerYcbcrConversion extends Struct {
}

class VkValidationCacheEXT extends Struct {
}

class VkAccelerationStructureKHR extends Struct {
}

class VkPerformanceConfigurationINTEL extends Struct {
}

class VkDeferredOperationKHR extends Struct {
}

class VkPrivateDataSlotEXT extends Struct {
}

class VkDisplayKHR extends Struct {
}

class VkDisplayModeKHR extends Struct {
}

class VkSurfaceKHR extends Struct {
}

class VkSwapchainKHR extends Struct {
}

class VkDebugReportCallbackEXT extends Struct {
}

class VkDebugUtilsMessengerEXT extends Struct {
}

class VkBaseOutStructure extends Struct {
  @Int32() int sType;
  Pointer pNext;
}

class VkBaseInStructure extends Struct {
  @Int32() int sType;
  Pointer pNext;
}

class VkOffset2D extends Struct {
  @Int32() int x;
  @Int32() int y;
}

class VkOffset3D extends Struct {
  @Int32() int x;
  @Int32() int y;
  @Int32() int z;
}

class VkExtent2D extends Struct {
  @Uint32() int width;
  @Uint32() int height;
}

class VkExtent3D extends Struct {
  @Uint32() int width;
  @Uint32() int height;
  @Uint32() int depth;
}

class VkViewport extends Struct {
  @Float() double x;
  @Float() double y;
  @Float() double width;
  @Float() double height;
  @Float() double minDepth;
  @Float() double maxDepth;
}

class VkRect2D extends Struct {
  @Int32() int offset_x;
  @Int32() int offset_y;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
}

class VkClearRect extends Struct {
  @Int32() int rect_offset_x;
  @Int32() int rect_offset_y;
  @Uint32() int rect_extent_width;
  @Uint32() int rect_extent_height;
  @Uint32() int baseArrayLayer;
  @Uint32() int layerCount;
}

class VkComponentMapping extends Struct {
  @Int32() int r;
  @Int32() int g;
  @Int32() int b;
  @Int32() int a;
}

class VkPhysicalDeviceProperties extends Struct {
  @Uint32() int apiVersion;
  @Uint32() int driverVersion;
  @Uint32() int vendorID;
  @Uint32() int deviceID;
  @Int32() int deviceType;
  @Uint8() int deviceName_0; @Uint8() int deviceName_1; @Uint8() int deviceName_2; @Uint8() int deviceName_3; @Uint8() int deviceName_4; @Uint8() int deviceName_5; @Uint8() int deviceName_6; @Uint8() int deviceName_7; @Uint8() int deviceName_8; @Uint8() int deviceName_9; @Uint8() int deviceName_10; @Uint8() int deviceName_11; @Uint8() int deviceName_12; @Uint8() int deviceName_13; @Uint8() int deviceName_14; @Uint8() int deviceName_15; @Uint8() int deviceName_16; @Uint8() int deviceName_17; @Uint8() int deviceName_18; @Uint8() int deviceName_19; @Uint8() int deviceName_20; @Uint8() int deviceName_21; @Uint8() int deviceName_22; @Uint8() int deviceName_23; @Uint8() int deviceName_24; @Uint8() int deviceName_25; @Uint8() int deviceName_26; @Uint8() int deviceName_27; @Uint8() int deviceName_28; @Uint8() int deviceName_29; @Uint8() int deviceName_30; @Uint8() int deviceName_31; @Uint8() int deviceName_32; @Uint8() int deviceName_33; @Uint8() int deviceName_34; @Uint8() int deviceName_35; @Uint8() int deviceName_36; @Uint8() int deviceName_37; @Uint8() int deviceName_38; @Uint8() int deviceName_39; @Uint8() int deviceName_40; @Uint8() int deviceName_41; @Uint8() int deviceName_42; @Uint8() int deviceName_43; @Uint8() int deviceName_44; @Uint8() int deviceName_45; @Uint8() int deviceName_46; @Uint8() int deviceName_47; @Uint8() int deviceName_48; @Uint8() int deviceName_49; @Uint8() int deviceName_50; @Uint8() int deviceName_51; @Uint8() int deviceName_52; @Uint8() int deviceName_53; @Uint8() int deviceName_54; @Uint8() int deviceName_55; @Uint8() int deviceName_56; @Uint8() int deviceName_57; @Uint8() int deviceName_58; @Uint8() int deviceName_59; @Uint8() int deviceName_60; @Uint8() int deviceName_61; @Uint8() int deviceName_62; @Uint8() int deviceName_63; @Uint8() int deviceName_64; @Uint8() int deviceName_65; @Uint8() int deviceName_66; @Uint8() int deviceName_67; @Uint8() int deviceName_68; @Uint8() int deviceName_69; @Uint8() int deviceName_70; @Uint8() int deviceName_71; @Uint8() int deviceName_72; @Uint8() int deviceName_73; @Uint8() int deviceName_74; @Uint8() int deviceName_75; @Uint8() int deviceName_76; @Uint8() int deviceName_77; @Uint8() int deviceName_78; @Uint8() int deviceName_79; @Uint8() int deviceName_80; @Uint8() int deviceName_81; @Uint8() int deviceName_82; @Uint8() int deviceName_83; @Uint8() int deviceName_84; @Uint8() int deviceName_85; @Uint8() int deviceName_86; @Uint8() int deviceName_87; @Uint8() int deviceName_88; @Uint8() int deviceName_89; @Uint8() int deviceName_90; @Uint8() int deviceName_91; @Uint8() int deviceName_92; @Uint8() int deviceName_93; @Uint8() int deviceName_94; @Uint8() int deviceName_95; @Uint8() int deviceName_96; @Uint8() int deviceName_97; @Uint8() int deviceName_98; @Uint8() int deviceName_99; @Uint8() int deviceName_100; @Uint8() int deviceName_101; @Uint8() int deviceName_102; @Uint8() int deviceName_103; @Uint8() int deviceName_104; @Uint8() int deviceName_105; @Uint8() int deviceName_106; @Uint8() int deviceName_107; @Uint8() int deviceName_108; @Uint8() int deviceName_109; @Uint8() int deviceName_110; @Uint8() int deviceName_111; @Uint8() int deviceName_112; @Uint8() int deviceName_113; @Uint8() int deviceName_114; @Uint8() int deviceName_115; @Uint8() int deviceName_116; @Uint8() int deviceName_117; @Uint8() int deviceName_118; @Uint8() int deviceName_119; @Uint8() int deviceName_120; @Uint8() int deviceName_121; @Uint8() int deviceName_122; @Uint8() int deviceName_123; @Uint8() int deviceName_124; @Uint8() int deviceName_125; @Uint8() int deviceName_126; @Uint8() int deviceName_127; @Uint8() int deviceName_128; @Uint8() int deviceName_129; @Uint8() int deviceName_130; @Uint8() int deviceName_131; @Uint8() int deviceName_132; @Uint8() int deviceName_133; @Uint8() int deviceName_134; @Uint8() int deviceName_135; @Uint8() int deviceName_136; @Uint8() int deviceName_137; @Uint8() int deviceName_138; @Uint8() int deviceName_139; @Uint8() int deviceName_140; @Uint8() int deviceName_141; @Uint8() int deviceName_142; @Uint8() int deviceName_143; @Uint8() int deviceName_144; @Uint8() int deviceName_145; @Uint8() int deviceName_146; @Uint8() int deviceName_147; @Uint8() int deviceName_148; @Uint8() int deviceName_149; @Uint8() int deviceName_150; @Uint8() int deviceName_151; @Uint8() int deviceName_152; @Uint8() int deviceName_153; @Uint8() int deviceName_154; @Uint8() int deviceName_155; @Uint8() int deviceName_156; @Uint8() int deviceName_157; @Uint8() int deviceName_158; @Uint8() int deviceName_159; @Uint8() int deviceName_160; @Uint8() int deviceName_161; @Uint8() int deviceName_162; @Uint8() int deviceName_163; @Uint8() int deviceName_164; @Uint8() int deviceName_165; @Uint8() int deviceName_166; @Uint8() int deviceName_167; @Uint8() int deviceName_168; @Uint8() int deviceName_169; @Uint8() int deviceName_170; @Uint8() int deviceName_171; @Uint8() int deviceName_172; @Uint8() int deviceName_173; @Uint8() int deviceName_174; @Uint8() int deviceName_175; @Uint8() int deviceName_176; @Uint8() int deviceName_177; @Uint8() int deviceName_178; @Uint8() int deviceName_179; @Uint8() int deviceName_180; @Uint8() int deviceName_181; @Uint8() int deviceName_182; @Uint8() int deviceName_183; @Uint8() int deviceName_184; @Uint8() int deviceName_185; @Uint8() int deviceName_186; @Uint8() int deviceName_187; @Uint8() int deviceName_188; @Uint8() int deviceName_189; @Uint8() int deviceName_190; @Uint8() int deviceName_191; @Uint8() int deviceName_192; @Uint8() int deviceName_193; @Uint8() int deviceName_194; @Uint8() int deviceName_195; @Uint8() int deviceName_196; @Uint8() int deviceName_197; @Uint8() int deviceName_198; @Uint8() int deviceName_199; @Uint8() int deviceName_200; @Uint8() int deviceName_201; @Uint8() int deviceName_202; @Uint8() int deviceName_203; @Uint8() int deviceName_204; @Uint8() int deviceName_205; @Uint8() int deviceName_206; @Uint8() int deviceName_207; @Uint8() int deviceName_208; @Uint8() int deviceName_209; @Uint8() int deviceName_210; @Uint8() int deviceName_211; @Uint8() int deviceName_212; @Uint8() int deviceName_213; @Uint8() int deviceName_214; @Uint8() int deviceName_215; @Uint8() int deviceName_216; @Uint8() int deviceName_217; @Uint8() int deviceName_218; @Uint8() int deviceName_219; @Uint8() int deviceName_220; @Uint8() int deviceName_221; @Uint8() int deviceName_222; @Uint8() int deviceName_223; @Uint8() int deviceName_224; @Uint8() int deviceName_225; @Uint8() int deviceName_226; @Uint8() int deviceName_227; @Uint8() int deviceName_228; @Uint8() int deviceName_229; @Uint8() int deviceName_230; @Uint8() int deviceName_231; @Uint8() int deviceName_232; @Uint8() int deviceName_233; @Uint8() int deviceName_234; @Uint8() int deviceName_235; @Uint8() int deviceName_236; @Uint8() int deviceName_237; @Uint8() int deviceName_238; @Uint8() int deviceName_239; @Uint8() int deviceName_240; @Uint8() int deviceName_241; @Uint8() int deviceName_242; @Uint8() int deviceName_243; @Uint8() int deviceName_244; @Uint8() int deviceName_245; @Uint8() int deviceName_246; @Uint8() int deviceName_247; @Uint8() int deviceName_248; @Uint8() int deviceName_249; @Uint8() int deviceName_250; @Uint8() int deviceName_251; @Uint8() int deviceName_252; @Uint8() int deviceName_253; @Uint8() int deviceName_254; @Uint8() int deviceName_255;
  String get deviceName {
    var bytes = [deviceName_0, deviceName_1, deviceName_2, deviceName_3, deviceName_4, deviceName_5, deviceName_6, deviceName_7, deviceName_8, deviceName_9, deviceName_10, deviceName_11, deviceName_12, deviceName_13, deviceName_14, deviceName_15, deviceName_16, deviceName_17, deviceName_18, deviceName_19, deviceName_20, deviceName_21, deviceName_22, deviceName_23, deviceName_24, deviceName_25, deviceName_26, deviceName_27, deviceName_28, deviceName_29, deviceName_30, deviceName_31, deviceName_32, deviceName_33, deviceName_34, deviceName_35, deviceName_36, deviceName_37, deviceName_38, deviceName_39, deviceName_40, deviceName_41, deviceName_42, deviceName_43, deviceName_44, deviceName_45, deviceName_46, deviceName_47, deviceName_48, deviceName_49, deviceName_50, deviceName_51, deviceName_52, deviceName_53, deviceName_54, deviceName_55, deviceName_56, deviceName_57, deviceName_58, deviceName_59, deviceName_60, deviceName_61, deviceName_62, deviceName_63, deviceName_64, deviceName_65, deviceName_66, deviceName_67, deviceName_68, deviceName_69, deviceName_70, deviceName_71, deviceName_72, deviceName_73, deviceName_74, deviceName_75, deviceName_76, deviceName_77, deviceName_78, deviceName_79, deviceName_80, deviceName_81, deviceName_82, deviceName_83, deviceName_84, deviceName_85, deviceName_86, deviceName_87, deviceName_88, deviceName_89, deviceName_90, deviceName_91, deviceName_92, deviceName_93, deviceName_94, deviceName_95, deviceName_96, deviceName_97, deviceName_98, deviceName_99, deviceName_100, deviceName_101, deviceName_102, deviceName_103, deviceName_104, deviceName_105, deviceName_106, deviceName_107, deviceName_108, deviceName_109, deviceName_110, deviceName_111, deviceName_112, deviceName_113, deviceName_114, deviceName_115, deviceName_116, deviceName_117, deviceName_118, deviceName_119, deviceName_120, deviceName_121, deviceName_122, deviceName_123, deviceName_124, deviceName_125, deviceName_126, deviceName_127, deviceName_128, deviceName_129, deviceName_130, deviceName_131, deviceName_132, deviceName_133, deviceName_134, deviceName_135, deviceName_136, deviceName_137, deviceName_138, deviceName_139, deviceName_140, deviceName_141, deviceName_142, deviceName_143, deviceName_144, deviceName_145, deviceName_146, deviceName_147, deviceName_148, deviceName_149, deviceName_150, deviceName_151, deviceName_152, deviceName_153, deviceName_154, deviceName_155, deviceName_156, deviceName_157, deviceName_158, deviceName_159, deviceName_160, deviceName_161, deviceName_162, deviceName_163, deviceName_164, deviceName_165, deviceName_166, deviceName_167, deviceName_168, deviceName_169, deviceName_170, deviceName_171, deviceName_172, deviceName_173, deviceName_174, deviceName_175, deviceName_176, deviceName_177, deviceName_178, deviceName_179, deviceName_180, deviceName_181, deviceName_182, deviceName_183, deviceName_184, deviceName_185, deviceName_186, deviceName_187, deviceName_188, deviceName_189, deviceName_190, deviceName_191, deviceName_192, deviceName_193, deviceName_194, deviceName_195, deviceName_196, deviceName_197, deviceName_198, deviceName_199, deviceName_200, deviceName_201, deviceName_202, deviceName_203, deviceName_204, deviceName_205, deviceName_206, deviceName_207, deviceName_208, deviceName_209, deviceName_210, deviceName_211, deviceName_212, deviceName_213, deviceName_214, deviceName_215, deviceName_216, deviceName_217, deviceName_218, deviceName_219, deviceName_220, deviceName_221, deviceName_222, deviceName_223, deviceName_224, deviceName_225, deviceName_226, deviceName_227, deviceName_228, deviceName_229, deviceName_230, deviceName_231, deviceName_232, deviceName_233, deviceName_234, deviceName_235, deviceName_236, deviceName_237, deviceName_238, deviceName_239, deviceName_240, deviceName_241, deviceName_242, deviceName_243, deviceName_244, deviceName_245, deviceName_246, deviceName_247, deviceName_248, deviceName_249, deviceName_250, deviceName_251, deviceName_252, deviceName_253, deviceName_254, deviceName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set deviceName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { deviceName_0 = bytes[0]; } if (bytes.isNotEmpty) { deviceName_1 = bytes[1]; } if (bytes.isNotEmpty) { deviceName_2 = bytes[2]; } if (bytes.isNotEmpty) { deviceName_3 = bytes[3]; } if (bytes.isNotEmpty) { deviceName_4 = bytes[4]; } if (bytes.isNotEmpty) { deviceName_5 = bytes[5]; } if (bytes.isNotEmpty) { deviceName_6 = bytes[6]; } if (bytes.isNotEmpty) { deviceName_7 = bytes[7]; } if (bytes.isNotEmpty) { deviceName_8 = bytes[8]; } if (bytes.isNotEmpty) { deviceName_9 = bytes[9]; } if (bytes.isNotEmpty) { deviceName_10 = bytes[10]; } if (bytes.isNotEmpty) { deviceName_11 = bytes[11]; } if (bytes.isNotEmpty) { deviceName_12 = bytes[12]; } if (bytes.isNotEmpty) { deviceName_13 = bytes[13]; } if (bytes.isNotEmpty) { deviceName_14 = bytes[14]; } if (bytes.isNotEmpty) { deviceName_15 = bytes[15]; } if (bytes.isNotEmpty) { deviceName_16 = bytes[16]; } if (bytes.isNotEmpty) { deviceName_17 = bytes[17]; } if (bytes.isNotEmpty) { deviceName_18 = bytes[18]; } if (bytes.isNotEmpty) { deviceName_19 = bytes[19]; } if (bytes.isNotEmpty) { deviceName_20 = bytes[20]; } if (bytes.isNotEmpty) { deviceName_21 = bytes[21]; } if (bytes.isNotEmpty) { deviceName_22 = bytes[22]; } if (bytes.isNotEmpty) { deviceName_23 = bytes[23]; } if (bytes.isNotEmpty) { deviceName_24 = bytes[24]; } if (bytes.isNotEmpty) { deviceName_25 = bytes[25]; } if (bytes.isNotEmpty) { deviceName_26 = bytes[26]; } if (bytes.isNotEmpty) { deviceName_27 = bytes[27]; } if (bytes.isNotEmpty) { deviceName_28 = bytes[28]; } if (bytes.isNotEmpty) { deviceName_29 = bytes[29]; } if (bytes.isNotEmpty) { deviceName_30 = bytes[30]; } if (bytes.isNotEmpty) { deviceName_31 = bytes[31]; } if (bytes.isNotEmpty) { deviceName_32 = bytes[32]; } if (bytes.isNotEmpty) { deviceName_33 = bytes[33]; } if (bytes.isNotEmpty) { deviceName_34 = bytes[34]; } if (bytes.isNotEmpty) { deviceName_35 = bytes[35]; } if (bytes.isNotEmpty) { deviceName_36 = bytes[36]; } if (bytes.isNotEmpty) { deviceName_37 = bytes[37]; } if (bytes.isNotEmpty) { deviceName_38 = bytes[38]; } if (bytes.isNotEmpty) { deviceName_39 = bytes[39]; } if (bytes.isNotEmpty) { deviceName_40 = bytes[40]; } if (bytes.isNotEmpty) { deviceName_41 = bytes[41]; } if (bytes.isNotEmpty) { deviceName_42 = bytes[42]; } if (bytes.isNotEmpty) { deviceName_43 = bytes[43]; } if (bytes.isNotEmpty) { deviceName_44 = bytes[44]; } if (bytes.isNotEmpty) { deviceName_45 = bytes[45]; } if (bytes.isNotEmpty) { deviceName_46 = bytes[46]; } if (bytes.isNotEmpty) { deviceName_47 = bytes[47]; } if (bytes.isNotEmpty) { deviceName_48 = bytes[48]; } if (bytes.isNotEmpty) { deviceName_49 = bytes[49]; } if (bytes.isNotEmpty) { deviceName_50 = bytes[50]; } if (bytes.isNotEmpty) { deviceName_51 = bytes[51]; } if (bytes.isNotEmpty) { deviceName_52 = bytes[52]; } if (bytes.isNotEmpty) { deviceName_53 = bytes[53]; } if (bytes.isNotEmpty) { deviceName_54 = bytes[54]; } if (bytes.isNotEmpty) { deviceName_55 = bytes[55]; } if (bytes.isNotEmpty) { deviceName_56 = bytes[56]; } if (bytes.isNotEmpty) { deviceName_57 = bytes[57]; } if (bytes.isNotEmpty) { deviceName_58 = bytes[58]; } if (bytes.isNotEmpty) { deviceName_59 = bytes[59]; } if (bytes.isNotEmpty) { deviceName_60 = bytes[60]; } if (bytes.isNotEmpty) { deviceName_61 = bytes[61]; } if (bytes.isNotEmpty) { deviceName_62 = bytes[62]; } if (bytes.isNotEmpty) { deviceName_63 = bytes[63]; } if (bytes.isNotEmpty) { deviceName_64 = bytes[64]; } if (bytes.isNotEmpty) { deviceName_65 = bytes[65]; } if (bytes.isNotEmpty) { deviceName_66 = bytes[66]; } if (bytes.isNotEmpty) { deviceName_67 = bytes[67]; } if (bytes.isNotEmpty) { deviceName_68 = bytes[68]; } if (bytes.isNotEmpty) { deviceName_69 = bytes[69]; } if (bytes.isNotEmpty) { deviceName_70 = bytes[70]; } if (bytes.isNotEmpty) { deviceName_71 = bytes[71]; } if (bytes.isNotEmpty) { deviceName_72 = bytes[72]; } if (bytes.isNotEmpty) { deviceName_73 = bytes[73]; } if (bytes.isNotEmpty) { deviceName_74 = bytes[74]; } if (bytes.isNotEmpty) { deviceName_75 = bytes[75]; } if (bytes.isNotEmpty) { deviceName_76 = bytes[76]; } if (bytes.isNotEmpty) { deviceName_77 = bytes[77]; } if (bytes.isNotEmpty) { deviceName_78 = bytes[78]; } if (bytes.isNotEmpty) { deviceName_79 = bytes[79]; } if (bytes.isNotEmpty) { deviceName_80 = bytes[80]; } if (bytes.isNotEmpty) { deviceName_81 = bytes[81]; } if (bytes.isNotEmpty) { deviceName_82 = bytes[82]; } if (bytes.isNotEmpty) { deviceName_83 = bytes[83]; } if (bytes.isNotEmpty) { deviceName_84 = bytes[84]; } if (bytes.isNotEmpty) { deviceName_85 = bytes[85]; } if (bytes.isNotEmpty) { deviceName_86 = bytes[86]; } if (bytes.isNotEmpty) { deviceName_87 = bytes[87]; } if (bytes.isNotEmpty) { deviceName_88 = bytes[88]; } if (bytes.isNotEmpty) { deviceName_89 = bytes[89]; } if (bytes.isNotEmpty) { deviceName_90 = bytes[90]; } if (bytes.isNotEmpty) { deviceName_91 = bytes[91]; } if (bytes.isNotEmpty) { deviceName_92 = bytes[92]; } if (bytes.isNotEmpty) { deviceName_93 = bytes[93]; } if (bytes.isNotEmpty) { deviceName_94 = bytes[94]; } if (bytes.isNotEmpty) { deviceName_95 = bytes[95]; } if (bytes.isNotEmpty) { deviceName_96 = bytes[96]; } if (bytes.isNotEmpty) { deviceName_97 = bytes[97]; } if (bytes.isNotEmpty) { deviceName_98 = bytes[98]; } if (bytes.isNotEmpty) { deviceName_99 = bytes[99]; } if (bytes.isNotEmpty) { deviceName_100 = bytes[100]; } if (bytes.isNotEmpty) { deviceName_101 = bytes[101]; } if (bytes.isNotEmpty) { deviceName_102 = bytes[102]; } if (bytes.isNotEmpty) { deviceName_103 = bytes[103]; } if (bytes.isNotEmpty) { deviceName_104 = bytes[104]; } if (bytes.isNotEmpty) { deviceName_105 = bytes[105]; } if (bytes.isNotEmpty) { deviceName_106 = bytes[106]; } if (bytes.isNotEmpty) { deviceName_107 = bytes[107]; } if (bytes.isNotEmpty) { deviceName_108 = bytes[108]; } if (bytes.isNotEmpty) { deviceName_109 = bytes[109]; } if (bytes.isNotEmpty) { deviceName_110 = bytes[110]; } if (bytes.isNotEmpty) { deviceName_111 = bytes[111]; } if (bytes.isNotEmpty) { deviceName_112 = bytes[112]; } if (bytes.isNotEmpty) { deviceName_113 = bytes[113]; } if (bytes.isNotEmpty) { deviceName_114 = bytes[114]; } if (bytes.isNotEmpty) { deviceName_115 = bytes[115]; } if (bytes.isNotEmpty) { deviceName_116 = bytes[116]; } if (bytes.isNotEmpty) { deviceName_117 = bytes[117]; } if (bytes.isNotEmpty) { deviceName_118 = bytes[118]; } if (bytes.isNotEmpty) { deviceName_119 = bytes[119]; } if (bytes.isNotEmpty) { deviceName_120 = bytes[120]; } if (bytes.isNotEmpty) { deviceName_121 = bytes[121]; } if (bytes.isNotEmpty) { deviceName_122 = bytes[122]; } if (bytes.isNotEmpty) { deviceName_123 = bytes[123]; } if (bytes.isNotEmpty) { deviceName_124 = bytes[124]; } if (bytes.isNotEmpty) { deviceName_125 = bytes[125]; } if (bytes.isNotEmpty) { deviceName_126 = bytes[126]; } if (bytes.isNotEmpty) { deviceName_127 = bytes[127]; } if (bytes.isNotEmpty) { deviceName_128 = bytes[128]; } if (bytes.isNotEmpty) { deviceName_129 = bytes[129]; } if (bytes.isNotEmpty) { deviceName_130 = bytes[130]; } if (bytes.isNotEmpty) { deviceName_131 = bytes[131]; } if (bytes.isNotEmpty) { deviceName_132 = bytes[132]; } if (bytes.isNotEmpty) { deviceName_133 = bytes[133]; } if (bytes.isNotEmpty) { deviceName_134 = bytes[134]; } if (bytes.isNotEmpty) { deviceName_135 = bytes[135]; } if (bytes.isNotEmpty) { deviceName_136 = bytes[136]; } if (bytes.isNotEmpty) { deviceName_137 = bytes[137]; } if (bytes.isNotEmpty) { deviceName_138 = bytes[138]; } if (bytes.isNotEmpty) { deviceName_139 = bytes[139]; } if (bytes.isNotEmpty) { deviceName_140 = bytes[140]; } if (bytes.isNotEmpty) { deviceName_141 = bytes[141]; } if (bytes.isNotEmpty) { deviceName_142 = bytes[142]; } if (bytes.isNotEmpty) { deviceName_143 = bytes[143]; } if (bytes.isNotEmpty) { deviceName_144 = bytes[144]; } if (bytes.isNotEmpty) { deviceName_145 = bytes[145]; } if (bytes.isNotEmpty) { deviceName_146 = bytes[146]; } if (bytes.isNotEmpty) { deviceName_147 = bytes[147]; } if (bytes.isNotEmpty) { deviceName_148 = bytes[148]; } if (bytes.isNotEmpty) { deviceName_149 = bytes[149]; } if (bytes.isNotEmpty) { deviceName_150 = bytes[150]; } if (bytes.isNotEmpty) { deviceName_151 = bytes[151]; } if (bytes.isNotEmpty) { deviceName_152 = bytes[152]; } if (bytes.isNotEmpty) { deviceName_153 = bytes[153]; } if (bytes.isNotEmpty) { deviceName_154 = bytes[154]; } if (bytes.isNotEmpty) { deviceName_155 = bytes[155]; } if (bytes.isNotEmpty) { deviceName_156 = bytes[156]; } if (bytes.isNotEmpty) { deviceName_157 = bytes[157]; } if (bytes.isNotEmpty) { deviceName_158 = bytes[158]; } if (bytes.isNotEmpty) { deviceName_159 = bytes[159]; } if (bytes.isNotEmpty) { deviceName_160 = bytes[160]; } if (bytes.isNotEmpty) { deviceName_161 = bytes[161]; } if (bytes.isNotEmpty) { deviceName_162 = bytes[162]; } if (bytes.isNotEmpty) { deviceName_163 = bytes[163]; } if (bytes.isNotEmpty) { deviceName_164 = bytes[164]; } if (bytes.isNotEmpty) { deviceName_165 = bytes[165]; } if (bytes.isNotEmpty) { deviceName_166 = bytes[166]; } if (bytes.isNotEmpty) { deviceName_167 = bytes[167]; } if (bytes.isNotEmpty) { deviceName_168 = bytes[168]; } if (bytes.isNotEmpty) { deviceName_169 = bytes[169]; } if (bytes.isNotEmpty) { deviceName_170 = bytes[170]; } if (bytes.isNotEmpty) { deviceName_171 = bytes[171]; } if (bytes.isNotEmpty) { deviceName_172 = bytes[172]; } if (bytes.isNotEmpty) { deviceName_173 = bytes[173]; } if (bytes.isNotEmpty) { deviceName_174 = bytes[174]; } if (bytes.isNotEmpty) { deviceName_175 = bytes[175]; } if (bytes.isNotEmpty) { deviceName_176 = bytes[176]; } if (bytes.isNotEmpty) { deviceName_177 = bytes[177]; } if (bytes.isNotEmpty) { deviceName_178 = bytes[178]; } if (bytes.isNotEmpty) { deviceName_179 = bytes[179]; } if (bytes.isNotEmpty) { deviceName_180 = bytes[180]; } if (bytes.isNotEmpty) { deviceName_181 = bytes[181]; } if (bytes.isNotEmpty) { deviceName_182 = bytes[182]; } if (bytes.isNotEmpty) { deviceName_183 = bytes[183]; } if (bytes.isNotEmpty) { deviceName_184 = bytes[184]; } if (bytes.isNotEmpty) { deviceName_185 = bytes[185]; } if (bytes.isNotEmpty) { deviceName_186 = bytes[186]; } if (bytes.isNotEmpty) { deviceName_187 = bytes[187]; } if (bytes.isNotEmpty) { deviceName_188 = bytes[188]; } if (bytes.isNotEmpty) { deviceName_189 = bytes[189]; } if (bytes.isNotEmpty) { deviceName_190 = bytes[190]; } if (bytes.isNotEmpty) { deviceName_191 = bytes[191]; } if (bytes.isNotEmpty) { deviceName_192 = bytes[192]; } if (bytes.isNotEmpty) { deviceName_193 = bytes[193]; } if (bytes.isNotEmpty) { deviceName_194 = bytes[194]; } if (bytes.isNotEmpty) { deviceName_195 = bytes[195]; } if (bytes.isNotEmpty) { deviceName_196 = bytes[196]; } if (bytes.isNotEmpty) { deviceName_197 = bytes[197]; } if (bytes.isNotEmpty) { deviceName_198 = bytes[198]; } if (bytes.isNotEmpty) { deviceName_199 = bytes[199]; } if (bytes.isNotEmpty) { deviceName_200 = bytes[200]; } if (bytes.isNotEmpty) { deviceName_201 = bytes[201]; } if (bytes.isNotEmpty) { deviceName_202 = bytes[202]; } if (bytes.isNotEmpty) { deviceName_203 = bytes[203]; } if (bytes.isNotEmpty) { deviceName_204 = bytes[204]; } if (bytes.isNotEmpty) { deviceName_205 = bytes[205]; } if (bytes.isNotEmpty) { deviceName_206 = bytes[206]; } if (bytes.isNotEmpty) { deviceName_207 = bytes[207]; } if (bytes.isNotEmpty) { deviceName_208 = bytes[208]; } if (bytes.isNotEmpty) { deviceName_209 = bytes[209]; } if (bytes.isNotEmpty) { deviceName_210 = bytes[210]; } if (bytes.isNotEmpty) { deviceName_211 = bytes[211]; } if (bytes.isNotEmpty) { deviceName_212 = bytes[212]; } if (bytes.isNotEmpty) { deviceName_213 = bytes[213]; } if (bytes.isNotEmpty) { deviceName_214 = bytes[214]; } if (bytes.isNotEmpty) { deviceName_215 = bytes[215]; } if (bytes.isNotEmpty) { deviceName_216 = bytes[216]; } if (bytes.isNotEmpty) { deviceName_217 = bytes[217]; } if (bytes.isNotEmpty) { deviceName_218 = bytes[218]; } if (bytes.isNotEmpty) { deviceName_219 = bytes[219]; } if (bytes.isNotEmpty) { deviceName_220 = bytes[220]; } if (bytes.isNotEmpty) { deviceName_221 = bytes[221]; } if (bytes.isNotEmpty) { deviceName_222 = bytes[222]; } if (bytes.isNotEmpty) { deviceName_223 = bytes[223]; } if (bytes.isNotEmpty) { deviceName_224 = bytes[224]; } if (bytes.isNotEmpty) { deviceName_225 = bytes[225]; } if (bytes.isNotEmpty) { deviceName_226 = bytes[226]; } if (bytes.isNotEmpty) { deviceName_227 = bytes[227]; } if (bytes.isNotEmpty) { deviceName_228 = bytes[228]; } if (bytes.isNotEmpty) { deviceName_229 = bytes[229]; } if (bytes.isNotEmpty) { deviceName_230 = bytes[230]; } if (bytes.isNotEmpty) { deviceName_231 = bytes[231]; } if (bytes.isNotEmpty) { deviceName_232 = bytes[232]; } if (bytes.isNotEmpty) { deviceName_233 = bytes[233]; } if (bytes.isNotEmpty) { deviceName_234 = bytes[234]; } if (bytes.isNotEmpty) { deviceName_235 = bytes[235]; } if (bytes.isNotEmpty) { deviceName_236 = bytes[236]; } if (bytes.isNotEmpty) { deviceName_237 = bytes[237]; } if (bytes.isNotEmpty) { deviceName_238 = bytes[238]; } if (bytes.isNotEmpty) { deviceName_239 = bytes[239]; } if (bytes.isNotEmpty) { deviceName_240 = bytes[240]; } if (bytes.isNotEmpty) { deviceName_241 = bytes[241]; } if (bytes.isNotEmpty) { deviceName_242 = bytes[242]; } if (bytes.isNotEmpty) { deviceName_243 = bytes[243]; } if (bytes.isNotEmpty) { deviceName_244 = bytes[244]; } if (bytes.isNotEmpty) { deviceName_245 = bytes[245]; } if (bytes.isNotEmpty) { deviceName_246 = bytes[246]; } if (bytes.isNotEmpty) { deviceName_247 = bytes[247]; } if (bytes.isNotEmpty) { deviceName_248 = bytes[248]; } if (bytes.isNotEmpty) { deviceName_249 = bytes[249]; } if (bytes.isNotEmpty) { deviceName_250 = bytes[250]; } if (bytes.isNotEmpty) { deviceName_251 = bytes[251]; } if (bytes.isNotEmpty) { deviceName_252 = bytes[252]; } if (bytes.isNotEmpty) { deviceName_253 = bytes[253]; } if (bytes.isNotEmpty) { deviceName_254 = bytes[254]; } if (bytes.isNotEmpty) { deviceName_255 = bytes[255]; }
  }
  @Uint8() int pipelineCacheUUID_0; @Uint8() int pipelineCacheUUID_1; @Uint8() int pipelineCacheUUID_2; @Uint8() int pipelineCacheUUID_3; @Uint8() int pipelineCacheUUID_4; @Uint8() int pipelineCacheUUID_5; @Uint8() int pipelineCacheUUID_6; @Uint8() int pipelineCacheUUID_7; @Uint8() int pipelineCacheUUID_8; @Uint8() int pipelineCacheUUID_9; @Uint8() int pipelineCacheUUID_10; @Uint8() int pipelineCacheUUID_11; @Uint8() int pipelineCacheUUID_12; @Uint8() int pipelineCacheUUID_13; @Uint8() int pipelineCacheUUID_14; @Uint8() int pipelineCacheUUID_15;
  String get pipelineCacheUUID {
    var bytes = [pipelineCacheUUID_0, pipelineCacheUUID_1, pipelineCacheUUID_2, pipelineCacheUUID_3, pipelineCacheUUID_4, pipelineCacheUUID_5, pipelineCacheUUID_6, pipelineCacheUUID_7, pipelineCacheUUID_8, pipelineCacheUUID_9, pipelineCacheUUID_10, pipelineCacheUUID_11, pipelineCacheUUID_12, pipelineCacheUUID_13, pipelineCacheUUID_14, pipelineCacheUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set pipelineCacheUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { pipelineCacheUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { pipelineCacheUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { pipelineCacheUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { pipelineCacheUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { pipelineCacheUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { pipelineCacheUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { pipelineCacheUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { pipelineCacheUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { pipelineCacheUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { pipelineCacheUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { pipelineCacheUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { pipelineCacheUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { pipelineCacheUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { pipelineCacheUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { pipelineCacheUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { pipelineCacheUUID_15 = bytes[15]; }
  }
  @Uint32() int pad1;
  @Uint32() int limits_maxImageDimension1D;
  @Uint32() int limits_maxImageDimension2D;
  @Uint32() int limits_maxImageDimension3D;
  @Uint32() int limits_maxImageDimensionCube;
  @Uint32() int limits_maxImageArrayLayers;
  @Uint32() int limits_maxTexelBufferElements;
  @Uint32() int limits_maxUniformBufferRange;
  @Uint32() int limits_maxStorageBufferRange;
  @Uint32() int limits_maxPushConstantsSize;
  @Uint32() int limits_maxMemoryAllocationCount;
  @Uint32() int limits_maxSamplerAllocationCount;
  @Uint64() int limits_bufferImageGranularity;
  @Uint64() int limits_sparseAddressSpaceSize;
  @Uint32() int limits_maxBoundDescriptorSets;
  @Uint32() int limits_maxPerStageDescriptorSamplers;
  @Uint32() int limits_maxPerStageDescriptorUniformBuffers;
  @Uint32() int limits_maxPerStageDescriptorStorageBuffers;
  @Uint32() int limits_maxPerStageDescriptorSampledImages;
  @Uint32() int limits_maxPerStageDescriptorStorageImages;
  @Uint32() int limits_maxPerStageDescriptorInputAttachments;
  @Uint32() int limits_maxPerStageResources;
  @Uint32() int limits_maxDescriptorSetSamplers;
  @Uint32() int limits_maxDescriptorSetUniformBuffers;
  @Uint32() int limits_maxDescriptorSetUniformBuffersDynamic;
  @Uint32() int limits_maxDescriptorSetStorageBuffers;
  @Uint32() int limits_maxDescriptorSetStorageBuffersDynamic;
  @Uint32() int limits_maxDescriptorSetSampledImages;
  @Uint32() int limits_maxDescriptorSetStorageImages;
  @Uint32() int limits_maxDescriptorSetInputAttachments;
  @Uint32() int limits_maxVertexInputAttributes;
  @Uint32() int limits_maxVertexInputBindings;
  @Uint32() int limits_maxVertexInputAttributeOffset;
  @Uint32() int limits_maxVertexInputBindingStride;
  @Uint32() int limits_maxVertexOutputComponents;
  @Uint32() int limits_maxTessellationGenerationLevel;
  @Uint32() int limits_maxTessellationPatchSize;
  @Uint32() int limits_maxTessellationControlPerVertexInputComponents;
  @Uint32() int limits_maxTessellationControlPerVertexOutputComponents;
  @Uint32() int limits_maxTessellationControlPerPatchOutputComponents;
  @Uint32() int limits_maxTessellationControlTotalOutputComponents;
  @Uint32() int limits_maxTessellationEvaluationInputComponents;
  @Uint32() int limits_maxTessellationEvaluationOutputComponents;
  @Uint32() int limits_maxGeometryShaderInvocations;
  @Uint32() int limits_maxGeometryInputComponents;
  @Uint32() int limits_maxGeometryOutputComponents;
  @Uint32() int limits_maxGeometryOutputVertices;
  @Uint32() int limits_maxGeometryTotalOutputComponents;
  @Uint32() int limits_maxFragmentInputComponents;
  @Uint32() int limits_maxFragmentOutputAttachments;
  @Uint32() int limits_maxFragmentDualSrcAttachments;
  @Uint32() int limits_maxFragmentCombinedOutputResources;
  @Uint32() int limits_maxComputeSharedMemorySize;
  @Uint32() int limits_maxComputeWorkGroupCount_0; @Uint32() int limits_maxComputeWorkGroupCount_1; @Uint32() int limits_maxComputeWorkGroupCount_2;
  @Uint32() int limits_maxComputeWorkGroupInvocations;
  @Uint32() int limits_maxComputeWorkGroupSize_0; @Uint32() int limits_maxComputeWorkGroupSize_1; @Uint32() int limits_maxComputeWorkGroupSize_2;
  @Uint32() int limits_subPixelPrecisionBits;
  @Uint32() int limits_subTexelPrecisionBits;
  @Uint32() int limits_mipmapPrecisionBits;
  @Uint32() int limits_maxDrawIndexedIndexValue;
  @Uint32() int limits_maxDrawIndirectCount;
  @Float() double limits_maxSamplerLodBias;
  @Float() double limits_maxSamplerAnisotropy;
  @Uint32() int limits_maxViewports;
  @Uint32() int limits_maxViewportDimensions_0; @Uint32() int limits_maxViewportDimensions_1;
  @Float() double limits_viewportBoundsRange_0; @Float() double limits_viewportBoundsRange_1;
  @Uint32() int limits_viewportSubPixelBits;
  @Uint64() int limits_minMemoryMapAlignment;
  @Uint64() int limits_minTexelBufferOffsetAlignment;
  @Uint64() int limits_minUniformBufferOffsetAlignment;
  @Uint64() int limits_minStorageBufferOffsetAlignment;
  @Int32() int limits_minTexelOffset;
  @Uint32() int limits_maxTexelOffset;
  @Int32() int limits_minTexelGatherOffset;
  @Uint32() int limits_maxTexelGatherOffset;
  @Float() double limits_minInterpolationOffset;
  @Float() double limits_maxInterpolationOffset;
  @Uint32() int limits_subPixelInterpolationOffsetBits;
  @Uint32() int limits_maxFramebufferWidth;
  @Uint32() int limits_maxFramebufferHeight;
  @Uint32() int limits_maxFramebufferLayers;
  @Uint32() int limits_framebufferColorSampleCounts;
  @Uint32() int limits_framebufferDepthSampleCounts;
  @Uint32() int limits_framebufferStencilSampleCounts;
  @Uint32() int limits_framebufferNoAttachmentsSampleCounts;
  @Uint32() int limits_maxColorAttachments;
  @Uint32() int limits_sampledImageColorSampleCounts;
  @Uint32() int limits_sampledImageIntegerSampleCounts;
  @Uint32() int limits_sampledImageDepthSampleCounts;
  @Uint32() int limits_sampledImageStencilSampleCounts;
  @Uint32() int limits_storageImageSampleCounts;
  @Uint32() int limits_maxSampleMaskWords;
  @Uint32() int limits_timestampComputeAndGraphics;
  @Float() double limits_timestampPeriod;
  @Uint32() int limits_maxClipDistances;
  @Uint32() int limits_maxCullDistances;
  @Uint32() int limits_maxCombinedClipAndCullDistances;
  @Uint32() int limits_discreteQueuePriorities;
  @Float() double limits_pointSizeRange_0; @Float() double limits_pointSizeRange_1;
  @Float() double limits_lineWidthRange_0; @Float() double limits_lineWidthRange_1;
  @Float() double limits_pointSizeGranularity;
  @Float() double limits_lineWidthGranularity;
  @Uint32() int limits_strictLines;
  @Uint32() int limits_standardSampleLocations;
  @Uint64() int limits_optimalBufferCopyOffsetAlignment;
  @Uint64() int limits_optimalBufferCopyRowPitchAlignment;
  @Uint64() int limits_nonCoherentAtomSize;
  @Uint32() int pad2;
  @Uint32() int sparseProperties_residencyStandard2DBlockShape;
  @Uint32() int sparseProperties_residencyStandard2DMultisampleBlockShape;
  @Uint32() int sparseProperties_residencyStandard3DBlockShape;
  @Uint32() int sparseProperties_residencyAlignedMipSize;
  @Uint32() int sparseProperties_residencyNonResidentStrict;
}

class VkExtensionProperties extends Struct {
  @Uint8() int extensionName_0; @Uint8() int extensionName_1; @Uint8() int extensionName_2; @Uint8() int extensionName_3; @Uint8() int extensionName_4; @Uint8() int extensionName_5; @Uint8() int extensionName_6; @Uint8() int extensionName_7; @Uint8() int extensionName_8; @Uint8() int extensionName_9; @Uint8() int extensionName_10; @Uint8() int extensionName_11; @Uint8() int extensionName_12; @Uint8() int extensionName_13; @Uint8() int extensionName_14; @Uint8() int extensionName_15; @Uint8() int extensionName_16; @Uint8() int extensionName_17; @Uint8() int extensionName_18; @Uint8() int extensionName_19; @Uint8() int extensionName_20; @Uint8() int extensionName_21; @Uint8() int extensionName_22; @Uint8() int extensionName_23; @Uint8() int extensionName_24; @Uint8() int extensionName_25; @Uint8() int extensionName_26; @Uint8() int extensionName_27; @Uint8() int extensionName_28; @Uint8() int extensionName_29; @Uint8() int extensionName_30; @Uint8() int extensionName_31; @Uint8() int extensionName_32; @Uint8() int extensionName_33; @Uint8() int extensionName_34; @Uint8() int extensionName_35; @Uint8() int extensionName_36; @Uint8() int extensionName_37; @Uint8() int extensionName_38; @Uint8() int extensionName_39; @Uint8() int extensionName_40; @Uint8() int extensionName_41; @Uint8() int extensionName_42; @Uint8() int extensionName_43; @Uint8() int extensionName_44; @Uint8() int extensionName_45; @Uint8() int extensionName_46; @Uint8() int extensionName_47; @Uint8() int extensionName_48; @Uint8() int extensionName_49; @Uint8() int extensionName_50; @Uint8() int extensionName_51; @Uint8() int extensionName_52; @Uint8() int extensionName_53; @Uint8() int extensionName_54; @Uint8() int extensionName_55; @Uint8() int extensionName_56; @Uint8() int extensionName_57; @Uint8() int extensionName_58; @Uint8() int extensionName_59; @Uint8() int extensionName_60; @Uint8() int extensionName_61; @Uint8() int extensionName_62; @Uint8() int extensionName_63; @Uint8() int extensionName_64; @Uint8() int extensionName_65; @Uint8() int extensionName_66; @Uint8() int extensionName_67; @Uint8() int extensionName_68; @Uint8() int extensionName_69; @Uint8() int extensionName_70; @Uint8() int extensionName_71; @Uint8() int extensionName_72; @Uint8() int extensionName_73; @Uint8() int extensionName_74; @Uint8() int extensionName_75; @Uint8() int extensionName_76; @Uint8() int extensionName_77; @Uint8() int extensionName_78; @Uint8() int extensionName_79; @Uint8() int extensionName_80; @Uint8() int extensionName_81; @Uint8() int extensionName_82; @Uint8() int extensionName_83; @Uint8() int extensionName_84; @Uint8() int extensionName_85; @Uint8() int extensionName_86; @Uint8() int extensionName_87; @Uint8() int extensionName_88; @Uint8() int extensionName_89; @Uint8() int extensionName_90; @Uint8() int extensionName_91; @Uint8() int extensionName_92; @Uint8() int extensionName_93; @Uint8() int extensionName_94; @Uint8() int extensionName_95; @Uint8() int extensionName_96; @Uint8() int extensionName_97; @Uint8() int extensionName_98; @Uint8() int extensionName_99; @Uint8() int extensionName_100; @Uint8() int extensionName_101; @Uint8() int extensionName_102; @Uint8() int extensionName_103; @Uint8() int extensionName_104; @Uint8() int extensionName_105; @Uint8() int extensionName_106; @Uint8() int extensionName_107; @Uint8() int extensionName_108; @Uint8() int extensionName_109; @Uint8() int extensionName_110; @Uint8() int extensionName_111; @Uint8() int extensionName_112; @Uint8() int extensionName_113; @Uint8() int extensionName_114; @Uint8() int extensionName_115; @Uint8() int extensionName_116; @Uint8() int extensionName_117; @Uint8() int extensionName_118; @Uint8() int extensionName_119; @Uint8() int extensionName_120; @Uint8() int extensionName_121; @Uint8() int extensionName_122; @Uint8() int extensionName_123; @Uint8() int extensionName_124; @Uint8() int extensionName_125; @Uint8() int extensionName_126; @Uint8() int extensionName_127; @Uint8() int extensionName_128; @Uint8() int extensionName_129; @Uint8() int extensionName_130; @Uint8() int extensionName_131; @Uint8() int extensionName_132; @Uint8() int extensionName_133; @Uint8() int extensionName_134; @Uint8() int extensionName_135; @Uint8() int extensionName_136; @Uint8() int extensionName_137; @Uint8() int extensionName_138; @Uint8() int extensionName_139; @Uint8() int extensionName_140; @Uint8() int extensionName_141; @Uint8() int extensionName_142; @Uint8() int extensionName_143; @Uint8() int extensionName_144; @Uint8() int extensionName_145; @Uint8() int extensionName_146; @Uint8() int extensionName_147; @Uint8() int extensionName_148; @Uint8() int extensionName_149; @Uint8() int extensionName_150; @Uint8() int extensionName_151; @Uint8() int extensionName_152; @Uint8() int extensionName_153; @Uint8() int extensionName_154; @Uint8() int extensionName_155; @Uint8() int extensionName_156; @Uint8() int extensionName_157; @Uint8() int extensionName_158; @Uint8() int extensionName_159; @Uint8() int extensionName_160; @Uint8() int extensionName_161; @Uint8() int extensionName_162; @Uint8() int extensionName_163; @Uint8() int extensionName_164; @Uint8() int extensionName_165; @Uint8() int extensionName_166; @Uint8() int extensionName_167; @Uint8() int extensionName_168; @Uint8() int extensionName_169; @Uint8() int extensionName_170; @Uint8() int extensionName_171; @Uint8() int extensionName_172; @Uint8() int extensionName_173; @Uint8() int extensionName_174; @Uint8() int extensionName_175; @Uint8() int extensionName_176; @Uint8() int extensionName_177; @Uint8() int extensionName_178; @Uint8() int extensionName_179; @Uint8() int extensionName_180; @Uint8() int extensionName_181; @Uint8() int extensionName_182; @Uint8() int extensionName_183; @Uint8() int extensionName_184; @Uint8() int extensionName_185; @Uint8() int extensionName_186; @Uint8() int extensionName_187; @Uint8() int extensionName_188; @Uint8() int extensionName_189; @Uint8() int extensionName_190; @Uint8() int extensionName_191; @Uint8() int extensionName_192; @Uint8() int extensionName_193; @Uint8() int extensionName_194; @Uint8() int extensionName_195; @Uint8() int extensionName_196; @Uint8() int extensionName_197; @Uint8() int extensionName_198; @Uint8() int extensionName_199; @Uint8() int extensionName_200; @Uint8() int extensionName_201; @Uint8() int extensionName_202; @Uint8() int extensionName_203; @Uint8() int extensionName_204; @Uint8() int extensionName_205; @Uint8() int extensionName_206; @Uint8() int extensionName_207; @Uint8() int extensionName_208; @Uint8() int extensionName_209; @Uint8() int extensionName_210; @Uint8() int extensionName_211; @Uint8() int extensionName_212; @Uint8() int extensionName_213; @Uint8() int extensionName_214; @Uint8() int extensionName_215; @Uint8() int extensionName_216; @Uint8() int extensionName_217; @Uint8() int extensionName_218; @Uint8() int extensionName_219; @Uint8() int extensionName_220; @Uint8() int extensionName_221; @Uint8() int extensionName_222; @Uint8() int extensionName_223; @Uint8() int extensionName_224; @Uint8() int extensionName_225; @Uint8() int extensionName_226; @Uint8() int extensionName_227; @Uint8() int extensionName_228; @Uint8() int extensionName_229; @Uint8() int extensionName_230; @Uint8() int extensionName_231; @Uint8() int extensionName_232; @Uint8() int extensionName_233; @Uint8() int extensionName_234; @Uint8() int extensionName_235; @Uint8() int extensionName_236; @Uint8() int extensionName_237; @Uint8() int extensionName_238; @Uint8() int extensionName_239; @Uint8() int extensionName_240; @Uint8() int extensionName_241; @Uint8() int extensionName_242; @Uint8() int extensionName_243; @Uint8() int extensionName_244; @Uint8() int extensionName_245; @Uint8() int extensionName_246; @Uint8() int extensionName_247; @Uint8() int extensionName_248; @Uint8() int extensionName_249; @Uint8() int extensionName_250; @Uint8() int extensionName_251; @Uint8() int extensionName_252; @Uint8() int extensionName_253; @Uint8() int extensionName_254; @Uint8() int extensionName_255;
  String get extensionName {
    var bytes = [extensionName_0, extensionName_1, extensionName_2, extensionName_3, extensionName_4, extensionName_5, extensionName_6, extensionName_7, extensionName_8, extensionName_9, extensionName_10, extensionName_11, extensionName_12, extensionName_13, extensionName_14, extensionName_15, extensionName_16, extensionName_17, extensionName_18, extensionName_19, extensionName_20, extensionName_21, extensionName_22, extensionName_23, extensionName_24, extensionName_25, extensionName_26, extensionName_27, extensionName_28, extensionName_29, extensionName_30, extensionName_31, extensionName_32, extensionName_33, extensionName_34, extensionName_35, extensionName_36, extensionName_37, extensionName_38, extensionName_39, extensionName_40, extensionName_41, extensionName_42, extensionName_43, extensionName_44, extensionName_45, extensionName_46, extensionName_47, extensionName_48, extensionName_49, extensionName_50, extensionName_51, extensionName_52, extensionName_53, extensionName_54, extensionName_55, extensionName_56, extensionName_57, extensionName_58, extensionName_59, extensionName_60, extensionName_61, extensionName_62, extensionName_63, extensionName_64, extensionName_65, extensionName_66, extensionName_67, extensionName_68, extensionName_69, extensionName_70, extensionName_71, extensionName_72, extensionName_73, extensionName_74, extensionName_75, extensionName_76, extensionName_77, extensionName_78, extensionName_79, extensionName_80, extensionName_81, extensionName_82, extensionName_83, extensionName_84, extensionName_85, extensionName_86, extensionName_87, extensionName_88, extensionName_89, extensionName_90, extensionName_91, extensionName_92, extensionName_93, extensionName_94, extensionName_95, extensionName_96, extensionName_97, extensionName_98, extensionName_99, extensionName_100, extensionName_101, extensionName_102, extensionName_103, extensionName_104, extensionName_105, extensionName_106, extensionName_107, extensionName_108, extensionName_109, extensionName_110, extensionName_111, extensionName_112, extensionName_113, extensionName_114, extensionName_115, extensionName_116, extensionName_117, extensionName_118, extensionName_119, extensionName_120, extensionName_121, extensionName_122, extensionName_123, extensionName_124, extensionName_125, extensionName_126, extensionName_127, extensionName_128, extensionName_129, extensionName_130, extensionName_131, extensionName_132, extensionName_133, extensionName_134, extensionName_135, extensionName_136, extensionName_137, extensionName_138, extensionName_139, extensionName_140, extensionName_141, extensionName_142, extensionName_143, extensionName_144, extensionName_145, extensionName_146, extensionName_147, extensionName_148, extensionName_149, extensionName_150, extensionName_151, extensionName_152, extensionName_153, extensionName_154, extensionName_155, extensionName_156, extensionName_157, extensionName_158, extensionName_159, extensionName_160, extensionName_161, extensionName_162, extensionName_163, extensionName_164, extensionName_165, extensionName_166, extensionName_167, extensionName_168, extensionName_169, extensionName_170, extensionName_171, extensionName_172, extensionName_173, extensionName_174, extensionName_175, extensionName_176, extensionName_177, extensionName_178, extensionName_179, extensionName_180, extensionName_181, extensionName_182, extensionName_183, extensionName_184, extensionName_185, extensionName_186, extensionName_187, extensionName_188, extensionName_189, extensionName_190, extensionName_191, extensionName_192, extensionName_193, extensionName_194, extensionName_195, extensionName_196, extensionName_197, extensionName_198, extensionName_199, extensionName_200, extensionName_201, extensionName_202, extensionName_203, extensionName_204, extensionName_205, extensionName_206, extensionName_207, extensionName_208, extensionName_209, extensionName_210, extensionName_211, extensionName_212, extensionName_213, extensionName_214, extensionName_215, extensionName_216, extensionName_217, extensionName_218, extensionName_219, extensionName_220, extensionName_221, extensionName_222, extensionName_223, extensionName_224, extensionName_225, extensionName_226, extensionName_227, extensionName_228, extensionName_229, extensionName_230, extensionName_231, extensionName_232, extensionName_233, extensionName_234, extensionName_235, extensionName_236, extensionName_237, extensionName_238, extensionName_239, extensionName_240, extensionName_241, extensionName_242, extensionName_243, extensionName_244, extensionName_245, extensionName_246, extensionName_247, extensionName_248, extensionName_249, extensionName_250, extensionName_251, extensionName_252, extensionName_253, extensionName_254, extensionName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set extensionName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { extensionName_0 = bytes[0]; } if (bytes.isNotEmpty) { extensionName_1 = bytes[1]; } if (bytes.isNotEmpty) { extensionName_2 = bytes[2]; } if (bytes.isNotEmpty) { extensionName_3 = bytes[3]; } if (bytes.isNotEmpty) { extensionName_4 = bytes[4]; } if (bytes.isNotEmpty) { extensionName_5 = bytes[5]; } if (bytes.isNotEmpty) { extensionName_6 = bytes[6]; } if (bytes.isNotEmpty) { extensionName_7 = bytes[7]; } if (bytes.isNotEmpty) { extensionName_8 = bytes[8]; } if (bytes.isNotEmpty) { extensionName_9 = bytes[9]; } if (bytes.isNotEmpty) { extensionName_10 = bytes[10]; } if (bytes.isNotEmpty) { extensionName_11 = bytes[11]; } if (bytes.isNotEmpty) { extensionName_12 = bytes[12]; } if (bytes.isNotEmpty) { extensionName_13 = bytes[13]; } if (bytes.isNotEmpty) { extensionName_14 = bytes[14]; } if (bytes.isNotEmpty) { extensionName_15 = bytes[15]; } if (bytes.isNotEmpty) { extensionName_16 = bytes[16]; } if (bytes.isNotEmpty) { extensionName_17 = bytes[17]; } if (bytes.isNotEmpty) { extensionName_18 = bytes[18]; } if (bytes.isNotEmpty) { extensionName_19 = bytes[19]; } if (bytes.isNotEmpty) { extensionName_20 = bytes[20]; } if (bytes.isNotEmpty) { extensionName_21 = bytes[21]; } if (bytes.isNotEmpty) { extensionName_22 = bytes[22]; } if (bytes.isNotEmpty) { extensionName_23 = bytes[23]; } if (bytes.isNotEmpty) { extensionName_24 = bytes[24]; } if (bytes.isNotEmpty) { extensionName_25 = bytes[25]; } if (bytes.isNotEmpty) { extensionName_26 = bytes[26]; } if (bytes.isNotEmpty) { extensionName_27 = bytes[27]; } if (bytes.isNotEmpty) { extensionName_28 = bytes[28]; } if (bytes.isNotEmpty) { extensionName_29 = bytes[29]; } if (bytes.isNotEmpty) { extensionName_30 = bytes[30]; } if (bytes.isNotEmpty) { extensionName_31 = bytes[31]; } if (bytes.isNotEmpty) { extensionName_32 = bytes[32]; } if (bytes.isNotEmpty) { extensionName_33 = bytes[33]; } if (bytes.isNotEmpty) { extensionName_34 = bytes[34]; } if (bytes.isNotEmpty) { extensionName_35 = bytes[35]; } if (bytes.isNotEmpty) { extensionName_36 = bytes[36]; } if (bytes.isNotEmpty) { extensionName_37 = bytes[37]; } if (bytes.isNotEmpty) { extensionName_38 = bytes[38]; } if (bytes.isNotEmpty) { extensionName_39 = bytes[39]; } if (bytes.isNotEmpty) { extensionName_40 = bytes[40]; } if (bytes.isNotEmpty) { extensionName_41 = bytes[41]; } if (bytes.isNotEmpty) { extensionName_42 = bytes[42]; } if (bytes.isNotEmpty) { extensionName_43 = bytes[43]; } if (bytes.isNotEmpty) { extensionName_44 = bytes[44]; } if (bytes.isNotEmpty) { extensionName_45 = bytes[45]; } if (bytes.isNotEmpty) { extensionName_46 = bytes[46]; } if (bytes.isNotEmpty) { extensionName_47 = bytes[47]; } if (bytes.isNotEmpty) { extensionName_48 = bytes[48]; } if (bytes.isNotEmpty) { extensionName_49 = bytes[49]; } if (bytes.isNotEmpty) { extensionName_50 = bytes[50]; } if (bytes.isNotEmpty) { extensionName_51 = bytes[51]; } if (bytes.isNotEmpty) { extensionName_52 = bytes[52]; } if (bytes.isNotEmpty) { extensionName_53 = bytes[53]; } if (bytes.isNotEmpty) { extensionName_54 = bytes[54]; } if (bytes.isNotEmpty) { extensionName_55 = bytes[55]; } if (bytes.isNotEmpty) { extensionName_56 = bytes[56]; } if (bytes.isNotEmpty) { extensionName_57 = bytes[57]; } if (bytes.isNotEmpty) { extensionName_58 = bytes[58]; } if (bytes.isNotEmpty) { extensionName_59 = bytes[59]; } if (bytes.isNotEmpty) { extensionName_60 = bytes[60]; } if (bytes.isNotEmpty) { extensionName_61 = bytes[61]; } if (bytes.isNotEmpty) { extensionName_62 = bytes[62]; } if (bytes.isNotEmpty) { extensionName_63 = bytes[63]; } if (bytes.isNotEmpty) { extensionName_64 = bytes[64]; } if (bytes.isNotEmpty) { extensionName_65 = bytes[65]; } if (bytes.isNotEmpty) { extensionName_66 = bytes[66]; } if (bytes.isNotEmpty) { extensionName_67 = bytes[67]; } if (bytes.isNotEmpty) { extensionName_68 = bytes[68]; } if (bytes.isNotEmpty) { extensionName_69 = bytes[69]; } if (bytes.isNotEmpty) { extensionName_70 = bytes[70]; } if (bytes.isNotEmpty) { extensionName_71 = bytes[71]; } if (bytes.isNotEmpty) { extensionName_72 = bytes[72]; } if (bytes.isNotEmpty) { extensionName_73 = bytes[73]; } if (bytes.isNotEmpty) { extensionName_74 = bytes[74]; } if (bytes.isNotEmpty) { extensionName_75 = bytes[75]; } if (bytes.isNotEmpty) { extensionName_76 = bytes[76]; } if (bytes.isNotEmpty) { extensionName_77 = bytes[77]; } if (bytes.isNotEmpty) { extensionName_78 = bytes[78]; } if (bytes.isNotEmpty) { extensionName_79 = bytes[79]; } if (bytes.isNotEmpty) { extensionName_80 = bytes[80]; } if (bytes.isNotEmpty) { extensionName_81 = bytes[81]; } if (bytes.isNotEmpty) { extensionName_82 = bytes[82]; } if (bytes.isNotEmpty) { extensionName_83 = bytes[83]; } if (bytes.isNotEmpty) { extensionName_84 = bytes[84]; } if (bytes.isNotEmpty) { extensionName_85 = bytes[85]; } if (bytes.isNotEmpty) { extensionName_86 = bytes[86]; } if (bytes.isNotEmpty) { extensionName_87 = bytes[87]; } if (bytes.isNotEmpty) { extensionName_88 = bytes[88]; } if (bytes.isNotEmpty) { extensionName_89 = bytes[89]; } if (bytes.isNotEmpty) { extensionName_90 = bytes[90]; } if (bytes.isNotEmpty) { extensionName_91 = bytes[91]; } if (bytes.isNotEmpty) { extensionName_92 = bytes[92]; } if (bytes.isNotEmpty) { extensionName_93 = bytes[93]; } if (bytes.isNotEmpty) { extensionName_94 = bytes[94]; } if (bytes.isNotEmpty) { extensionName_95 = bytes[95]; } if (bytes.isNotEmpty) { extensionName_96 = bytes[96]; } if (bytes.isNotEmpty) { extensionName_97 = bytes[97]; } if (bytes.isNotEmpty) { extensionName_98 = bytes[98]; } if (bytes.isNotEmpty) { extensionName_99 = bytes[99]; } if (bytes.isNotEmpty) { extensionName_100 = bytes[100]; } if (bytes.isNotEmpty) { extensionName_101 = bytes[101]; } if (bytes.isNotEmpty) { extensionName_102 = bytes[102]; } if (bytes.isNotEmpty) { extensionName_103 = bytes[103]; } if (bytes.isNotEmpty) { extensionName_104 = bytes[104]; } if (bytes.isNotEmpty) { extensionName_105 = bytes[105]; } if (bytes.isNotEmpty) { extensionName_106 = bytes[106]; } if (bytes.isNotEmpty) { extensionName_107 = bytes[107]; } if (bytes.isNotEmpty) { extensionName_108 = bytes[108]; } if (bytes.isNotEmpty) { extensionName_109 = bytes[109]; } if (bytes.isNotEmpty) { extensionName_110 = bytes[110]; } if (bytes.isNotEmpty) { extensionName_111 = bytes[111]; } if (bytes.isNotEmpty) { extensionName_112 = bytes[112]; } if (bytes.isNotEmpty) { extensionName_113 = bytes[113]; } if (bytes.isNotEmpty) { extensionName_114 = bytes[114]; } if (bytes.isNotEmpty) { extensionName_115 = bytes[115]; } if (bytes.isNotEmpty) { extensionName_116 = bytes[116]; } if (bytes.isNotEmpty) { extensionName_117 = bytes[117]; } if (bytes.isNotEmpty) { extensionName_118 = bytes[118]; } if (bytes.isNotEmpty) { extensionName_119 = bytes[119]; } if (bytes.isNotEmpty) { extensionName_120 = bytes[120]; } if (bytes.isNotEmpty) { extensionName_121 = bytes[121]; } if (bytes.isNotEmpty) { extensionName_122 = bytes[122]; } if (bytes.isNotEmpty) { extensionName_123 = bytes[123]; } if (bytes.isNotEmpty) { extensionName_124 = bytes[124]; } if (bytes.isNotEmpty) { extensionName_125 = bytes[125]; } if (bytes.isNotEmpty) { extensionName_126 = bytes[126]; } if (bytes.isNotEmpty) { extensionName_127 = bytes[127]; } if (bytes.isNotEmpty) { extensionName_128 = bytes[128]; } if (bytes.isNotEmpty) { extensionName_129 = bytes[129]; } if (bytes.isNotEmpty) { extensionName_130 = bytes[130]; } if (bytes.isNotEmpty) { extensionName_131 = bytes[131]; } if (bytes.isNotEmpty) { extensionName_132 = bytes[132]; } if (bytes.isNotEmpty) { extensionName_133 = bytes[133]; } if (bytes.isNotEmpty) { extensionName_134 = bytes[134]; } if (bytes.isNotEmpty) { extensionName_135 = bytes[135]; } if (bytes.isNotEmpty) { extensionName_136 = bytes[136]; } if (bytes.isNotEmpty) { extensionName_137 = bytes[137]; } if (bytes.isNotEmpty) { extensionName_138 = bytes[138]; } if (bytes.isNotEmpty) { extensionName_139 = bytes[139]; } if (bytes.isNotEmpty) { extensionName_140 = bytes[140]; } if (bytes.isNotEmpty) { extensionName_141 = bytes[141]; } if (bytes.isNotEmpty) { extensionName_142 = bytes[142]; } if (bytes.isNotEmpty) { extensionName_143 = bytes[143]; } if (bytes.isNotEmpty) { extensionName_144 = bytes[144]; } if (bytes.isNotEmpty) { extensionName_145 = bytes[145]; } if (bytes.isNotEmpty) { extensionName_146 = bytes[146]; } if (bytes.isNotEmpty) { extensionName_147 = bytes[147]; } if (bytes.isNotEmpty) { extensionName_148 = bytes[148]; } if (bytes.isNotEmpty) { extensionName_149 = bytes[149]; } if (bytes.isNotEmpty) { extensionName_150 = bytes[150]; } if (bytes.isNotEmpty) { extensionName_151 = bytes[151]; } if (bytes.isNotEmpty) { extensionName_152 = bytes[152]; } if (bytes.isNotEmpty) { extensionName_153 = bytes[153]; } if (bytes.isNotEmpty) { extensionName_154 = bytes[154]; } if (bytes.isNotEmpty) { extensionName_155 = bytes[155]; } if (bytes.isNotEmpty) { extensionName_156 = bytes[156]; } if (bytes.isNotEmpty) { extensionName_157 = bytes[157]; } if (bytes.isNotEmpty) { extensionName_158 = bytes[158]; } if (bytes.isNotEmpty) { extensionName_159 = bytes[159]; } if (bytes.isNotEmpty) { extensionName_160 = bytes[160]; } if (bytes.isNotEmpty) { extensionName_161 = bytes[161]; } if (bytes.isNotEmpty) { extensionName_162 = bytes[162]; } if (bytes.isNotEmpty) { extensionName_163 = bytes[163]; } if (bytes.isNotEmpty) { extensionName_164 = bytes[164]; } if (bytes.isNotEmpty) { extensionName_165 = bytes[165]; } if (bytes.isNotEmpty) { extensionName_166 = bytes[166]; } if (bytes.isNotEmpty) { extensionName_167 = bytes[167]; } if (bytes.isNotEmpty) { extensionName_168 = bytes[168]; } if (bytes.isNotEmpty) { extensionName_169 = bytes[169]; } if (bytes.isNotEmpty) { extensionName_170 = bytes[170]; } if (bytes.isNotEmpty) { extensionName_171 = bytes[171]; } if (bytes.isNotEmpty) { extensionName_172 = bytes[172]; } if (bytes.isNotEmpty) { extensionName_173 = bytes[173]; } if (bytes.isNotEmpty) { extensionName_174 = bytes[174]; } if (bytes.isNotEmpty) { extensionName_175 = bytes[175]; } if (bytes.isNotEmpty) { extensionName_176 = bytes[176]; } if (bytes.isNotEmpty) { extensionName_177 = bytes[177]; } if (bytes.isNotEmpty) { extensionName_178 = bytes[178]; } if (bytes.isNotEmpty) { extensionName_179 = bytes[179]; } if (bytes.isNotEmpty) { extensionName_180 = bytes[180]; } if (bytes.isNotEmpty) { extensionName_181 = bytes[181]; } if (bytes.isNotEmpty) { extensionName_182 = bytes[182]; } if (bytes.isNotEmpty) { extensionName_183 = bytes[183]; } if (bytes.isNotEmpty) { extensionName_184 = bytes[184]; } if (bytes.isNotEmpty) { extensionName_185 = bytes[185]; } if (bytes.isNotEmpty) { extensionName_186 = bytes[186]; } if (bytes.isNotEmpty) { extensionName_187 = bytes[187]; } if (bytes.isNotEmpty) { extensionName_188 = bytes[188]; } if (bytes.isNotEmpty) { extensionName_189 = bytes[189]; } if (bytes.isNotEmpty) { extensionName_190 = bytes[190]; } if (bytes.isNotEmpty) { extensionName_191 = bytes[191]; } if (bytes.isNotEmpty) { extensionName_192 = bytes[192]; } if (bytes.isNotEmpty) { extensionName_193 = bytes[193]; } if (bytes.isNotEmpty) { extensionName_194 = bytes[194]; } if (bytes.isNotEmpty) { extensionName_195 = bytes[195]; } if (bytes.isNotEmpty) { extensionName_196 = bytes[196]; } if (bytes.isNotEmpty) { extensionName_197 = bytes[197]; } if (bytes.isNotEmpty) { extensionName_198 = bytes[198]; } if (bytes.isNotEmpty) { extensionName_199 = bytes[199]; } if (bytes.isNotEmpty) { extensionName_200 = bytes[200]; } if (bytes.isNotEmpty) { extensionName_201 = bytes[201]; } if (bytes.isNotEmpty) { extensionName_202 = bytes[202]; } if (bytes.isNotEmpty) { extensionName_203 = bytes[203]; } if (bytes.isNotEmpty) { extensionName_204 = bytes[204]; } if (bytes.isNotEmpty) { extensionName_205 = bytes[205]; } if (bytes.isNotEmpty) { extensionName_206 = bytes[206]; } if (bytes.isNotEmpty) { extensionName_207 = bytes[207]; } if (bytes.isNotEmpty) { extensionName_208 = bytes[208]; } if (bytes.isNotEmpty) { extensionName_209 = bytes[209]; } if (bytes.isNotEmpty) { extensionName_210 = bytes[210]; } if (bytes.isNotEmpty) { extensionName_211 = bytes[211]; } if (bytes.isNotEmpty) { extensionName_212 = bytes[212]; } if (bytes.isNotEmpty) { extensionName_213 = bytes[213]; } if (bytes.isNotEmpty) { extensionName_214 = bytes[214]; } if (bytes.isNotEmpty) { extensionName_215 = bytes[215]; } if (bytes.isNotEmpty) { extensionName_216 = bytes[216]; } if (bytes.isNotEmpty) { extensionName_217 = bytes[217]; } if (bytes.isNotEmpty) { extensionName_218 = bytes[218]; } if (bytes.isNotEmpty) { extensionName_219 = bytes[219]; } if (bytes.isNotEmpty) { extensionName_220 = bytes[220]; } if (bytes.isNotEmpty) { extensionName_221 = bytes[221]; } if (bytes.isNotEmpty) { extensionName_222 = bytes[222]; } if (bytes.isNotEmpty) { extensionName_223 = bytes[223]; } if (bytes.isNotEmpty) { extensionName_224 = bytes[224]; } if (bytes.isNotEmpty) { extensionName_225 = bytes[225]; } if (bytes.isNotEmpty) { extensionName_226 = bytes[226]; } if (bytes.isNotEmpty) { extensionName_227 = bytes[227]; } if (bytes.isNotEmpty) { extensionName_228 = bytes[228]; } if (bytes.isNotEmpty) { extensionName_229 = bytes[229]; } if (bytes.isNotEmpty) { extensionName_230 = bytes[230]; } if (bytes.isNotEmpty) { extensionName_231 = bytes[231]; } if (bytes.isNotEmpty) { extensionName_232 = bytes[232]; } if (bytes.isNotEmpty) { extensionName_233 = bytes[233]; } if (bytes.isNotEmpty) { extensionName_234 = bytes[234]; } if (bytes.isNotEmpty) { extensionName_235 = bytes[235]; } if (bytes.isNotEmpty) { extensionName_236 = bytes[236]; } if (bytes.isNotEmpty) { extensionName_237 = bytes[237]; } if (bytes.isNotEmpty) { extensionName_238 = bytes[238]; } if (bytes.isNotEmpty) { extensionName_239 = bytes[239]; } if (bytes.isNotEmpty) { extensionName_240 = bytes[240]; } if (bytes.isNotEmpty) { extensionName_241 = bytes[241]; } if (bytes.isNotEmpty) { extensionName_242 = bytes[242]; } if (bytes.isNotEmpty) { extensionName_243 = bytes[243]; } if (bytes.isNotEmpty) { extensionName_244 = bytes[244]; } if (bytes.isNotEmpty) { extensionName_245 = bytes[245]; } if (bytes.isNotEmpty) { extensionName_246 = bytes[246]; } if (bytes.isNotEmpty) { extensionName_247 = bytes[247]; } if (bytes.isNotEmpty) { extensionName_248 = bytes[248]; } if (bytes.isNotEmpty) { extensionName_249 = bytes[249]; } if (bytes.isNotEmpty) { extensionName_250 = bytes[250]; } if (bytes.isNotEmpty) { extensionName_251 = bytes[251]; } if (bytes.isNotEmpty) { extensionName_252 = bytes[252]; } if (bytes.isNotEmpty) { extensionName_253 = bytes[253]; } if (bytes.isNotEmpty) { extensionName_254 = bytes[254]; } if (bytes.isNotEmpty) { extensionName_255 = bytes[255]; }
  }
  @Uint32() int specVersion;
}

class VkLayerProperties extends Struct {
  @Uint8() int layerName_0; @Uint8() int layerName_1; @Uint8() int layerName_2; @Uint8() int layerName_3; @Uint8() int layerName_4; @Uint8() int layerName_5; @Uint8() int layerName_6; @Uint8() int layerName_7; @Uint8() int layerName_8; @Uint8() int layerName_9; @Uint8() int layerName_10; @Uint8() int layerName_11; @Uint8() int layerName_12; @Uint8() int layerName_13; @Uint8() int layerName_14; @Uint8() int layerName_15; @Uint8() int layerName_16; @Uint8() int layerName_17; @Uint8() int layerName_18; @Uint8() int layerName_19; @Uint8() int layerName_20; @Uint8() int layerName_21; @Uint8() int layerName_22; @Uint8() int layerName_23; @Uint8() int layerName_24; @Uint8() int layerName_25; @Uint8() int layerName_26; @Uint8() int layerName_27; @Uint8() int layerName_28; @Uint8() int layerName_29; @Uint8() int layerName_30; @Uint8() int layerName_31; @Uint8() int layerName_32; @Uint8() int layerName_33; @Uint8() int layerName_34; @Uint8() int layerName_35; @Uint8() int layerName_36; @Uint8() int layerName_37; @Uint8() int layerName_38; @Uint8() int layerName_39; @Uint8() int layerName_40; @Uint8() int layerName_41; @Uint8() int layerName_42; @Uint8() int layerName_43; @Uint8() int layerName_44; @Uint8() int layerName_45; @Uint8() int layerName_46; @Uint8() int layerName_47; @Uint8() int layerName_48; @Uint8() int layerName_49; @Uint8() int layerName_50; @Uint8() int layerName_51; @Uint8() int layerName_52; @Uint8() int layerName_53; @Uint8() int layerName_54; @Uint8() int layerName_55; @Uint8() int layerName_56; @Uint8() int layerName_57; @Uint8() int layerName_58; @Uint8() int layerName_59; @Uint8() int layerName_60; @Uint8() int layerName_61; @Uint8() int layerName_62; @Uint8() int layerName_63; @Uint8() int layerName_64; @Uint8() int layerName_65; @Uint8() int layerName_66; @Uint8() int layerName_67; @Uint8() int layerName_68; @Uint8() int layerName_69; @Uint8() int layerName_70; @Uint8() int layerName_71; @Uint8() int layerName_72; @Uint8() int layerName_73; @Uint8() int layerName_74; @Uint8() int layerName_75; @Uint8() int layerName_76; @Uint8() int layerName_77; @Uint8() int layerName_78; @Uint8() int layerName_79; @Uint8() int layerName_80; @Uint8() int layerName_81; @Uint8() int layerName_82; @Uint8() int layerName_83; @Uint8() int layerName_84; @Uint8() int layerName_85; @Uint8() int layerName_86; @Uint8() int layerName_87; @Uint8() int layerName_88; @Uint8() int layerName_89; @Uint8() int layerName_90; @Uint8() int layerName_91; @Uint8() int layerName_92; @Uint8() int layerName_93; @Uint8() int layerName_94; @Uint8() int layerName_95; @Uint8() int layerName_96; @Uint8() int layerName_97; @Uint8() int layerName_98; @Uint8() int layerName_99; @Uint8() int layerName_100; @Uint8() int layerName_101; @Uint8() int layerName_102; @Uint8() int layerName_103; @Uint8() int layerName_104; @Uint8() int layerName_105; @Uint8() int layerName_106; @Uint8() int layerName_107; @Uint8() int layerName_108; @Uint8() int layerName_109; @Uint8() int layerName_110; @Uint8() int layerName_111; @Uint8() int layerName_112; @Uint8() int layerName_113; @Uint8() int layerName_114; @Uint8() int layerName_115; @Uint8() int layerName_116; @Uint8() int layerName_117; @Uint8() int layerName_118; @Uint8() int layerName_119; @Uint8() int layerName_120; @Uint8() int layerName_121; @Uint8() int layerName_122; @Uint8() int layerName_123; @Uint8() int layerName_124; @Uint8() int layerName_125; @Uint8() int layerName_126; @Uint8() int layerName_127; @Uint8() int layerName_128; @Uint8() int layerName_129; @Uint8() int layerName_130; @Uint8() int layerName_131; @Uint8() int layerName_132; @Uint8() int layerName_133; @Uint8() int layerName_134; @Uint8() int layerName_135; @Uint8() int layerName_136; @Uint8() int layerName_137; @Uint8() int layerName_138; @Uint8() int layerName_139; @Uint8() int layerName_140; @Uint8() int layerName_141; @Uint8() int layerName_142; @Uint8() int layerName_143; @Uint8() int layerName_144; @Uint8() int layerName_145; @Uint8() int layerName_146; @Uint8() int layerName_147; @Uint8() int layerName_148; @Uint8() int layerName_149; @Uint8() int layerName_150; @Uint8() int layerName_151; @Uint8() int layerName_152; @Uint8() int layerName_153; @Uint8() int layerName_154; @Uint8() int layerName_155; @Uint8() int layerName_156; @Uint8() int layerName_157; @Uint8() int layerName_158; @Uint8() int layerName_159; @Uint8() int layerName_160; @Uint8() int layerName_161; @Uint8() int layerName_162; @Uint8() int layerName_163; @Uint8() int layerName_164; @Uint8() int layerName_165; @Uint8() int layerName_166; @Uint8() int layerName_167; @Uint8() int layerName_168; @Uint8() int layerName_169; @Uint8() int layerName_170; @Uint8() int layerName_171; @Uint8() int layerName_172; @Uint8() int layerName_173; @Uint8() int layerName_174; @Uint8() int layerName_175; @Uint8() int layerName_176; @Uint8() int layerName_177; @Uint8() int layerName_178; @Uint8() int layerName_179; @Uint8() int layerName_180; @Uint8() int layerName_181; @Uint8() int layerName_182; @Uint8() int layerName_183; @Uint8() int layerName_184; @Uint8() int layerName_185; @Uint8() int layerName_186; @Uint8() int layerName_187; @Uint8() int layerName_188; @Uint8() int layerName_189; @Uint8() int layerName_190; @Uint8() int layerName_191; @Uint8() int layerName_192; @Uint8() int layerName_193; @Uint8() int layerName_194; @Uint8() int layerName_195; @Uint8() int layerName_196; @Uint8() int layerName_197; @Uint8() int layerName_198; @Uint8() int layerName_199; @Uint8() int layerName_200; @Uint8() int layerName_201; @Uint8() int layerName_202; @Uint8() int layerName_203; @Uint8() int layerName_204; @Uint8() int layerName_205; @Uint8() int layerName_206; @Uint8() int layerName_207; @Uint8() int layerName_208; @Uint8() int layerName_209; @Uint8() int layerName_210; @Uint8() int layerName_211; @Uint8() int layerName_212; @Uint8() int layerName_213; @Uint8() int layerName_214; @Uint8() int layerName_215; @Uint8() int layerName_216; @Uint8() int layerName_217; @Uint8() int layerName_218; @Uint8() int layerName_219; @Uint8() int layerName_220; @Uint8() int layerName_221; @Uint8() int layerName_222; @Uint8() int layerName_223; @Uint8() int layerName_224; @Uint8() int layerName_225; @Uint8() int layerName_226; @Uint8() int layerName_227; @Uint8() int layerName_228; @Uint8() int layerName_229; @Uint8() int layerName_230; @Uint8() int layerName_231; @Uint8() int layerName_232; @Uint8() int layerName_233; @Uint8() int layerName_234; @Uint8() int layerName_235; @Uint8() int layerName_236; @Uint8() int layerName_237; @Uint8() int layerName_238; @Uint8() int layerName_239; @Uint8() int layerName_240; @Uint8() int layerName_241; @Uint8() int layerName_242; @Uint8() int layerName_243; @Uint8() int layerName_244; @Uint8() int layerName_245; @Uint8() int layerName_246; @Uint8() int layerName_247; @Uint8() int layerName_248; @Uint8() int layerName_249; @Uint8() int layerName_250; @Uint8() int layerName_251; @Uint8() int layerName_252; @Uint8() int layerName_253; @Uint8() int layerName_254; @Uint8() int layerName_255;
  String get layerName {
    var bytes = [layerName_0, layerName_1, layerName_2, layerName_3, layerName_4, layerName_5, layerName_6, layerName_7, layerName_8, layerName_9, layerName_10, layerName_11, layerName_12, layerName_13, layerName_14, layerName_15, layerName_16, layerName_17, layerName_18, layerName_19, layerName_20, layerName_21, layerName_22, layerName_23, layerName_24, layerName_25, layerName_26, layerName_27, layerName_28, layerName_29, layerName_30, layerName_31, layerName_32, layerName_33, layerName_34, layerName_35, layerName_36, layerName_37, layerName_38, layerName_39, layerName_40, layerName_41, layerName_42, layerName_43, layerName_44, layerName_45, layerName_46, layerName_47, layerName_48, layerName_49, layerName_50, layerName_51, layerName_52, layerName_53, layerName_54, layerName_55, layerName_56, layerName_57, layerName_58, layerName_59, layerName_60, layerName_61, layerName_62, layerName_63, layerName_64, layerName_65, layerName_66, layerName_67, layerName_68, layerName_69, layerName_70, layerName_71, layerName_72, layerName_73, layerName_74, layerName_75, layerName_76, layerName_77, layerName_78, layerName_79, layerName_80, layerName_81, layerName_82, layerName_83, layerName_84, layerName_85, layerName_86, layerName_87, layerName_88, layerName_89, layerName_90, layerName_91, layerName_92, layerName_93, layerName_94, layerName_95, layerName_96, layerName_97, layerName_98, layerName_99, layerName_100, layerName_101, layerName_102, layerName_103, layerName_104, layerName_105, layerName_106, layerName_107, layerName_108, layerName_109, layerName_110, layerName_111, layerName_112, layerName_113, layerName_114, layerName_115, layerName_116, layerName_117, layerName_118, layerName_119, layerName_120, layerName_121, layerName_122, layerName_123, layerName_124, layerName_125, layerName_126, layerName_127, layerName_128, layerName_129, layerName_130, layerName_131, layerName_132, layerName_133, layerName_134, layerName_135, layerName_136, layerName_137, layerName_138, layerName_139, layerName_140, layerName_141, layerName_142, layerName_143, layerName_144, layerName_145, layerName_146, layerName_147, layerName_148, layerName_149, layerName_150, layerName_151, layerName_152, layerName_153, layerName_154, layerName_155, layerName_156, layerName_157, layerName_158, layerName_159, layerName_160, layerName_161, layerName_162, layerName_163, layerName_164, layerName_165, layerName_166, layerName_167, layerName_168, layerName_169, layerName_170, layerName_171, layerName_172, layerName_173, layerName_174, layerName_175, layerName_176, layerName_177, layerName_178, layerName_179, layerName_180, layerName_181, layerName_182, layerName_183, layerName_184, layerName_185, layerName_186, layerName_187, layerName_188, layerName_189, layerName_190, layerName_191, layerName_192, layerName_193, layerName_194, layerName_195, layerName_196, layerName_197, layerName_198, layerName_199, layerName_200, layerName_201, layerName_202, layerName_203, layerName_204, layerName_205, layerName_206, layerName_207, layerName_208, layerName_209, layerName_210, layerName_211, layerName_212, layerName_213, layerName_214, layerName_215, layerName_216, layerName_217, layerName_218, layerName_219, layerName_220, layerName_221, layerName_222, layerName_223, layerName_224, layerName_225, layerName_226, layerName_227, layerName_228, layerName_229, layerName_230, layerName_231, layerName_232, layerName_233, layerName_234, layerName_235, layerName_236, layerName_237, layerName_238, layerName_239, layerName_240, layerName_241, layerName_242, layerName_243, layerName_244, layerName_245, layerName_246, layerName_247, layerName_248, layerName_249, layerName_250, layerName_251, layerName_252, layerName_253, layerName_254, layerName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set layerName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { layerName_0 = bytes[0]; } if (bytes.isNotEmpty) { layerName_1 = bytes[1]; } if (bytes.isNotEmpty) { layerName_2 = bytes[2]; } if (bytes.isNotEmpty) { layerName_3 = bytes[3]; } if (bytes.isNotEmpty) { layerName_4 = bytes[4]; } if (bytes.isNotEmpty) { layerName_5 = bytes[5]; } if (bytes.isNotEmpty) { layerName_6 = bytes[6]; } if (bytes.isNotEmpty) { layerName_7 = bytes[7]; } if (bytes.isNotEmpty) { layerName_8 = bytes[8]; } if (bytes.isNotEmpty) { layerName_9 = bytes[9]; } if (bytes.isNotEmpty) { layerName_10 = bytes[10]; } if (bytes.isNotEmpty) { layerName_11 = bytes[11]; } if (bytes.isNotEmpty) { layerName_12 = bytes[12]; } if (bytes.isNotEmpty) { layerName_13 = bytes[13]; } if (bytes.isNotEmpty) { layerName_14 = bytes[14]; } if (bytes.isNotEmpty) { layerName_15 = bytes[15]; } if (bytes.isNotEmpty) { layerName_16 = bytes[16]; } if (bytes.isNotEmpty) { layerName_17 = bytes[17]; } if (bytes.isNotEmpty) { layerName_18 = bytes[18]; } if (bytes.isNotEmpty) { layerName_19 = bytes[19]; } if (bytes.isNotEmpty) { layerName_20 = bytes[20]; } if (bytes.isNotEmpty) { layerName_21 = bytes[21]; } if (bytes.isNotEmpty) { layerName_22 = bytes[22]; } if (bytes.isNotEmpty) { layerName_23 = bytes[23]; } if (bytes.isNotEmpty) { layerName_24 = bytes[24]; } if (bytes.isNotEmpty) { layerName_25 = bytes[25]; } if (bytes.isNotEmpty) { layerName_26 = bytes[26]; } if (bytes.isNotEmpty) { layerName_27 = bytes[27]; } if (bytes.isNotEmpty) { layerName_28 = bytes[28]; } if (bytes.isNotEmpty) { layerName_29 = bytes[29]; } if (bytes.isNotEmpty) { layerName_30 = bytes[30]; } if (bytes.isNotEmpty) { layerName_31 = bytes[31]; } if (bytes.isNotEmpty) { layerName_32 = bytes[32]; } if (bytes.isNotEmpty) { layerName_33 = bytes[33]; } if (bytes.isNotEmpty) { layerName_34 = bytes[34]; } if (bytes.isNotEmpty) { layerName_35 = bytes[35]; } if (bytes.isNotEmpty) { layerName_36 = bytes[36]; } if (bytes.isNotEmpty) { layerName_37 = bytes[37]; } if (bytes.isNotEmpty) { layerName_38 = bytes[38]; } if (bytes.isNotEmpty) { layerName_39 = bytes[39]; } if (bytes.isNotEmpty) { layerName_40 = bytes[40]; } if (bytes.isNotEmpty) { layerName_41 = bytes[41]; } if (bytes.isNotEmpty) { layerName_42 = bytes[42]; } if (bytes.isNotEmpty) { layerName_43 = bytes[43]; } if (bytes.isNotEmpty) { layerName_44 = bytes[44]; } if (bytes.isNotEmpty) { layerName_45 = bytes[45]; } if (bytes.isNotEmpty) { layerName_46 = bytes[46]; } if (bytes.isNotEmpty) { layerName_47 = bytes[47]; } if (bytes.isNotEmpty) { layerName_48 = bytes[48]; } if (bytes.isNotEmpty) { layerName_49 = bytes[49]; } if (bytes.isNotEmpty) { layerName_50 = bytes[50]; } if (bytes.isNotEmpty) { layerName_51 = bytes[51]; } if (bytes.isNotEmpty) { layerName_52 = bytes[52]; } if (bytes.isNotEmpty) { layerName_53 = bytes[53]; } if (bytes.isNotEmpty) { layerName_54 = bytes[54]; } if (bytes.isNotEmpty) { layerName_55 = bytes[55]; } if (bytes.isNotEmpty) { layerName_56 = bytes[56]; } if (bytes.isNotEmpty) { layerName_57 = bytes[57]; } if (bytes.isNotEmpty) { layerName_58 = bytes[58]; } if (bytes.isNotEmpty) { layerName_59 = bytes[59]; } if (bytes.isNotEmpty) { layerName_60 = bytes[60]; } if (bytes.isNotEmpty) { layerName_61 = bytes[61]; } if (bytes.isNotEmpty) { layerName_62 = bytes[62]; } if (bytes.isNotEmpty) { layerName_63 = bytes[63]; } if (bytes.isNotEmpty) { layerName_64 = bytes[64]; } if (bytes.isNotEmpty) { layerName_65 = bytes[65]; } if (bytes.isNotEmpty) { layerName_66 = bytes[66]; } if (bytes.isNotEmpty) { layerName_67 = bytes[67]; } if (bytes.isNotEmpty) { layerName_68 = bytes[68]; } if (bytes.isNotEmpty) { layerName_69 = bytes[69]; } if (bytes.isNotEmpty) { layerName_70 = bytes[70]; } if (bytes.isNotEmpty) { layerName_71 = bytes[71]; } if (bytes.isNotEmpty) { layerName_72 = bytes[72]; } if (bytes.isNotEmpty) { layerName_73 = bytes[73]; } if (bytes.isNotEmpty) { layerName_74 = bytes[74]; } if (bytes.isNotEmpty) { layerName_75 = bytes[75]; } if (bytes.isNotEmpty) { layerName_76 = bytes[76]; } if (bytes.isNotEmpty) { layerName_77 = bytes[77]; } if (bytes.isNotEmpty) { layerName_78 = bytes[78]; } if (bytes.isNotEmpty) { layerName_79 = bytes[79]; } if (bytes.isNotEmpty) { layerName_80 = bytes[80]; } if (bytes.isNotEmpty) { layerName_81 = bytes[81]; } if (bytes.isNotEmpty) { layerName_82 = bytes[82]; } if (bytes.isNotEmpty) { layerName_83 = bytes[83]; } if (bytes.isNotEmpty) { layerName_84 = bytes[84]; } if (bytes.isNotEmpty) { layerName_85 = bytes[85]; } if (bytes.isNotEmpty) { layerName_86 = bytes[86]; } if (bytes.isNotEmpty) { layerName_87 = bytes[87]; } if (bytes.isNotEmpty) { layerName_88 = bytes[88]; } if (bytes.isNotEmpty) { layerName_89 = bytes[89]; } if (bytes.isNotEmpty) { layerName_90 = bytes[90]; } if (bytes.isNotEmpty) { layerName_91 = bytes[91]; } if (bytes.isNotEmpty) { layerName_92 = bytes[92]; } if (bytes.isNotEmpty) { layerName_93 = bytes[93]; } if (bytes.isNotEmpty) { layerName_94 = bytes[94]; } if (bytes.isNotEmpty) { layerName_95 = bytes[95]; } if (bytes.isNotEmpty) { layerName_96 = bytes[96]; } if (bytes.isNotEmpty) { layerName_97 = bytes[97]; } if (bytes.isNotEmpty) { layerName_98 = bytes[98]; } if (bytes.isNotEmpty) { layerName_99 = bytes[99]; } if (bytes.isNotEmpty) { layerName_100 = bytes[100]; } if (bytes.isNotEmpty) { layerName_101 = bytes[101]; } if (bytes.isNotEmpty) { layerName_102 = bytes[102]; } if (bytes.isNotEmpty) { layerName_103 = bytes[103]; } if (bytes.isNotEmpty) { layerName_104 = bytes[104]; } if (bytes.isNotEmpty) { layerName_105 = bytes[105]; } if (bytes.isNotEmpty) { layerName_106 = bytes[106]; } if (bytes.isNotEmpty) { layerName_107 = bytes[107]; } if (bytes.isNotEmpty) { layerName_108 = bytes[108]; } if (bytes.isNotEmpty) { layerName_109 = bytes[109]; } if (bytes.isNotEmpty) { layerName_110 = bytes[110]; } if (bytes.isNotEmpty) { layerName_111 = bytes[111]; } if (bytes.isNotEmpty) { layerName_112 = bytes[112]; } if (bytes.isNotEmpty) { layerName_113 = bytes[113]; } if (bytes.isNotEmpty) { layerName_114 = bytes[114]; } if (bytes.isNotEmpty) { layerName_115 = bytes[115]; } if (bytes.isNotEmpty) { layerName_116 = bytes[116]; } if (bytes.isNotEmpty) { layerName_117 = bytes[117]; } if (bytes.isNotEmpty) { layerName_118 = bytes[118]; } if (bytes.isNotEmpty) { layerName_119 = bytes[119]; } if (bytes.isNotEmpty) { layerName_120 = bytes[120]; } if (bytes.isNotEmpty) { layerName_121 = bytes[121]; } if (bytes.isNotEmpty) { layerName_122 = bytes[122]; } if (bytes.isNotEmpty) { layerName_123 = bytes[123]; } if (bytes.isNotEmpty) { layerName_124 = bytes[124]; } if (bytes.isNotEmpty) { layerName_125 = bytes[125]; } if (bytes.isNotEmpty) { layerName_126 = bytes[126]; } if (bytes.isNotEmpty) { layerName_127 = bytes[127]; } if (bytes.isNotEmpty) { layerName_128 = bytes[128]; } if (bytes.isNotEmpty) { layerName_129 = bytes[129]; } if (bytes.isNotEmpty) { layerName_130 = bytes[130]; } if (bytes.isNotEmpty) { layerName_131 = bytes[131]; } if (bytes.isNotEmpty) { layerName_132 = bytes[132]; } if (bytes.isNotEmpty) { layerName_133 = bytes[133]; } if (bytes.isNotEmpty) { layerName_134 = bytes[134]; } if (bytes.isNotEmpty) { layerName_135 = bytes[135]; } if (bytes.isNotEmpty) { layerName_136 = bytes[136]; } if (bytes.isNotEmpty) { layerName_137 = bytes[137]; } if (bytes.isNotEmpty) { layerName_138 = bytes[138]; } if (bytes.isNotEmpty) { layerName_139 = bytes[139]; } if (bytes.isNotEmpty) { layerName_140 = bytes[140]; } if (bytes.isNotEmpty) { layerName_141 = bytes[141]; } if (bytes.isNotEmpty) { layerName_142 = bytes[142]; } if (bytes.isNotEmpty) { layerName_143 = bytes[143]; } if (bytes.isNotEmpty) { layerName_144 = bytes[144]; } if (bytes.isNotEmpty) { layerName_145 = bytes[145]; } if (bytes.isNotEmpty) { layerName_146 = bytes[146]; } if (bytes.isNotEmpty) { layerName_147 = bytes[147]; } if (bytes.isNotEmpty) { layerName_148 = bytes[148]; } if (bytes.isNotEmpty) { layerName_149 = bytes[149]; } if (bytes.isNotEmpty) { layerName_150 = bytes[150]; } if (bytes.isNotEmpty) { layerName_151 = bytes[151]; } if (bytes.isNotEmpty) { layerName_152 = bytes[152]; } if (bytes.isNotEmpty) { layerName_153 = bytes[153]; } if (bytes.isNotEmpty) { layerName_154 = bytes[154]; } if (bytes.isNotEmpty) { layerName_155 = bytes[155]; } if (bytes.isNotEmpty) { layerName_156 = bytes[156]; } if (bytes.isNotEmpty) { layerName_157 = bytes[157]; } if (bytes.isNotEmpty) { layerName_158 = bytes[158]; } if (bytes.isNotEmpty) { layerName_159 = bytes[159]; } if (bytes.isNotEmpty) { layerName_160 = bytes[160]; } if (bytes.isNotEmpty) { layerName_161 = bytes[161]; } if (bytes.isNotEmpty) { layerName_162 = bytes[162]; } if (bytes.isNotEmpty) { layerName_163 = bytes[163]; } if (bytes.isNotEmpty) { layerName_164 = bytes[164]; } if (bytes.isNotEmpty) { layerName_165 = bytes[165]; } if (bytes.isNotEmpty) { layerName_166 = bytes[166]; } if (bytes.isNotEmpty) { layerName_167 = bytes[167]; } if (bytes.isNotEmpty) { layerName_168 = bytes[168]; } if (bytes.isNotEmpty) { layerName_169 = bytes[169]; } if (bytes.isNotEmpty) { layerName_170 = bytes[170]; } if (bytes.isNotEmpty) { layerName_171 = bytes[171]; } if (bytes.isNotEmpty) { layerName_172 = bytes[172]; } if (bytes.isNotEmpty) { layerName_173 = bytes[173]; } if (bytes.isNotEmpty) { layerName_174 = bytes[174]; } if (bytes.isNotEmpty) { layerName_175 = bytes[175]; } if (bytes.isNotEmpty) { layerName_176 = bytes[176]; } if (bytes.isNotEmpty) { layerName_177 = bytes[177]; } if (bytes.isNotEmpty) { layerName_178 = bytes[178]; } if (bytes.isNotEmpty) { layerName_179 = bytes[179]; } if (bytes.isNotEmpty) { layerName_180 = bytes[180]; } if (bytes.isNotEmpty) { layerName_181 = bytes[181]; } if (bytes.isNotEmpty) { layerName_182 = bytes[182]; } if (bytes.isNotEmpty) { layerName_183 = bytes[183]; } if (bytes.isNotEmpty) { layerName_184 = bytes[184]; } if (bytes.isNotEmpty) { layerName_185 = bytes[185]; } if (bytes.isNotEmpty) { layerName_186 = bytes[186]; } if (bytes.isNotEmpty) { layerName_187 = bytes[187]; } if (bytes.isNotEmpty) { layerName_188 = bytes[188]; } if (bytes.isNotEmpty) { layerName_189 = bytes[189]; } if (bytes.isNotEmpty) { layerName_190 = bytes[190]; } if (bytes.isNotEmpty) { layerName_191 = bytes[191]; } if (bytes.isNotEmpty) { layerName_192 = bytes[192]; } if (bytes.isNotEmpty) { layerName_193 = bytes[193]; } if (bytes.isNotEmpty) { layerName_194 = bytes[194]; } if (bytes.isNotEmpty) { layerName_195 = bytes[195]; } if (bytes.isNotEmpty) { layerName_196 = bytes[196]; } if (bytes.isNotEmpty) { layerName_197 = bytes[197]; } if (bytes.isNotEmpty) { layerName_198 = bytes[198]; } if (bytes.isNotEmpty) { layerName_199 = bytes[199]; } if (bytes.isNotEmpty) { layerName_200 = bytes[200]; } if (bytes.isNotEmpty) { layerName_201 = bytes[201]; } if (bytes.isNotEmpty) { layerName_202 = bytes[202]; } if (bytes.isNotEmpty) { layerName_203 = bytes[203]; } if (bytes.isNotEmpty) { layerName_204 = bytes[204]; } if (bytes.isNotEmpty) { layerName_205 = bytes[205]; } if (bytes.isNotEmpty) { layerName_206 = bytes[206]; } if (bytes.isNotEmpty) { layerName_207 = bytes[207]; } if (bytes.isNotEmpty) { layerName_208 = bytes[208]; } if (bytes.isNotEmpty) { layerName_209 = bytes[209]; } if (bytes.isNotEmpty) { layerName_210 = bytes[210]; } if (bytes.isNotEmpty) { layerName_211 = bytes[211]; } if (bytes.isNotEmpty) { layerName_212 = bytes[212]; } if (bytes.isNotEmpty) { layerName_213 = bytes[213]; } if (bytes.isNotEmpty) { layerName_214 = bytes[214]; } if (bytes.isNotEmpty) { layerName_215 = bytes[215]; } if (bytes.isNotEmpty) { layerName_216 = bytes[216]; } if (bytes.isNotEmpty) { layerName_217 = bytes[217]; } if (bytes.isNotEmpty) { layerName_218 = bytes[218]; } if (bytes.isNotEmpty) { layerName_219 = bytes[219]; } if (bytes.isNotEmpty) { layerName_220 = bytes[220]; } if (bytes.isNotEmpty) { layerName_221 = bytes[221]; } if (bytes.isNotEmpty) { layerName_222 = bytes[222]; } if (bytes.isNotEmpty) { layerName_223 = bytes[223]; } if (bytes.isNotEmpty) { layerName_224 = bytes[224]; } if (bytes.isNotEmpty) { layerName_225 = bytes[225]; } if (bytes.isNotEmpty) { layerName_226 = bytes[226]; } if (bytes.isNotEmpty) { layerName_227 = bytes[227]; } if (bytes.isNotEmpty) { layerName_228 = bytes[228]; } if (bytes.isNotEmpty) { layerName_229 = bytes[229]; } if (bytes.isNotEmpty) { layerName_230 = bytes[230]; } if (bytes.isNotEmpty) { layerName_231 = bytes[231]; } if (bytes.isNotEmpty) { layerName_232 = bytes[232]; } if (bytes.isNotEmpty) { layerName_233 = bytes[233]; } if (bytes.isNotEmpty) { layerName_234 = bytes[234]; } if (bytes.isNotEmpty) { layerName_235 = bytes[235]; } if (bytes.isNotEmpty) { layerName_236 = bytes[236]; } if (bytes.isNotEmpty) { layerName_237 = bytes[237]; } if (bytes.isNotEmpty) { layerName_238 = bytes[238]; } if (bytes.isNotEmpty) { layerName_239 = bytes[239]; } if (bytes.isNotEmpty) { layerName_240 = bytes[240]; } if (bytes.isNotEmpty) { layerName_241 = bytes[241]; } if (bytes.isNotEmpty) { layerName_242 = bytes[242]; } if (bytes.isNotEmpty) { layerName_243 = bytes[243]; } if (bytes.isNotEmpty) { layerName_244 = bytes[244]; } if (bytes.isNotEmpty) { layerName_245 = bytes[245]; } if (bytes.isNotEmpty) { layerName_246 = bytes[246]; } if (bytes.isNotEmpty) { layerName_247 = bytes[247]; } if (bytes.isNotEmpty) { layerName_248 = bytes[248]; } if (bytes.isNotEmpty) { layerName_249 = bytes[249]; } if (bytes.isNotEmpty) { layerName_250 = bytes[250]; } if (bytes.isNotEmpty) { layerName_251 = bytes[251]; } if (bytes.isNotEmpty) { layerName_252 = bytes[252]; } if (bytes.isNotEmpty) { layerName_253 = bytes[253]; } if (bytes.isNotEmpty) { layerName_254 = bytes[254]; } if (bytes.isNotEmpty) { layerName_255 = bytes[255]; }
  }
  @Uint32() int specVersion;
  @Uint32() int implementationVersion;
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
}

class VkApplicationInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pApplicationName;
  @Uint32() int applicationVersion;
  Pointer pEngineName;
  @Uint32() int engineVersion;
  @Uint32() int apiVersion;
}

class VkAllocationCallbacks extends Struct {
  Pointer pUserData;
  Pointer pfnAllocation;
  Pointer pfnReallocation;
  Pointer pfnFree;
  Pointer pfnInternalAllocation;
  Pointer pfnInternalFree;
}

class VkDeviceQueueCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int queueFamilyIndex;
  @Uint32() int queueCount;
  Pointer pQueuePriorities;
}

class VkDeviceCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int queueCreateInfoCount;
  Pointer<VkDeviceQueueCreateInfo> pQueueCreateInfos;
  @Uint32() int enabledLayerCount;
  Pointer ppEnabledLayerNames;
  @Uint32() int enabledExtensionCount;
  Pointer ppEnabledExtensionNames;
  Pointer<VkPhysicalDeviceFeatures> pEnabledFeatures;
}

class VkInstanceCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkApplicationInfo> pApplicationInfo;
  @Uint32() int enabledLayerCount;
  Pointer ppEnabledLayerNames;
  @Uint32() int enabledExtensionCount;
  Pointer ppEnabledExtensionNames;
}

class VkQueueFamilyProperties extends Struct {
  @Uint32() int queueFlags;
  @Uint32() int queueCount;
  @Uint32() int timestampValidBits;
  @Uint32() int minImageTransferGranularity_width;
  @Uint32() int minImageTransferGranularity_height;
  @Uint32() int minImageTransferGranularity_depth;
}

class VkPhysicalDeviceMemoryProperties extends Struct {
  @Uint32() int memoryTypeCount;
  Pointer memoryTypes_0; Pointer memoryTypes_1; Pointer memoryTypes_2; Pointer memoryTypes_3; Pointer memoryTypes_4; Pointer memoryTypes_5; Pointer memoryTypes_6; Pointer memoryTypes_7; Pointer memoryTypes_8; Pointer memoryTypes_9; Pointer memoryTypes_10; Pointer memoryTypes_11; Pointer memoryTypes_12; Pointer memoryTypes_13; Pointer memoryTypes_14; Pointer memoryTypes_15; Pointer memoryTypes_16; Pointer memoryTypes_17; Pointer memoryTypes_18; Pointer memoryTypes_19; Pointer memoryTypes_20; Pointer memoryTypes_21; Pointer memoryTypes_22; Pointer memoryTypes_23; Pointer memoryTypes_24; Pointer memoryTypes_25; Pointer memoryTypes_26; Pointer memoryTypes_27; Pointer memoryTypes_28; Pointer memoryTypes_29; Pointer memoryTypes_30; Pointer memoryTypes_31;
  @Uint32() int memoryHeapCount;
  Pointer memoryHeaps_0; Pointer memoryHeaps_1; Pointer memoryHeaps_2; Pointer memoryHeaps_3; Pointer memoryHeaps_4; Pointer memoryHeaps_5; Pointer memoryHeaps_6; Pointer memoryHeaps_7; Pointer memoryHeaps_8; Pointer memoryHeaps_9; Pointer memoryHeaps_10; Pointer memoryHeaps_11; Pointer memoryHeaps_12; Pointer memoryHeaps_13; Pointer memoryHeaps_14; Pointer memoryHeaps_15;
}

class VkMemoryAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int allocationSize;
  @Uint32() int memoryTypeIndex;
}

class VkMemoryRequirements extends Struct {
  @Uint64() int size;
  @Uint64() int alignment;
  @Uint32() int memoryTypeBits;
}

class VkSparseImageFormatProperties extends Struct {
  @Uint32() int aspectMask;
  @Uint32() int imageGranularity_width;
  @Uint32() int imageGranularity_height;
  @Uint32() int imageGranularity_depth;
  @Uint32() int flags;
}

class VkSparseImageMemoryRequirements extends Struct {
  @Uint32() int formatProperties_aspectMask;
  @Uint32() int formatProperties_imageGranularity_width;
  @Uint32() int formatProperties_imageGranularity_height;
  @Uint32() int formatProperties_imageGranularity_depth;
  @Uint32() int formatProperties_flags;
  @Uint32() int imageMipTailFirstLod;
  @Uint64() int imageMipTailSize;
  @Uint64() int imageMipTailOffset;
  @Uint64() int imageMipTailStride;
}

class VkMemoryType extends Struct {
  @Uint32() int propertyFlags;
  @Uint32() int heapIndex;
}

class VkMemoryHeap extends Struct {
  @Uint64() int size;
  @Uint32() int flags;
}

class VkMappedMemoryRange extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int offset;
  @Uint64() int size;
}

class VkFormatProperties extends Struct {
  @Uint32() int linearTilingFeatures;
  @Uint32() int optimalTilingFeatures;
  @Uint32() int bufferFeatures;
}

class VkImageFormatProperties extends Struct {
  @Uint32() int maxExtent_width;
  @Uint32() int maxExtent_height;
  @Uint32() int maxExtent_depth;
  @Uint32() int maxMipLevels;
  @Uint32() int maxArrayLayers;
  @Uint32() int sampleCounts;
  @Uint64() int maxResourceSize;
}

class VkDescriptorBufferInfo extends Struct {
  Pointer<VkBuffer> buffer;
  @Uint64() int offset;
  @Uint64() int range;
}

class VkDescriptorImageInfo extends Struct {
  Pointer<VkSampler> sampler;
  Pointer<VkImageView> imageView;
  @Int32() int imageLayout;
}

class VkWriteDescriptorSet extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDescriptorSet> dstSet;
  @Uint32() int dstBinding;
  @Uint32() int dstArrayElement;
  @Uint32() int descriptorCount;
  @Int32() int descriptorType;
  Pointer<VkDescriptorImageInfo> pImageInfo;
  Pointer<VkDescriptorBufferInfo> pBufferInfo;
  Pointer<Pointer<VkBufferView>> pTexelBufferView;
}

class VkCopyDescriptorSet extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDescriptorSet> srcSet;
  @Uint32() int srcBinding;
  @Uint32() int srcArrayElement;
  Pointer<VkDescriptorSet> dstSet;
  @Uint32() int dstBinding;
  @Uint32() int dstArrayElement;
  @Uint32() int descriptorCount;
}

class VkBufferCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint64() int size;
  @Uint32() int usage;
  @Int32() int sharingMode;
  @Uint32() int queueFamilyIndexCount;
  Pointer pQueueFamilyIndices;
}

class VkBufferViewCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkBuffer> buffer;
  @Int32() int format;
  @Uint64() int offset;
  @Uint64() int range;
}

class VkImageSubresource extends Struct {
  @Uint32() int aspectMask;
  @Uint32() int mipLevel;
  @Uint32() int arrayLayer;
}

class VkImageSubresourceLayers extends Struct {
  @Uint32() int aspectMask;
  @Uint32() int mipLevel;
  @Uint32() int baseArrayLayer;
  @Uint32() int layerCount;
}

class VkImageSubresourceRange extends Struct {
  @Uint32() int aspectMask;
  @Uint32() int baseMipLevel;
  @Uint32() int levelCount;
  @Uint32() int baseArrayLayer;
  @Uint32() int layerCount;
}

class VkMemoryBarrier extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int srcAccessMask;
  @Uint32() int dstAccessMask;
}

class VkBufferMemoryBarrier extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int srcAccessMask;
  @Uint32() int dstAccessMask;
  @Uint32() int srcQueueFamilyIndex;
  @Uint32() int dstQueueFamilyIndex;
  Pointer<VkBuffer> buffer;
  @Uint64() int offset;
  @Uint64() int size;
}

class VkImageMemoryBarrier extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int srcAccessMask;
  @Uint32() int dstAccessMask;
  @Int32() int oldLayout;
  @Int32() int newLayout;
  @Uint32() int srcQueueFamilyIndex;
  @Uint32() int dstQueueFamilyIndex;
  Pointer<VkImage> image;
  @Uint32() int subresourceRange_aspectMask;
  @Uint32() int subresourceRange_baseMipLevel;
  @Uint32() int subresourceRange_levelCount;
  @Uint32() int subresourceRange_baseArrayLayer;
  @Uint32() int subresourceRange_layerCount;
}

class VkImageCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int imageType;
  @Int32() int format;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
  @Uint32() int extent_depth;
  @Uint32() int mipLevels;
  @Uint32() int arrayLayers;
  @Int32() int samples;
  @Int32() int tiling;
  @Uint32() int usage;
  @Int32() int sharingMode;
  @Uint32() int queueFamilyIndexCount;
  Pointer pQueueFamilyIndices;
  @Int32() int initialLayout;
}

class VkSubresourceLayout extends Struct {
  @Uint64() int offset;
  @Uint64() int size;
  @Uint64() int rowPitch;
  @Uint64() int arrayPitch;
  @Uint64() int depthPitch;
}

class VkImageViewCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkImage> image;
  @Int32() int viewType;
  @Int32() int format;
  @Int32() int components_r;
  @Int32() int components_g;
  @Int32() int components_b;
  @Int32() int components_a;
  @Uint32() int subresourceRange_aspectMask;
  @Uint32() int subresourceRange_baseMipLevel;
  @Uint32() int subresourceRange_levelCount;
  @Uint32() int subresourceRange_baseArrayLayer;
  @Uint32() int subresourceRange_layerCount;
}

class VkBufferCopy extends Struct {
  @Uint64() int srcOffset;
  @Uint64() int dstOffset;
  @Uint64() int size;
}

class VkSparseMemoryBind extends Struct {
  @Uint64() int resourceOffset;
  @Uint64() int size;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int memoryOffset;
  @Uint32() int flags;
}

class VkSparseImageMemoryBind extends Struct {
  @Uint32() int subresource_aspectMask;
  @Uint32() int subresource_mipLevel;
  @Uint32() int subresource_arrayLayer;
  @Int32() int offset_x;
  @Int32() int offset_y;
  @Int32() int offset_z;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
  @Uint32() int extent_depth;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int memoryOffset;
  @Uint32() int flags;
}

class VkSparseBufferMemoryBindInfo extends Struct {
  Pointer<VkBuffer> buffer;
  @Uint32() int bindCount;
  Pointer<VkSparseMemoryBind> pBinds;
}

class VkSparseImageOpaqueMemoryBindInfo extends Struct {
  Pointer<VkImage> image;
  @Uint32() int bindCount;
  Pointer<VkSparseMemoryBind> pBinds;
}

class VkSparseImageMemoryBindInfo extends Struct {
  Pointer<VkImage> image;
  @Uint32() int bindCount;
  Pointer<VkSparseImageMemoryBind> pBinds;
}

class VkBindSparseInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreCount;
  Pointer<Pointer<VkSemaphore>> pWaitSemaphores;
  @Uint32() int bufferBindCount;
  Pointer<VkSparseBufferMemoryBindInfo> pBufferBinds;
  @Uint32() int imageOpaqueBindCount;
  Pointer<VkSparseImageOpaqueMemoryBindInfo> pImageOpaqueBinds;
  @Uint32() int imageBindCount;
  Pointer<VkSparseImageMemoryBindInfo> pImageBinds;
  @Uint32() int signalSemaphoreCount;
  Pointer<Pointer<VkSemaphore>> pSignalSemaphores;
}

class VkImageCopy extends Struct {
  @Uint32() int srcSubresource_aspectMask;
  @Uint32() int srcSubresource_mipLevel;
  @Uint32() int srcSubresource_baseArrayLayer;
  @Uint32() int srcSubresource_layerCount;
  @Int32() int srcOffset_x;
  @Int32() int srcOffset_y;
  @Int32() int srcOffset_z;
  @Uint32() int dstSubresource_aspectMask;
  @Uint32() int dstSubresource_mipLevel;
  @Uint32() int dstSubresource_baseArrayLayer;
  @Uint32() int dstSubresource_layerCount;
  @Int32() int dstOffset_x;
  @Int32() int dstOffset_y;
  @Int32() int dstOffset_z;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
  @Uint32() int extent_depth;
}

class VkImageBlit extends Struct {
  @Uint32() int srcSubresource_aspectMask;
  @Uint32() int srcSubresource_mipLevel;
  @Uint32() int srcSubresource_baseArrayLayer;
  @Uint32() int srcSubresource_layerCount;
  Pointer srcOffsets_0; Pointer srcOffsets_1;
  @Uint32() int dstSubresource_aspectMask;
  @Uint32() int dstSubresource_mipLevel;
  @Uint32() int dstSubresource_baseArrayLayer;
  @Uint32() int dstSubresource_layerCount;
  Pointer dstOffsets_0; Pointer dstOffsets_1;
}

class VkBufferImageCopy extends Struct {
  @Uint64() int bufferOffset;
  @Uint32() int bufferRowLength;
  @Uint32() int bufferImageHeight;
  @Uint32() int imageSubresource_aspectMask;
  @Uint32() int imageSubresource_mipLevel;
  @Uint32() int imageSubresource_baseArrayLayer;
  @Uint32() int imageSubresource_layerCount;
  @Int32() int imageOffset_x;
  @Int32() int imageOffset_y;
  @Int32() int imageOffset_z;
  @Uint32() int imageExtent_width;
  @Uint32() int imageExtent_height;
  @Uint32() int imageExtent_depth;
}

class VkImageResolve extends Struct {
  @Uint32() int srcSubresource_aspectMask;
  @Uint32() int srcSubresource_mipLevel;
  @Uint32() int srcSubresource_baseArrayLayer;
  @Uint32() int srcSubresource_layerCount;
  @Int32() int srcOffset_x;
  @Int32() int srcOffset_y;
  @Int32() int srcOffset_z;
  @Uint32() int dstSubresource_aspectMask;
  @Uint32() int dstSubresource_mipLevel;
  @Uint32() int dstSubresource_baseArrayLayer;
  @Uint32() int dstSubresource_layerCount;
  @Int32() int dstOffset_x;
  @Int32() int dstOffset_y;
  @Int32() int dstOffset_z;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
  @Uint32() int extent_depth;
}

class VkShaderModuleCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint64() int codeSize;
  Pointer pCode;
}

class VkDescriptorSetLayoutBinding extends Struct {
  @Uint32() int binding;
  @Int32() int descriptorType;
  @Uint32() int descriptorCount;
  @Uint32() int stageFlags;
  Pointer<Pointer<VkSampler>> pImmutableSamplers;
}

class VkDescriptorSetLayoutCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int bindingCount;
  Pointer<VkDescriptorSetLayoutBinding> pBindings;
}

class VkDescriptorPoolSize extends Struct {
  @Int32() int type;
  @Uint32() int descriptorCount;
}

class VkDescriptorPoolCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int maxSets;
  @Uint32() int poolSizeCount;
  Pointer<VkDescriptorPoolSize> pPoolSizes;
}

class VkDescriptorSetAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDescriptorPool> descriptorPool;
  @Uint32() int descriptorSetCount;
  Pointer<Pointer<VkDescriptorSetLayout>> pSetLayouts;
}

class VkSpecializationMapEntry extends Struct {
  @Uint32() int constantID;
  @Uint32() int offset;
  @Uint64() int size;
}

class VkSpecializationInfo extends Struct {
  @Uint32() int mapEntryCount;
  Pointer<VkSpecializationMapEntry> pMapEntries;
  @Uint64() int dataSize;
  Pointer pData;
}

class VkPipelineShaderStageCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int stage;
  Pointer<VkShaderModule> module;
  Pointer pName;
  Pointer<VkSpecializationInfo> pSpecializationInfo;
}

class VkComputePipelineCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int stage_sType;
  Pointer stage_pNext;
  @Uint32() int stage_flags;
  @Int32() int stage_stage;
  Pointer<VkShaderModule> stage_module;
  Pointer stage_pName;
  Pointer<VkSpecializationInfo> stage_pSpecializationInfo;
  Pointer<VkPipelineLayout> layout;
  Pointer<VkPipeline> basePipelineHandle;
  @Int32() int basePipelineIndex;
}

class VkVertexInputBindingDescription extends Struct {
  @Uint32() int binding;
  @Uint32() int stride;
  @Int32() int inputRate;
}

class VkVertexInputAttributeDescription extends Struct {
  @Uint32() int location;
  @Uint32() int binding;
  @Int32() int format;
  @Uint32() int offset;
}

class VkPipelineVertexInputStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int vertexBindingDescriptionCount;
  Pointer<VkVertexInputBindingDescription> pVertexBindingDescriptions;
  @Uint32() int vertexAttributeDescriptionCount;
  Pointer<VkVertexInputAttributeDescription> pVertexAttributeDescriptions;
}

class VkPipelineInputAssemblyStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int topology;
  @Uint32() int primitiveRestartEnable;
}

class VkPipelineTessellationStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int patchControlPoints;
}

class VkPipelineViewportStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int viewportCount;
  Pointer<VkViewport> pViewports;
  @Uint32() int scissorCount;
  Pointer<VkRect2D> pScissors;
}

class VkPipelineRasterizationStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int depthClampEnable;
  @Uint32() int rasterizerDiscardEnable;
  @Int32() int polygonMode;
  @Uint32() int cullMode;
  @Int32() int frontFace;
  @Uint32() int depthBiasEnable;
  @Float() double depthBiasConstantFactor;
  @Float() double depthBiasClamp;
  @Float() double depthBiasSlopeFactor;
  @Float() double lineWidth;
}

class VkPipelineMultisampleStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int rasterizationSamples;
  @Uint32() int sampleShadingEnable;
  @Float() double minSampleShading;
  Pointer pSampleMask;
  @Uint32() int alphaToCoverageEnable;
  @Uint32() int alphaToOneEnable;
}

class VkPipelineColorBlendAttachmentState extends Struct {
  @Uint32() int blendEnable;
  @Int32() int srcColorBlendFactor;
  @Int32() int dstColorBlendFactor;
  @Int32() int colorBlendOp;
  @Int32() int srcAlphaBlendFactor;
  @Int32() int dstAlphaBlendFactor;
  @Int32() int alphaBlendOp;
  @Uint32() int colorWriteMask;
}

class VkPipelineColorBlendStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int logicOpEnable;
  @Int32() int logicOp;
  @Uint32() int attachmentCount;
  Pointer<VkPipelineColorBlendAttachmentState> pAttachments;
  @Float() double blendConstants_0; @Float() double blendConstants_1; @Float() double blendConstants_2; @Float() double blendConstants_3;
}

class VkPipelineDynamicStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int dynamicStateCount;
  @Int32() int pDynamicStates;
}

class VkStencilOpState extends Struct {
  @Int32() int failOp;
  @Int32() int passOp;
  @Int32() int depthFailOp;
  @Int32() int compareOp;
  @Uint32() int compareMask;
  @Uint32() int writeMask;
  @Uint32() int reference;
}

class VkPipelineDepthStencilStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int depthTestEnable;
  @Uint32() int depthWriteEnable;
  @Int32() int depthCompareOp;
  @Uint32() int depthBoundsTestEnable;
  @Uint32() int stencilTestEnable;
  @Int32() int front_failOp;
  @Int32() int front_passOp;
  @Int32() int front_depthFailOp;
  @Int32() int front_compareOp;
  @Uint32() int front_compareMask;
  @Uint32() int front_writeMask;
  @Uint32() int front_reference;
  @Int32() int back_failOp;
  @Int32() int back_passOp;
  @Int32() int back_depthFailOp;
  @Int32() int back_compareOp;
  @Uint32() int back_compareMask;
  @Uint32() int back_writeMask;
  @Uint32() int back_reference;
  @Float() double minDepthBounds;
  @Float() double maxDepthBounds;
}

class VkGraphicsPipelineCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int stageCount;
  Pointer<VkPipelineShaderStageCreateInfo> pStages;
  Pointer<VkPipelineVertexInputStateCreateInfo> pVertexInputState;
  Pointer<VkPipelineInputAssemblyStateCreateInfo> pInputAssemblyState;
  Pointer<VkPipelineTessellationStateCreateInfo> pTessellationState;
  Pointer<VkPipelineViewportStateCreateInfo> pViewportState;
  Pointer<VkPipelineRasterizationStateCreateInfo> pRasterizationState;
  Pointer<VkPipelineMultisampleStateCreateInfo> pMultisampleState;
  Pointer<VkPipelineDepthStencilStateCreateInfo> pDepthStencilState;
  Pointer<VkPipelineColorBlendStateCreateInfo> pColorBlendState;
  Pointer<VkPipelineDynamicStateCreateInfo> pDynamicState;
  Pointer<VkPipelineLayout> layout;
  Pointer<VkRenderPass> renderPass;
  @Uint32() int subpass;
  Pointer<VkPipeline> basePipelineHandle;
  @Int32() int basePipelineIndex;
}

class VkPipelineCacheCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint64() int initialDataSize;
  Pointer pInitialData;
}

class VkPushConstantRange extends Struct {
  @Uint32() int stageFlags;
  @Uint32() int offset;
  @Uint32() int size;
}

class VkPipelineLayoutCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int setLayoutCount;
  Pointer<Pointer<VkDescriptorSetLayout>> pSetLayouts;
  @Uint32() int pushConstantRangeCount;
  Pointer<VkPushConstantRange> pPushConstantRanges;
}

class VkSamplerCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int magFilter;
  @Int32() int minFilter;
  @Int32() int mipmapMode;
  @Int32() int addressModeU;
  @Int32() int addressModeV;
  @Int32() int addressModeW;
  @Float() double mipLodBias;
  @Uint32() int anisotropyEnable;
  @Float() double maxAnisotropy;
  @Uint32() int compareEnable;
  @Int32() int compareOp;
  @Float() double minLod;
  @Float() double maxLod;
  @Int32() int borderColor;
  @Uint32() int unnormalizedCoordinates;
}

class VkCommandPoolCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int queueFamilyIndex;
}

class VkCommandBufferAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkCommandPool> commandPool;
  @Int32() int level;
  @Uint32() int commandBufferCount;
}

class VkCommandBufferInheritanceInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkRenderPass> renderPass;
  @Uint32() int subpass;
  Pointer<VkFramebuffer> framebuffer;
  @Uint32() int occlusionQueryEnable;
  @Uint32() int queryFlags;
  @Uint32() int pipelineStatistics;
}

class VkCommandBufferBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkCommandBufferInheritanceInfo> pInheritanceInfo;
}

class VkRenderPassBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkRenderPass> renderPass;
  Pointer<VkFramebuffer> framebuffer;
  @Int32() int renderArea_offset_x;
  @Int32() int renderArea_offset_y;
  @Uint32() int renderArea_extent_width;
  @Uint32() int renderArea_extent_height;
  @Uint32() int clearValueCount;
  Pointer<VkClearValue> pClearValues;
}

class VkClearColorValue extends Struct {
}

class VkClearColorValueFloat32 extends Struct {
  @Float() double float32_0; @Float() double float32_1; @Float() double float32_2; @Float() double float32_3;
}

class VkClearColorValueInt32 extends Struct {
  @Int32() int int32_0; @Int32() int int32_1; @Int32() int int32_2; @Int32() int int32_3;
}

class VkClearColorValueUint32 extends Struct {
  @Uint32() int uint32_0; @Uint32() int uint32_1; @Uint32() int uint32_2; @Uint32() int uint32_3;
}

class VkClearDepthStencilValue extends Struct {
  @Float() double depth;
  @Uint32() int stencil;
}

class VkClearValue extends Struct {
}

class VkClearValueColor extends Struct {
}

class VkClearValueDepthStencil extends Struct {
  @Float() double depthStencil_depth;
  @Uint32() int depthStencil_stencil;
}

class VkClearAttachment extends Struct {
  @Uint32() int aspectMask;
  @Uint32() int colorAttachment;
}

class VkAttachmentDescription extends Struct {
  @Uint32() int flags;
  @Int32() int format;
  @Int32() int samples;
  @Int32() int loadOp;
  @Int32() int storeOp;
  @Int32() int stencilLoadOp;
  @Int32() int stencilStoreOp;
  @Int32() int initialLayout;
  @Int32() int finalLayout;
}

class VkAttachmentReference extends Struct {
  @Uint32() int attachment;
  @Int32() int layout;
}

class VkSubpassDescription extends Struct {
  @Uint32() int flags;
  @Int32() int pipelineBindPoint;
  @Uint32() int inputAttachmentCount;
  Pointer<VkAttachmentReference> pInputAttachments;
  @Uint32() int colorAttachmentCount;
  Pointer<VkAttachmentReference> pColorAttachments;
  Pointer<VkAttachmentReference> pResolveAttachments;
  Pointer<VkAttachmentReference> pDepthStencilAttachment;
  @Uint32() int preserveAttachmentCount;
  Pointer pPreserveAttachments;
}

class VkSubpassDependency extends Struct {
  @Uint32() int srcSubpass;
  @Uint32() int dstSubpass;
  @Uint32() int srcStageMask;
  @Uint32() int dstStageMask;
  @Uint32() int srcAccessMask;
  @Uint32() int dstAccessMask;
  @Uint32() int dependencyFlags;
}

class VkRenderPassCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int attachmentCount;
  Pointer<VkAttachmentDescription> pAttachments;
  @Uint32() int subpassCount;
  Pointer<VkSubpassDescription> pSubpasses;
  @Uint32() int dependencyCount;
  Pointer<VkSubpassDependency> pDependencies;
}

class VkEventCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkFenceCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkPhysicalDeviceFeatures extends Struct {
  @Uint32() int robustBufferAccess;
  @Uint32() int fullDrawIndexUint32;
  @Uint32() int imageCubeArray;
  @Uint32() int independentBlend;
  @Uint32() int geometryShader;
  @Uint32() int tessellationShader;
  @Uint32() int sampleRateShading;
  @Uint32() int dualSrcBlend;
  @Uint32() int logicOp;
  @Uint32() int multiDrawIndirect;
  @Uint32() int drawIndirectFirstInstance;
  @Uint32() int depthClamp;
  @Uint32() int depthBiasClamp;
  @Uint32() int fillModeNonSolid;
  @Uint32() int depthBounds;
  @Uint32() int wideLines;
  @Uint32() int largePoints;
  @Uint32() int alphaToOne;
  @Uint32() int multiViewport;
  @Uint32() int samplerAnisotropy;
  @Uint32() int textureCompressionETC2;
  @Uint32() int textureCompressionASTC_LDR;
  @Uint32() int textureCompressionBC;
  @Uint32() int occlusionQueryPrecise;
  @Uint32() int pipelineStatisticsQuery;
  @Uint32() int vertexPipelineStoresAndAtomics;
  @Uint32() int fragmentStoresAndAtomics;
  @Uint32() int shaderTessellationAndGeometryPointSize;
  @Uint32() int shaderImageGatherExtended;
  @Uint32() int shaderStorageImageExtendedFormats;
  @Uint32() int shaderStorageImageMultisample;
  @Uint32() int shaderStorageImageReadWithoutFormat;
  @Uint32() int shaderStorageImageWriteWithoutFormat;
  @Uint32() int shaderUniformBufferArrayDynamicIndexing;
  @Uint32() int shaderSampledImageArrayDynamicIndexing;
  @Uint32() int shaderStorageBufferArrayDynamicIndexing;
  @Uint32() int shaderStorageImageArrayDynamicIndexing;
  @Uint32() int shaderClipDistance;
  @Uint32() int shaderCullDistance;
  @Uint32() int shaderFloat64;
  @Uint32() int shaderInt64;
  @Uint32() int shaderInt16;
  @Uint32() int shaderResourceResidency;
  @Uint32() int shaderResourceMinLod;
  @Uint32() int sparseBinding;
  @Uint32() int sparseResidencyBuffer;
  @Uint32() int sparseResidencyImage2D;
  @Uint32() int sparseResidencyImage3D;
  @Uint32() int sparseResidency2Samples;
  @Uint32() int sparseResidency4Samples;
  @Uint32() int sparseResidency8Samples;
  @Uint32() int sparseResidency16Samples;
  @Uint32() int sparseResidencyAliased;
  @Uint32() int variableMultisampleRate;
  @Uint32() int inheritedQueries;
}

class VkPhysicalDeviceSparseProperties extends Struct {
  @Uint32() int residencyStandard2DBlockShape;
  @Uint32() int residencyStandard2DMultisampleBlockShape;
  @Uint32() int residencyStandard3DBlockShape;
  @Uint32() int residencyAlignedMipSize;
  @Uint32() int residencyNonResidentStrict;
}

class VkPhysicalDeviceLimits extends Struct {
  @Uint32() int maxImageDimension1D;
  @Uint32() int maxImageDimension2D;
  @Uint32() int maxImageDimension3D;
  @Uint32() int maxImageDimensionCube;
  @Uint32() int maxImageArrayLayers;
  @Uint32() int maxTexelBufferElements;
  @Uint32() int maxUniformBufferRange;
  @Uint32() int maxStorageBufferRange;
  @Uint32() int maxPushConstantsSize;
  @Uint32() int maxMemoryAllocationCount;
  @Uint32() int maxSamplerAllocationCount;
  @Uint64() int bufferImageGranularity;
  @Uint64() int sparseAddressSpaceSize;
  @Uint32() int maxBoundDescriptorSets;
  @Uint32() int maxPerStageDescriptorSamplers;
  @Uint32() int maxPerStageDescriptorUniformBuffers;
  @Uint32() int maxPerStageDescriptorStorageBuffers;
  @Uint32() int maxPerStageDescriptorSampledImages;
  @Uint32() int maxPerStageDescriptorStorageImages;
  @Uint32() int maxPerStageDescriptorInputAttachments;
  @Uint32() int maxPerStageResources;
  @Uint32() int maxDescriptorSetSamplers;
  @Uint32() int maxDescriptorSetUniformBuffers;
  @Uint32() int maxDescriptorSetUniformBuffersDynamic;
  @Uint32() int maxDescriptorSetStorageBuffers;
  @Uint32() int maxDescriptorSetStorageBuffersDynamic;
  @Uint32() int maxDescriptorSetSampledImages;
  @Uint32() int maxDescriptorSetStorageImages;
  @Uint32() int maxDescriptorSetInputAttachments;
  @Uint32() int maxVertexInputAttributes;
  @Uint32() int maxVertexInputBindings;
  @Uint32() int maxVertexInputAttributeOffset;
  @Uint32() int maxVertexInputBindingStride;
  @Uint32() int maxVertexOutputComponents;
  @Uint32() int maxTessellationGenerationLevel;
  @Uint32() int maxTessellationPatchSize;
  @Uint32() int maxTessellationControlPerVertexInputComponents;
  @Uint32() int maxTessellationControlPerVertexOutputComponents;
  @Uint32() int maxTessellationControlPerPatchOutputComponents;
  @Uint32() int maxTessellationControlTotalOutputComponents;
  @Uint32() int maxTessellationEvaluationInputComponents;
  @Uint32() int maxTessellationEvaluationOutputComponents;
  @Uint32() int maxGeometryShaderInvocations;
  @Uint32() int maxGeometryInputComponents;
  @Uint32() int maxGeometryOutputComponents;
  @Uint32() int maxGeometryOutputVertices;
  @Uint32() int maxGeometryTotalOutputComponents;
  @Uint32() int maxFragmentInputComponents;
  @Uint32() int maxFragmentOutputAttachments;
  @Uint32() int maxFragmentDualSrcAttachments;
  @Uint32() int maxFragmentCombinedOutputResources;
  @Uint32() int maxComputeSharedMemorySize;
  @Uint32() int maxComputeWorkGroupCount_0; @Uint32() int maxComputeWorkGroupCount_1; @Uint32() int maxComputeWorkGroupCount_2;
  @Uint32() int maxComputeWorkGroupInvocations;
  @Uint32() int maxComputeWorkGroupSize_0; @Uint32() int maxComputeWorkGroupSize_1; @Uint32() int maxComputeWorkGroupSize_2;
  @Uint32() int subPixelPrecisionBits;
  @Uint32() int subTexelPrecisionBits;
  @Uint32() int mipmapPrecisionBits;
  @Uint32() int maxDrawIndexedIndexValue;
  @Uint32() int maxDrawIndirectCount;
  @Float() double maxSamplerLodBias;
  @Float() double maxSamplerAnisotropy;
  @Uint32() int maxViewports;
  @Uint32() int maxViewportDimensions_0; @Uint32() int maxViewportDimensions_1;
  @Float() double viewportBoundsRange_0; @Float() double viewportBoundsRange_1;
  @Uint32() int viewportSubPixelBits;
  @Uint64() int minMemoryMapAlignment;
  @Uint64() int minTexelBufferOffsetAlignment;
  @Uint64() int minUniformBufferOffsetAlignment;
  @Uint64() int minStorageBufferOffsetAlignment;
  @Int32() int minTexelOffset;
  @Uint32() int maxTexelOffset;
  @Int32() int minTexelGatherOffset;
  @Uint32() int maxTexelGatherOffset;
  @Float() double minInterpolationOffset;
  @Float() double maxInterpolationOffset;
  @Uint32() int subPixelInterpolationOffsetBits;
  @Uint32() int maxFramebufferWidth;
  @Uint32() int maxFramebufferHeight;
  @Uint32() int maxFramebufferLayers;
  @Uint32() int framebufferColorSampleCounts;
  @Uint32() int framebufferDepthSampleCounts;
  @Uint32() int framebufferStencilSampleCounts;
  @Uint32() int framebufferNoAttachmentsSampleCounts;
  @Uint32() int maxColorAttachments;
  @Uint32() int sampledImageColorSampleCounts;
  @Uint32() int sampledImageIntegerSampleCounts;
  @Uint32() int sampledImageDepthSampleCounts;
  @Uint32() int sampledImageStencilSampleCounts;
  @Uint32() int storageImageSampleCounts;
  @Uint32() int maxSampleMaskWords;
  @Uint32() int timestampComputeAndGraphics;
  @Float() double timestampPeriod;
  @Uint32() int maxClipDistances;
  @Uint32() int maxCullDistances;
  @Uint32() int maxCombinedClipAndCullDistances;
  @Uint32() int discreteQueuePriorities;
  @Float() double pointSizeRange_0; @Float() double pointSizeRange_1;
  @Float() double lineWidthRange_0; @Float() double lineWidthRange_1;
  @Float() double pointSizeGranularity;
  @Float() double lineWidthGranularity;
  @Uint32() int strictLines;
  @Uint32() int standardSampleLocations;
  @Uint64() int optimalBufferCopyOffsetAlignment;
  @Uint64() int optimalBufferCopyRowPitchAlignment;
  @Uint64() int nonCoherentAtomSize;
}

class VkSemaphoreCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkQueryPoolCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int queryType;
  @Uint32() int queryCount;
  @Uint32() int pipelineStatistics;
}

class VkFramebufferCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkRenderPass> renderPass;
  @Uint32() int attachmentCount;
  Pointer<Pointer<VkImageView>> pAttachments;
  @Uint32() int width;
  @Uint32() int height;
  @Uint32() int layers;
}

class VkDrawIndirectCommand extends Struct {
  @Uint32() int vertexCount;
  @Uint32() int instanceCount;
  @Uint32() int firstVertex;
  @Uint32() int firstInstance;
}

class VkDrawIndexedIndirectCommand extends Struct {
  @Uint32() int indexCount;
  @Uint32() int instanceCount;
  @Uint32() int firstIndex;
  @Int32() int vertexOffset;
  @Uint32() int firstInstance;
}

class VkDispatchIndirectCommand extends Struct {
  @Uint32() int x;
  @Uint32() int y;
  @Uint32() int z;
}

class VkSubmitInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreCount;
  Pointer<Pointer<VkSemaphore>> pWaitSemaphores;
  Pointer pWaitDstStageMask;
  @Uint32() int commandBufferCount;
  Pointer<Pointer<VkCommandBuffer>> pCommandBuffers;
  @Uint32() int signalSemaphoreCount;
  Pointer<Pointer<VkSemaphore>> pSignalSemaphores;
}

class VkDisplayPropertiesKHR extends Struct {
  Pointer<VkDisplayKHR> display;
  Pointer displayName;
  @Uint32() int physicalDimensions_width;
  @Uint32() int physicalDimensions_height;
  @Uint32() int physicalResolution_width;
  @Uint32() int physicalResolution_height;
  @Uint32() int supportedTransforms;
  @Uint32() int planeReorderPossible;
  @Uint32() int persistentContent;
}

class VkDisplayPlanePropertiesKHR extends Struct {
  Pointer<VkDisplayKHR> currentDisplay;
  @Uint32() int currentStackIndex;
}

class VkDisplayModeParametersKHR extends Struct {
  @Uint32() int visibleRegion_width;
  @Uint32() int visibleRegion_height;
  @Uint32() int refreshRate;
}

class VkDisplayModePropertiesKHR extends Struct {
  Pointer<VkDisplayModeKHR> displayMode;
  @Uint32() int parameters_visibleRegion_width;
  @Uint32() int parameters_visibleRegion_height;
  @Uint32() int parameters_refreshRate;
}

class VkDisplayModeCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int parameters_visibleRegion_width;
  @Uint32() int parameters_visibleRegion_height;
  @Uint32() int parameters_refreshRate;
}

class VkDisplayPlaneCapabilitiesKHR extends Struct {
  @Uint32() int supportedAlpha;
  @Int32() int minSrcPosition_x;
  @Int32() int minSrcPosition_y;
  @Int32() int maxSrcPosition_x;
  @Int32() int maxSrcPosition_y;
  @Uint32() int minSrcExtent_width;
  @Uint32() int minSrcExtent_height;
  @Uint32() int maxSrcExtent_width;
  @Uint32() int maxSrcExtent_height;
  @Int32() int minDstPosition_x;
  @Int32() int minDstPosition_y;
  @Int32() int maxDstPosition_x;
  @Int32() int maxDstPosition_y;
  @Uint32() int minDstExtent_width;
  @Uint32() int minDstExtent_height;
  @Uint32() int maxDstExtent_width;
  @Uint32() int maxDstExtent_height;
}

class VkDisplaySurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkDisplayModeKHR> displayMode;
  @Uint32() int planeIndex;
  @Uint32() int planeStackIndex;
  @Int32() int transform;
  @Float() double globalAlpha;
  @Int32() int alphaMode;
  @Uint32() int imageExtent_width;
  @Uint32() int imageExtent_height;
}

class VkDisplayPresentInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int srcRect_offset_x;
  @Int32() int srcRect_offset_y;
  @Uint32() int srcRect_extent_width;
  @Uint32() int srcRect_extent_height;
  @Int32() int dstRect_offset_x;
  @Int32() int dstRect_offset_y;
  @Uint32() int dstRect_extent_width;
  @Uint32() int dstRect_extent_height;
  @Uint32() int persistent;
}

class VkSurfaceCapabilitiesKHR extends Struct {
  @Uint32() int minImageCount;
  @Uint32() int maxImageCount;
  @Uint32() int currentExtent_width;
  @Uint32() int currentExtent_height;
  @Uint32() int minImageExtent_width;
  @Uint32() int minImageExtent_height;
  @Uint32() int maxImageExtent_width;
  @Uint32() int maxImageExtent_height;
  @Uint32() int maxImageArrayLayers;
  @Uint32() int supportedTransforms;
  @Int32() int currentTransform;
  @Uint32() int supportedCompositeAlpha;
  @Uint32() int supportedUsageFlags;
}

class VkAndroidSurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer window;
}

class VkViSurfaceCreateInfoNN extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer window;
}

class VkWaylandSurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer display;
  Pointer surface;
}

class VkWin32SurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer hinstance;
  Pointer hwnd;
}

class VkXlibSurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer dpy;
  Pointer window;
}

class VkXcbSurfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer connection;
  Pointer window;
}

class VkImagePipeSurfaceCreateInfoFUCHSIA extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer imagePipeHandle;
}

class VkStreamDescriptorSurfaceCreateInfoGGP extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer streamDescriptor;
}

class VkSurfaceFormatKHR extends Struct {
  @Int32() int format;
  @Int32() int colorSpace;
}

class VkSwapchainCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer<VkSurfaceKHR> surface;
  @Uint32() int minImageCount;
  @Int32() int imageFormat;
  @Int32() int imageColorSpace;
  @Uint32() int imageExtent_width;
  @Uint32() int imageExtent_height;
  @Uint32() int imageArrayLayers;
  @Uint32() int imageUsage;
  @Int32() int imageSharingMode;
  @Uint32() int queueFamilyIndexCount;
  Pointer pQueueFamilyIndices;
  @Int32() int preTransform;
  @Int32() int compositeAlpha;
  @Int32() int presentMode;
  @Uint32() int clipped;
  Pointer<VkSwapchainKHR> oldSwapchain;
}

class VkPresentInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreCount;
  Pointer<Pointer<VkSemaphore>> pWaitSemaphores;
  @Uint32() int swapchainCount;
  Pointer<Pointer<VkSwapchainKHR>> pSwapchains;
  Pointer pImageIndices;
  @Int32() int pResults;
}

class VkDebugReportCallbackCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer pfnCallback;
  Pointer pUserData;
}

class VkValidationFlagsEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int disabledValidationCheckCount;
  @Int32() int pDisabledValidationChecks;
}

class VkValidationFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int enabledValidationFeatureCount;
  @Int32() int pEnabledValidationFeatures;
  @Uint32() int disabledValidationFeatureCount;
  @Int32() int pDisabledValidationFeatures;
}

class VkPipelineRasterizationStateRasterizationOrderAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int rasterizationOrder;
}

class VkDebugMarkerObjectNameInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int objectType;
  @Uint64() int object;
  Pointer pObjectName;
}

class VkDebugMarkerObjectTagInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int objectType;
  @Uint64() int object;
  @Uint64() int tagName;
  @Uint64() int tagSize;
  Pointer pTag;
}

class VkDebugMarkerMarkerInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pMarkerName;
  @Float() double color_0; @Float() double color_1; @Float() double color_2; @Float() double color_3;
}

class VkDedicatedAllocationImageCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int dedicatedAllocation;
}

class VkDedicatedAllocationBufferCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int dedicatedAllocation;
}

class VkDedicatedAllocationMemoryAllocateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImage> image;
  Pointer<VkBuffer> buffer;
}

class VkExternalImageFormatPropertiesNV extends Struct {
  @Uint32() int imageFormatProperties_maxExtent_width;
  @Uint32() int imageFormatProperties_maxExtent_height;
  @Uint32() int imageFormatProperties_maxExtent_depth;
  @Uint32() int imageFormatProperties_maxMipLevels;
  @Uint32() int imageFormatProperties_maxArrayLayers;
  @Uint32() int imageFormatProperties_sampleCounts;
  @Uint64() int imageFormatProperties_maxResourceSize;
  @Uint32() int externalMemoryFeatures;
  @Uint32() int exportFromImportedHandleTypes;
  @Uint32() int compatibleHandleTypes;
}

class VkExternalMemoryImageCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExportMemoryAllocateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkImportMemoryWin32HandleInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleType;
  Pointer handle;
}

class VkExportMemoryWin32HandleInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pAttributes;
  Pointer dwAccess;
}

class VkWin32KeyedMutexAcquireReleaseInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int acquireCount;
  Pointer<Pointer<VkDeviceMemory>> pAcquireSyncs;
  Pointer pAcquireKeys;
  Pointer pAcquireTimeoutMilliseconds;
  @Uint32() int releaseCount;
  Pointer<Pointer<VkDeviceMemory>> pReleaseSyncs;
  Pointer pReleaseKeys;
}

class VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceGeneratedCommands;
}

class VkDevicePrivateDataCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int privateDataSlotRequestCount;
}

class VkPrivateDataSlotCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkPhysicalDevicePrivateDataFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int privateData;
}

class VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxGraphicsShaderGroupCount;
  @Uint32() int maxIndirectSequenceCount;
  @Uint32() int maxIndirectCommandsTokenCount;
  @Uint32() int maxIndirectCommandsStreamCount;
  @Uint32() int maxIndirectCommandsTokenOffset;
  @Uint32() int maxIndirectCommandsStreamStride;
  @Uint32() int minSequencesCountBufferOffsetAlignment;
  @Uint32() int minSequencesIndexBufferOffsetAlignment;
  @Uint32() int minIndirectCommandsBufferOffsetAlignment;
}

class VkGraphicsShaderGroupCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int stageCount;
  Pointer<VkPipelineShaderStageCreateInfo> pStages;
  Pointer<VkPipelineVertexInputStateCreateInfo> pVertexInputState;
  Pointer<VkPipelineTessellationStateCreateInfo> pTessellationState;
}

class VkGraphicsPipelineShaderGroupsCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int groupCount;
  Pointer<VkGraphicsShaderGroupCreateInfoNV> pGroups;
  @Uint32() int pipelineCount;
  Pointer<Pointer<VkPipeline>> pPipelines;
}

class VkBindShaderGroupIndirectCommandNV extends Struct {
  @Uint32() int groupIndex;
}

class VkBindIndexBufferIndirectCommandNV extends Struct {
  @Uint64() int bufferAddress;
  @Uint32() int size;
  @Int32() int indexType;
}

class VkBindVertexBufferIndirectCommandNV extends Struct {
  @Uint64() int bufferAddress;
  @Uint32() int size;
  @Uint32() int stride;
}

class VkSetStateFlagsIndirectCommandNV extends Struct {
  @Uint32() int data;
}

class VkIndirectCommandsStreamNV extends Struct {
  Pointer<VkBuffer> buffer;
  @Uint64() int offset;
}

class VkIndirectCommandsLayoutTokenNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int tokenType;
  @Uint32() int stream;
  @Uint32() int offset;
  @Uint32() int vertexBindingUnit;
  @Uint32() int vertexDynamicStride;
  Pointer<VkPipelineLayout> pushconstantPipelineLayout;
  @Uint32() int pushconstantShaderStageFlags;
  @Uint32() int pushconstantOffset;
  @Uint32() int pushconstantSize;
  @Uint32() int indirectStateFlags;
  @Uint32() int indexTypeCount;
  @Int32() int pIndexTypes;
  Pointer pIndexTypeValues;
}

class VkIndirectCommandsLayoutCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int pipelineBindPoint;
  @Uint32() int tokenCount;
  Pointer<VkIndirectCommandsLayoutTokenNV> pTokens;
  @Uint32() int streamCount;
  Pointer pStreamStrides;
}

class VkGeneratedCommandsInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int pipelineBindPoint;
  Pointer<VkPipeline> pipeline;
  Pointer<VkIndirectCommandsLayoutNV> indirectCommandsLayout;
  @Uint32() int streamCount;
  Pointer<VkIndirectCommandsStreamNV> pStreams;
  @Uint32() int sequencesCount;
  Pointer<VkBuffer> preprocessBuffer;
  @Uint64() int preprocessOffset;
  @Uint64() int preprocessSize;
  Pointer<VkBuffer> sequencesCountBuffer;
  @Uint64() int sequencesCountOffset;
  Pointer<VkBuffer> sequencesIndexBuffer;
  @Uint64() int sequencesIndexOffset;
}

class VkGeneratedCommandsMemoryRequirementsInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int pipelineBindPoint;
  Pointer<VkPipeline> pipeline;
  Pointer<VkIndirectCommandsLayoutNV> indirectCommandsLayout;
  @Uint32() int maxSequencesCount;
}

class VkPhysicalDeviceFeatures2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int features_robustBufferAccess;
  @Uint32() int features_fullDrawIndexUint32;
  @Uint32() int features_imageCubeArray;
  @Uint32() int features_independentBlend;
  @Uint32() int features_geometryShader;
  @Uint32() int features_tessellationShader;
  @Uint32() int features_sampleRateShading;
  @Uint32() int features_dualSrcBlend;
  @Uint32() int features_logicOp;
  @Uint32() int features_multiDrawIndirect;
  @Uint32() int features_drawIndirectFirstInstance;
  @Uint32() int features_depthClamp;
  @Uint32() int features_depthBiasClamp;
  @Uint32() int features_fillModeNonSolid;
  @Uint32() int features_depthBounds;
  @Uint32() int features_wideLines;
  @Uint32() int features_largePoints;
  @Uint32() int features_alphaToOne;
  @Uint32() int features_multiViewport;
  @Uint32() int features_samplerAnisotropy;
  @Uint32() int features_textureCompressionETC2;
  @Uint32() int features_textureCompressionASTC_LDR;
  @Uint32() int features_textureCompressionBC;
  @Uint32() int features_occlusionQueryPrecise;
  @Uint32() int features_pipelineStatisticsQuery;
  @Uint32() int features_vertexPipelineStoresAndAtomics;
  @Uint32() int features_fragmentStoresAndAtomics;
  @Uint32() int features_shaderTessellationAndGeometryPointSize;
  @Uint32() int features_shaderImageGatherExtended;
  @Uint32() int features_shaderStorageImageExtendedFormats;
  @Uint32() int features_shaderStorageImageMultisample;
  @Uint32() int features_shaderStorageImageReadWithoutFormat;
  @Uint32() int features_shaderStorageImageWriteWithoutFormat;
  @Uint32() int features_shaderUniformBufferArrayDynamicIndexing;
  @Uint32() int features_shaderSampledImageArrayDynamicIndexing;
  @Uint32() int features_shaderStorageBufferArrayDynamicIndexing;
  @Uint32() int features_shaderStorageImageArrayDynamicIndexing;
  @Uint32() int features_shaderClipDistance;
  @Uint32() int features_shaderCullDistance;
  @Uint32() int features_shaderFloat64;
  @Uint32() int features_shaderInt64;
  @Uint32() int features_shaderInt16;
  @Uint32() int features_shaderResourceResidency;
  @Uint32() int features_shaderResourceMinLod;
  @Uint32() int features_sparseBinding;
  @Uint32() int features_sparseResidencyBuffer;
  @Uint32() int features_sparseResidencyImage2D;
  @Uint32() int features_sparseResidencyImage3D;
  @Uint32() int features_sparseResidency2Samples;
  @Uint32() int features_sparseResidency4Samples;
  @Uint32() int features_sparseResidency8Samples;
  @Uint32() int features_sparseResidency16Samples;
  @Uint32() int features_sparseResidencyAliased;
  @Uint32() int features_variableMultisampleRate;
  @Uint32() int features_inheritedQueries;
}

class VkPhysicalDeviceFeatures2KHR extends Struct {
}

class VkPhysicalDeviceProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int properties_apiVersion;
  @Uint32() int properties_driverVersion;
  @Uint32() int properties_vendorID;
  @Uint32() int properties_deviceID;
  @Int32() int properties_deviceType;
  @Uint8() int properties_deviceName_0; @Uint8() int properties_deviceName_1; @Uint8() int properties_deviceName_2; @Uint8() int properties_deviceName_3; @Uint8() int properties_deviceName_4; @Uint8() int properties_deviceName_5; @Uint8() int properties_deviceName_6; @Uint8() int properties_deviceName_7; @Uint8() int properties_deviceName_8; @Uint8() int properties_deviceName_9; @Uint8() int properties_deviceName_10; @Uint8() int properties_deviceName_11; @Uint8() int properties_deviceName_12; @Uint8() int properties_deviceName_13; @Uint8() int properties_deviceName_14; @Uint8() int properties_deviceName_15; @Uint8() int properties_deviceName_16; @Uint8() int properties_deviceName_17; @Uint8() int properties_deviceName_18; @Uint8() int properties_deviceName_19; @Uint8() int properties_deviceName_20; @Uint8() int properties_deviceName_21; @Uint8() int properties_deviceName_22; @Uint8() int properties_deviceName_23; @Uint8() int properties_deviceName_24; @Uint8() int properties_deviceName_25; @Uint8() int properties_deviceName_26; @Uint8() int properties_deviceName_27; @Uint8() int properties_deviceName_28; @Uint8() int properties_deviceName_29; @Uint8() int properties_deviceName_30; @Uint8() int properties_deviceName_31; @Uint8() int properties_deviceName_32; @Uint8() int properties_deviceName_33; @Uint8() int properties_deviceName_34; @Uint8() int properties_deviceName_35; @Uint8() int properties_deviceName_36; @Uint8() int properties_deviceName_37; @Uint8() int properties_deviceName_38; @Uint8() int properties_deviceName_39; @Uint8() int properties_deviceName_40; @Uint8() int properties_deviceName_41; @Uint8() int properties_deviceName_42; @Uint8() int properties_deviceName_43; @Uint8() int properties_deviceName_44; @Uint8() int properties_deviceName_45; @Uint8() int properties_deviceName_46; @Uint8() int properties_deviceName_47; @Uint8() int properties_deviceName_48; @Uint8() int properties_deviceName_49; @Uint8() int properties_deviceName_50; @Uint8() int properties_deviceName_51; @Uint8() int properties_deviceName_52; @Uint8() int properties_deviceName_53; @Uint8() int properties_deviceName_54; @Uint8() int properties_deviceName_55; @Uint8() int properties_deviceName_56; @Uint8() int properties_deviceName_57; @Uint8() int properties_deviceName_58; @Uint8() int properties_deviceName_59; @Uint8() int properties_deviceName_60; @Uint8() int properties_deviceName_61; @Uint8() int properties_deviceName_62; @Uint8() int properties_deviceName_63; @Uint8() int properties_deviceName_64; @Uint8() int properties_deviceName_65; @Uint8() int properties_deviceName_66; @Uint8() int properties_deviceName_67; @Uint8() int properties_deviceName_68; @Uint8() int properties_deviceName_69; @Uint8() int properties_deviceName_70; @Uint8() int properties_deviceName_71; @Uint8() int properties_deviceName_72; @Uint8() int properties_deviceName_73; @Uint8() int properties_deviceName_74; @Uint8() int properties_deviceName_75; @Uint8() int properties_deviceName_76; @Uint8() int properties_deviceName_77; @Uint8() int properties_deviceName_78; @Uint8() int properties_deviceName_79; @Uint8() int properties_deviceName_80; @Uint8() int properties_deviceName_81; @Uint8() int properties_deviceName_82; @Uint8() int properties_deviceName_83; @Uint8() int properties_deviceName_84; @Uint8() int properties_deviceName_85; @Uint8() int properties_deviceName_86; @Uint8() int properties_deviceName_87; @Uint8() int properties_deviceName_88; @Uint8() int properties_deviceName_89; @Uint8() int properties_deviceName_90; @Uint8() int properties_deviceName_91; @Uint8() int properties_deviceName_92; @Uint8() int properties_deviceName_93; @Uint8() int properties_deviceName_94; @Uint8() int properties_deviceName_95; @Uint8() int properties_deviceName_96; @Uint8() int properties_deviceName_97; @Uint8() int properties_deviceName_98; @Uint8() int properties_deviceName_99; @Uint8() int properties_deviceName_100; @Uint8() int properties_deviceName_101; @Uint8() int properties_deviceName_102; @Uint8() int properties_deviceName_103; @Uint8() int properties_deviceName_104; @Uint8() int properties_deviceName_105; @Uint8() int properties_deviceName_106; @Uint8() int properties_deviceName_107; @Uint8() int properties_deviceName_108; @Uint8() int properties_deviceName_109; @Uint8() int properties_deviceName_110; @Uint8() int properties_deviceName_111; @Uint8() int properties_deviceName_112; @Uint8() int properties_deviceName_113; @Uint8() int properties_deviceName_114; @Uint8() int properties_deviceName_115; @Uint8() int properties_deviceName_116; @Uint8() int properties_deviceName_117; @Uint8() int properties_deviceName_118; @Uint8() int properties_deviceName_119; @Uint8() int properties_deviceName_120; @Uint8() int properties_deviceName_121; @Uint8() int properties_deviceName_122; @Uint8() int properties_deviceName_123; @Uint8() int properties_deviceName_124; @Uint8() int properties_deviceName_125; @Uint8() int properties_deviceName_126; @Uint8() int properties_deviceName_127; @Uint8() int properties_deviceName_128; @Uint8() int properties_deviceName_129; @Uint8() int properties_deviceName_130; @Uint8() int properties_deviceName_131; @Uint8() int properties_deviceName_132; @Uint8() int properties_deviceName_133; @Uint8() int properties_deviceName_134; @Uint8() int properties_deviceName_135; @Uint8() int properties_deviceName_136; @Uint8() int properties_deviceName_137; @Uint8() int properties_deviceName_138; @Uint8() int properties_deviceName_139; @Uint8() int properties_deviceName_140; @Uint8() int properties_deviceName_141; @Uint8() int properties_deviceName_142; @Uint8() int properties_deviceName_143; @Uint8() int properties_deviceName_144; @Uint8() int properties_deviceName_145; @Uint8() int properties_deviceName_146; @Uint8() int properties_deviceName_147; @Uint8() int properties_deviceName_148; @Uint8() int properties_deviceName_149; @Uint8() int properties_deviceName_150; @Uint8() int properties_deviceName_151; @Uint8() int properties_deviceName_152; @Uint8() int properties_deviceName_153; @Uint8() int properties_deviceName_154; @Uint8() int properties_deviceName_155; @Uint8() int properties_deviceName_156; @Uint8() int properties_deviceName_157; @Uint8() int properties_deviceName_158; @Uint8() int properties_deviceName_159; @Uint8() int properties_deviceName_160; @Uint8() int properties_deviceName_161; @Uint8() int properties_deviceName_162; @Uint8() int properties_deviceName_163; @Uint8() int properties_deviceName_164; @Uint8() int properties_deviceName_165; @Uint8() int properties_deviceName_166; @Uint8() int properties_deviceName_167; @Uint8() int properties_deviceName_168; @Uint8() int properties_deviceName_169; @Uint8() int properties_deviceName_170; @Uint8() int properties_deviceName_171; @Uint8() int properties_deviceName_172; @Uint8() int properties_deviceName_173; @Uint8() int properties_deviceName_174; @Uint8() int properties_deviceName_175; @Uint8() int properties_deviceName_176; @Uint8() int properties_deviceName_177; @Uint8() int properties_deviceName_178; @Uint8() int properties_deviceName_179; @Uint8() int properties_deviceName_180; @Uint8() int properties_deviceName_181; @Uint8() int properties_deviceName_182; @Uint8() int properties_deviceName_183; @Uint8() int properties_deviceName_184; @Uint8() int properties_deviceName_185; @Uint8() int properties_deviceName_186; @Uint8() int properties_deviceName_187; @Uint8() int properties_deviceName_188; @Uint8() int properties_deviceName_189; @Uint8() int properties_deviceName_190; @Uint8() int properties_deviceName_191; @Uint8() int properties_deviceName_192; @Uint8() int properties_deviceName_193; @Uint8() int properties_deviceName_194; @Uint8() int properties_deviceName_195; @Uint8() int properties_deviceName_196; @Uint8() int properties_deviceName_197; @Uint8() int properties_deviceName_198; @Uint8() int properties_deviceName_199; @Uint8() int properties_deviceName_200; @Uint8() int properties_deviceName_201; @Uint8() int properties_deviceName_202; @Uint8() int properties_deviceName_203; @Uint8() int properties_deviceName_204; @Uint8() int properties_deviceName_205; @Uint8() int properties_deviceName_206; @Uint8() int properties_deviceName_207; @Uint8() int properties_deviceName_208; @Uint8() int properties_deviceName_209; @Uint8() int properties_deviceName_210; @Uint8() int properties_deviceName_211; @Uint8() int properties_deviceName_212; @Uint8() int properties_deviceName_213; @Uint8() int properties_deviceName_214; @Uint8() int properties_deviceName_215; @Uint8() int properties_deviceName_216; @Uint8() int properties_deviceName_217; @Uint8() int properties_deviceName_218; @Uint8() int properties_deviceName_219; @Uint8() int properties_deviceName_220; @Uint8() int properties_deviceName_221; @Uint8() int properties_deviceName_222; @Uint8() int properties_deviceName_223; @Uint8() int properties_deviceName_224; @Uint8() int properties_deviceName_225; @Uint8() int properties_deviceName_226; @Uint8() int properties_deviceName_227; @Uint8() int properties_deviceName_228; @Uint8() int properties_deviceName_229; @Uint8() int properties_deviceName_230; @Uint8() int properties_deviceName_231; @Uint8() int properties_deviceName_232; @Uint8() int properties_deviceName_233; @Uint8() int properties_deviceName_234; @Uint8() int properties_deviceName_235; @Uint8() int properties_deviceName_236; @Uint8() int properties_deviceName_237; @Uint8() int properties_deviceName_238; @Uint8() int properties_deviceName_239; @Uint8() int properties_deviceName_240; @Uint8() int properties_deviceName_241; @Uint8() int properties_deviceName_242; @Uint8() int properties_deviceName_243; @Uint8() int properties_deviceName_244; @Uint8() int properties_deviceName_245; @Uint8() int properties_deviceName_246; @Uint8() int properties_deviceName_247; @Uint8() int properties_deviceName_248; @Uint8() int properties_deviceName_249; @Uint8() int properties_deviceName_250; @Uint8() int properties_deviceName_251; @Uint8() int properties_deviceName_252; @Uint8() int properties_deviceName_253; @Uint8() int properties_deviceName_254; @Uint8() int properties_deviceName_255;
  String get properties_deviceName {
    var bytes = [properties_deviceName_0, properties_deviceName_1, properties_deviceName_2, properties_deviceName_3, properties_deviceName_4, properties_deviceName_5, properties_deviceName_6, properties_deviceName_7, properties_deviceName_8, properties_deviceName_9, properties_deviceName_10, properties_deviceName_11, properties_deviceName_12, properties_deviceName_13, properties_deviceName_14, properties_deviceName_15, properties_deviceName_16, properties_deviceName_17, properties_deviceName_18, properties_deviceName_19, properties_deviceName_20, properties_deviceName_21, properties_deviceName_22, properties_deviceName_23, properties_deviceName_24, properties_deviceName_25, properties_deviceName_26, properties_deviceName_27, properties_deviceName_28, properties_deviceName_29, properties_deviceName_30, properties_deviceName_31, properties_deviceName_32, properties_deviceName_33, properties_deviceName_34, properties_deviceName_35, properties_deviceName_36, properties_deviceName_37, properties_deviceName_38, properties_deviceName_39, properties_deviceName_40, properties_deviceName_41, properties_deviceName_42, properties_deviceName_43, properties_deviceName_44, properties_deviceName_45, properties_deviceName_46, properties_deviceName_47, properties_deviceName_48, properties_deviceName_49, properties_deviceName_50, properties_deviceName_51, properties_deviceName_52, properties_deviceName_53, properties_deviceName_54, properties_deviceName_55, properties_deviceName_56, properties_deviceName_57, properties_deviceName_58, properties_deviceName_59, properties_deviceName_60, properties_deviceName_61, properties_deviceName_62, properties_deviceName_63, properties_deviceName_64, properties_deviceName_65, properties_deviceName_66, properties_deviceName_67, properties_deviceName_68, properties_deviceName_69, properties_deviceName_70, properties_deviceName_71, properties_deviceName_72, properties_deviceName_73, properties_deviceName_74, properties_deviceName_75, properties_deviceName_76, properties_deviceName_77, properties_deviceName_78, properties_deviceName_79, properties_deviceName_80, properties_deviceName_81, properties_deviceName_82, properties_deviceName_83, properties_deviceName_84, properties_deviceName_85, properties_deviceName_86, properties_deviceName_87, properties_deviceName_88, properties_deviceName_89, properties_deviceName_90, properties_deviceName_91, properties_deviceName_92, properties_deviceName_93, properties_deviceName_94, properties_deviceName_95, properties_deviceName_96, properties_deviceName_97, properties_deviceName_98, properties_deviceName_99, properties_deviceName_100, properties_deviceName_101, properties_deviceName_102, properties_deviceName_103, properties_deviceName_104, properties_deviceName_105, properties_deviceName_106, properties_deviceName_107, properties_deviceName_108, properties_deviceName_109, properties_deviceName_110, properties_deviceName_111, properties_deviceName_112, properties_deviceName_113, properties_deviceName_114, properties_deviceName_115, properties_deviceName_116, properties_deviceName_117, properties_deviceName_118, properties_deviceName_119, properties_deviceName_120, properties_deviceName_121, properties_deviceName_122, properties_deviceName_123, properties_deviceName_124, properties_deviceName_125, properties_deviceName_126, properties_deviceName_127, properties_deviceName_128, properties_deviceName_129, properties_deviceName_130, properties_deviceName_131, properties_deviceName_132, properties_deviceName_133, properties_deviceName_134, properties_deviceName_135, properties_deviceName_136, properties_deviceName_137, properties_deviceName_138, properties_deviceName_139, properties_deviceName_140, properties_deviceName_141, properties_deviceName_142, properties_deviceName_143, properties_deviceName_144, properties_deviceName_145, properties_deviceName_146, properties_deviceName_147, properties_deviceName_148, properties_deviceName_149, properties_deviceName_150, properties_deviceName_151, properties_deviceName_152, properties_deviceName_153, properties_deviceName_154, properties_deviceName_155, properties_deviceName_156, properties_deviceName_157, properties_deviceName_158, properties_deviceName_159, properties_deviceName_160, properties_deviceName_161, properties_deviceName_162, properties_deviceName_163, properties_deviceName_164, properties_deviceName_165, properties_deviceName_166, properties_deviceName_167, properties_deviceName_168, properties_deviceName_169, properties_deviceName_170, properties_deviceName_171, properties_deviceName_172, properties_deviceName_173, properties_deviceName_174, properties_deviceName_175, properties_deviceName_176, properties_deviceName_177, properties_deviceName_178, properties_deviceName_179, properties_deviceName_180, properties_deviceName_181, properties_deviceName_182, properties_deviceName_183, properties_deviceName_184, properties_deviceName_185, properties_deviceName_186, properties_deviceName_187, properties_deviceName_188, properties_deviceName_189, properties_deviceName_190, properties_deviceName_191, properties_deviceName_192, properties_deviceName_193, properties_deviceName_194, properties_deviceName_195, properties_deviceName_196, properties_deviceName_197, properties_deviceName_198, properties_deviceName_199, properties_deviceName_200, properties_deviceName_201, properties_deviceName_202, properties_deviceName_203, properties_deviceName_204, properties_deviceName_205, properties_deviceName_206, properties_deviceName_207, properties_deviceName_208, properties_deviceName_209, properties_deviceName_210, properties_deviceName_211, properties_deviceName_212, properties_deviceName_213, properties_deviceName_214, properties_deviceName_215, properties_deviceName_216, properties_deviceName_217, properties_deviceName_218, properties_deviceName_219, properties_deviceName_220, properties_deviceName_221, properties_deviceName_222, properties_deviceName_223, properties_deviceName_224, properties_deviceName_225, properties_deviceName_226, properties_deviceName_227, properties_deviceName_228, properties_deviceName_229, properties_deviceName_230, properties_deviceName_231, properties_deviceName_232, properties_deviceName_233, properties_deviceName_234, properties_deviceName_235, properties_deviceName_236, properties_deviceName_237, properties_deviceName_238, properties_deviceName_239, properties_deviceName_240, properties_deviceName_241, properties_deviceName_242, properties_deviceName_243, properties_deviceName_244, properties_deviceName_245, properties_deviceName_246, properties_deviceName_247, properties_deviceName_248, properties_deviceName_249, properties_deviceName_250, properties_deviceName_251, properties_deviceName_252, properties_deviceName_253, properties_deviceName_254, properties_deviceName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set properties_deviceName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { properties_deviceName_0 = bytes[0]; } if (bytes.isNotEmpty) { properties_deviceName_1 = bytes[1]; } if (bytes.isNotEmpty) { properties_deviceName_2 = bytes[2]; } if (bytes.isNotEmpty) { properties_deviceName_3 = bytes[3]; } if (bytes.isNotEmpty) { properties_deviceName_4 = bytes[4]; } if (bytes.isNotEmpty) { properties_deviceName_5 = bytes[5]; } if (bytes.isNotEmpty) { properties_deviceName_6 = bytes[6]; } if (bytes.isNotEmpty) { properties_deviceName_7 = bytes[7]; } if (bytes.isNotEmpty) { properties_deviceName_8 = bytes[8]; } if (bytes.isNotEmpty) { properties_deviceName_9 = bytes[9]; } if (bytes.isNotEmpty) { properties_deviceName_10 = bytes[10]; } if (bytes.isNotEmpty) { properties_deviceName_11 = bytes[11]; } if (bytes.isNotEmpty) { properties_deviceName_12 = bytes[12]; } if (bytes.isNotEmpty) { properties_deviceName_13 = bytes[13]; } if (bytes.isNotEmpty) { properties_deviceName_14 = bytes[14]; } if (bytes.isNotEmpty) { properties_deviceName_15 = bytes[15]; } if (bytes.isNotEmpty) { properties_deviceName_16 = bytes[16]; } if (bytes.isNotEmpty) { properties_deviceName_17 = bytes[17]; } if (bytes.isNotEmpty) { properties_deviceName_18 = bytes[18]; } if (bytes.isNotEmpty) { properties_deviceName_19 = bytes[19]; } if (bytes.isNotEmpty) { properties_deviceName_20 = bytes[20]; } if (bytes.isNotEmpty) { properties_deviceName_21 = bytes[21]; } if (bytes.isNotEmpty) { properties_deviceName_22 = bytes[22]; } if (bytes.isNotEmpty) { properties_deviceName_23 = bytes[23]; } if (bytes.isNotEmpty) { properties_deviceName_24 = bytes[24]; } if (bytes.isNotEmpty) { properties_deviceName_25 = bytes[25]; } if (bytes.isNotEmpty) { properties_deviceName_26 = bytes[26]; } if (bytes.isNotEmpty) { properties_deviceName_27 = bytes[27]; } if (bytes.isNotEmpty) { properties_deviceName_28 = bytes[28]; } if (bytes.isNotEmpty) { properties_deviceName_29 = bytes[29]; } if (bytes.isNotEmpty) { properties_deviceName_30 = bytes[30]; } if (bytes.isNotEmpty) { properties_deviceName_31 = bytes[31]; } if (bytes.isNotEmpty) { properties_deviceName_32 = bytes[32]; } if (bytes.isNotEmpty) { properties_deviceName_33 = bytes[33]; } if (bytes.isNotEmpty) { properties_deviceName_34 = bytes[34]; } if (bytes.isNotEmpty) { properties_deviceName_35 = bytes[35]; } if (bytes.isNotEmpty) { properties_deviceName_36 = bytes[36]; } if (bytes.isNotEmpty) { properties_deviceName_37 = bytes[37]; } if (bytes.isNotEmpty) { properties_deviceName_38 = bytes[38]; } if (bytes.isNotEmpty) { properties_deviceName_39 = bytes[39]; } if (bytes.isNotEmpty) { properties_deviceName_40 = bytes[40]; } if (bytes.isNotEmpty) { properties_deviceName_41 = bytes[41]; } if (bytes.isNotEmpty) { properties_deviceName_42 = bytes[42]; } if (bytes.isNotEmpty) { properties_deviceName_43 = bytes[43]; } if (bytes.isNotEmpty) { properties_deviceName_44 = bytes[44]; } if (bytes.isNotEmpty) { properties_deviceName_45 = bytes[45]; } if (bytes.isNotEmpty) { properties_deviceName_46 = bytes[46]; } if (bytes.isNotEmpty) { properties_deviceName_47 = bytes[47]; } if (bytes.isNotEmpty) { properties_deviceName_48 = bytes[48]; } if (bytes.isNotEmpty) { properties_deviceName_49 = bytes[49]; } if (bytes.isNotEmpty) { properties_deviceName_50 = bytes[50]; } if (bytes.isNotEmpty) { properties_deviceName_51 = bytes[51]; } if (bytes.isNotEmpty) { properties_deviceName_52 = bytes[52]; } if (bytes.isNotEmpty) { properties_deviceName_53 = bytes[53]; } if (bytes.isNotEmpty) { properties_deviceName_54 = bytes[54]; } if (bytes.isNotEmpty) { properties_deviceName_55 = bytes[55]; } if (bytes.isNotEmpty) { properties_deviceName_56 = bytes[56]; } if (bytes.isNotEmpty) { properties_deviceName_57 = bytes[57]; } if (bytes.isNotEmpty) { properties_deviceName_58 = bytes[58]; } if (bytes.isNotEmpty) { properties_deviceName_59 = bytes[59]; } if (bytes.isNotEmpty) { properties_deviceName_60 = bytes[60]; } if (bytes.isNotEmpty) { properties_deviceName_61 = bytes[61]; } if (bytes.isNotEmpty) { properties_deviceName_62 = bytes[62]; } if (bytes.isNotEmpty) { properties_deviceName_63 = bytes[63]; } if (bytes.isNotEmpty) { properties_deviceName_64 = bytes[64]; } if (bytes.isNotEmpty) { properties_deviceName_65 = bytes[65]; } if (bytes.isNotEmpty) { properties_deviceName_66 = bytes[66]; } if (bytes.isNotEmpty) { properties_deviceName_67 = bytes[67]; } if (bytes.isNotEmpty) { properties_deviceName_68 = bytes[68]; } if (bytes.isNotEmpty) { properties_deviceName_69 = bytes[69]; } if (bytes.isNotEmpty) { properties_deviceName_70 = bytes[70]; } if (bytes.isNotEmpty) { properties_deviceName_71 = bytes[71]; } if (bytes.isNotEmpty) { properties_deviceName_72 = bytes[72]; } if (bytes.isNotEmpty) { properties_deviceName_73 = bytes[73]; } if (bytes.isNotEmpty) { properties_deviceName_74 = bytes[74]; } if (bytes.isNotEmpty) { properties_deviceName_75 = bytes[75]; } if (bytes.isNotEmpty) { properties_deviceName_76 = bytes[76]; } if (bytes.isNotEmpty) { properties_deviceName_77 = bytes[77]; } if (bytes.isNotEmpty) { properties_deviceName_78 = bytes[78]; } if (bytes.isNotEmpty) { properties_deviceName_79 = bytes[79]; } if (bytes.isNotEmpty) { properties_deviceName_80 = bytes[80]; } if (bytes.isNotEmpty) { properties_deviceName_81 = bytes[81]; } if (bytes.isNotEmpty) { properties_deviceName_82 = bytes[82]; } if (bytes.isNotEmpty) { properties_deviceName_83 = bytes[83]; } if (bytes.isNotEmpty) { properties_deviceName_84 = bytes[84]; } if (bytes.isNotEmpty) { properties_deviceName_85 = bytes[85]; } if (bytes.isNotEmpty) { properties_deviceName_86 = bytes[86]; } if (bytes.isNotEmpty) { properties_deviceName_87 = bytes[87]; } if (bytes.isNotEmpty) { properties_deviceName_88 = bytes[88]; } if (bytes.isNotEmpty) { properties_deviceName_89 = bytes[89]; } if (bytes.isNotEmpty) { properties_deviceName_90 = bytes[90]; } if (bytes.isNotEmpty) { properties_deviceName_91 = bytes[91]; } if (bytes.isNotEmpty) { properties_deviceName_92 = bytes[92]; } if (bytes.isNotEmpty) { properties_deviceName_93 = bytes[93]; } if (bytes.isNotEmpty) { properties_deviceName_94 = bytes[94]; } if (bytes.isNotEmpty) { properties_deviceName_95 = bytes[95]; } if (bytes.isNotEmpty) { properties_deviceName_96 = bytes[96]; } if (bytes.isNotEmpty) { properties_deviceName_97 = bytes[97]; } if (bytes.isNotEmpty) { properties_deviceName_98 = bytes[98]; } if (bytes.isNotEmpty) { properties_deviceName_99 = bytes[99]; } if (bytes.isNotEmpty) { properties_deviceName_100 = bytes[100]; } if (bytes.isNotEmpty) { properties_deviceName_101 = bytes[101]; } if (bytes.isNotEmpty) { properties_deviceName_102 = bytes[102]; } if (bytes.isNotEmpty) { properties_deviceName_103 = bytes[103]; } if (bytes.isNotEmpty) { properties_deviceName_104 = bytes[104]; } if (bytes.isNotEmpty) { properties_deviceName_105 = bytes[105]; } if (bytes.isNotEmpty) { properties_deviceName_106 = bytes[106]; } if (bytes.isNotEmpty) { properties_deviceName_107 = bytes[107]; } if (bytes.isNotEmpty) { properties_deviceName_108 = bytes[108]; } if (bytes.isNotEmpty) { properties_deviceName_109 = bytes[109]; } if (bytes.isNotEmpty) { properties_deviceName_110 = bytes[110]; } if (bytes.isNotEmpty) { properties_deviceName_111 = bytes[111]; } if (bytes.isNotEmpty) { properties_deviceName_112 = bytes[112]; } if (bytes.isNotEmpty) { properties_deviceName_113 = bytes[113]; } if (bytes.isNotEmpty) { properties_deviceName_114 = bytes[114]; } if (bytes.isNotEmpty) { properties_deviceName_115 = bytes[115]; } if (bytes.isNotEmpty) { properties_deviceName_116 = bytes[116]; } if (bytes.isNotEmpty) { properties_deviceName_117 = bytes[117]; } if (bytes.isNotEmpty) { properties_deviceName_118 = bytes[118]; } if (bytes.isNotEmpty) { properties_deviceName_119 = bytes[119]; } if (bytes.isNotEmpty) { properties_deviceName_120 = bytes[120]; } if (bytes.isNotEmpty) { properties_deviceName_121 = bytes[121]; } if (bytes.isNotEmpty) { properties_deviceName_122 = bytes[122]; } if (bytes.isNotEmpty) { properties_deviceName_123 = bytes[123]; } if (bytes.isNotEmpty) { properties_deviceName_124 = bytes[124]; } if (bytes.isNotEmpty) { properties_deviceName_125 = bytes[125]; } if (bytes.isNotEmpty) { properties_deviceName_126 = bytes[126]; } if (bytes.isNotEmpty) { properties_deviceName_127 = bytes[127]; } if (bytes.isNotEmpty) { properties_deviceName_128 = bytes[128]; } if (bytes.isNotEmpty) { properties_deviceName_129 = bytes[129]; } if (bytes.isNotEmpty) { properties_deviceName_130 = bytes[130]; } if (bytes.isNotEmpty) { properties_deviceName_131 = bytes[131]; } if (bytes.isNotEmpty) { properties_deviceName_132 = bytes[132]; } if (bytes.isNotEmpty) { properties_deviceName_133 = bytes[133]; } if (bytes.isNotEmpty) { properties_deviceName_134 = bytes[134]; } if (bytes.isNotEmpty) { properties_deviceName_135 = bytes[135]; } if (bytes.isNotEmpty) { properties_deviceName_136 = bytes[136]; } if (bytes.isNotEmpty) { properties_deviceName_137 = bytes[137]; } if (bytes.isNotEmpty) { properties_deviceName_138 = bytes[138]; } if (bytes.isNotEmpty) { properties_deviceName_139 = bytes[139]; } if (bytes.isNotEmpty) { properties_deviceName_140 = bytes[140]; } if (bytes.isNotEmpty) { properties_deviceName_141 = bytes[141]; } if (bytes.isNotEmpty) { properties_deviceName_142 = bytes[142]; } if (bytes.isNotEmpty) { properties_deviceName_143 = bytes[143]; } if (bytes.isNotEmpty) { properties_deviceName_144 = bytes[144]; } if (bytes.isNotEmpty) { properties_deviceName_145 = bytes[145]; } if (bytes.isNotEmpty) { properties_deviceName_146 = bytes[146]; } if (bytes.isNotEmpty) { properties_deviceName_147 = bytes[147]; } if (bytes.isNotEmpty) { properties_deviceName_148 = bytes[148]; } if (bytes.isNotEmpty) { properties_deviceName_149 = bytes[149]; } if (bytes.isNotEmpty) { properties_deviceName_150 = bytes[150]; } if (bytes.isNotEmpty) { properties_deviceName_151 = bytes[151]; } if (bytes.isNotEmpty) { properties_deviceName_152 = bytes[152]; } if (bytes.isNotEmpty) { properties_deviceName_153 = bytes[153]; } if (bytes.isNotEmpty) { properties_deviceName_154 = bytes[154]; } if (bytes.isNotEmpty) { properties_deviceName_155 = bytes[155]; } if (bytes.isNotEmpty) { properties_deviceName_156 = bytes[156]; } if (bytes.isNotEmpty) { properties_deviceName_157 = bytes[157]; } if (bytes.isNotEmpty) { properties_deviceName_158 = bytes[158]; } if (bytes.isNotEmpty) { properties_deviceName_159 = bytes[159]; } if (bytes.isNotEmpty) { properties_deviceName_160 = bytes[160]; } if (bytes.isNotEmpty) { properties_deviceName_161 = bytes[161]; } if (bytes.isNotEmpty) { properties_deviceName_162 = bytes[162]; } if (bytes.isNotEmpty) { properties_deviceName_163 = bytes[163]; } if (bytes.isNotEmpty) { properties_deviceName_164 = bytes[164]; } if (bytes.isNotEmpty) { properties_deviceName_165 = bytes[165]; } if (bytes.isNotEmpty) { properties_deviceName_166 = bytes[166]; } if (bytes.isNotEmpty) { properties_deviceName_167 = bytes[167]; } if (bytes.isNotEmpty) { properties_deviceName_168 = bytes[168]; } if (bytes.isNotEmpty) { properties_deviceName_169 = bytes[169]; } if (bytes.isNotEmpty) { properties_deviceName_170 = bytes[170]; } if (bytes.isNotEmpty) { properties_deviceName_171 = bytes[171]; } if (bytes.isNotEmpty) { properties_deviceName_172 = bytes[172]; } if (bytes.isNotEmpty) { properties_deviceName_173 = bytes[173]; } if (bytes.isNotEmpty) { properties_deviceName_174 = bytes[174]; } if (bytes.isNotEmpty) { properties_deviceName_175 = bytes[175]; } if (bytes.isNotEmpty) { properties_deviceName_176 = bytes[176]; } if (bytes.isNotEmpty) { properties_deviceName_177 = bytes[177]; } if (bytes.isNotEmpty) { properties_deviceName_178 = bytes[178]; } if (bytes.isNotEmpty) { properties_deviceName_179 = bytes[179]; } if (bytes.isNotEmpty) { properties_deviceName_180 = bytes[180]; } if (bytes.isNotEmpty) { properties_deviceName_181 = bytes[181]; } if (bytes.isNotEmpty) { properties_deviceName_182 = bytes[182]; } if (bytes.isNotEmpty) { properties_deviceName_183 = bytes[183]; } if (bytes.isNotEmpty) { properties_deviceName_184 = bytes[184]; } if (bytes.isNotEmpty) { properties_deviceName_185 = bytes[185]; } if (bytes.isNotEmpty) { properties_deviceName_186 = bytes[186]; } if (bytes.isNotEmpty) { properties_deviceName_187 = bytes[187]; } if (bytes.isNotEmpty) { properties_deviceName_188 = bytes[188]; } if (bytes.isNotEmpty) { properties_deviceName_189 = bytes[189]; } if (bytes.isNotEmpty) { properties_deviceName_190 = bytes[190]; } if (bytes.isNotEmpty) { properties_deviceName_191 = bytes[191]; } if (bytes.isNotEmpty) { properties_deviceName_192 = bytes[192]; } if (bytes.isNotEmpty) { properties_deviceName_193 = bytes[193]; } if (bytes.isNotEmpty) { properties_deviceName_194 = bytes[194]; } if (bytes.isNotEmpty) { properties_deviceName_195 = bytes[195]; } if (bytes.isNotEmpty) { properties_deviceName_196 = bytes[196]; } if (bytes.isNotEmpty) { properties_deviceName_197 = bytes[197]; } if (bytes.isNotEmpty) { properties_deviceName_198 = bytes[198]; } if (bytes.isNotEmpty) { properties_deviceName_199 = bytes[199]; } if (bytes.isNotEmpty) { properties_deviceName_200 = bytes[200]; } if (bytes.isNotEmpty) { properties_deviceName_201 = bytes[201]; } if (bytes.isNotEmpty) { properties_deviceName_202 = bytes[202]; } if (bytes.isNotEmpty) { properties_deviceName_203 = bytes[203]; } if (bytes.isNotEmpty) { properties_deviceName_204 = bytes[204]; } if (bytes.isNotEmpty) { properties_deviceName_205 = bytes[205]; } if (bytes.isNotEmpty) { properties_deviceName_206 = bytes[206]; } if (bytes.isNotEmpty) { properties_deviceName_207 = bytes[207]; } if (bytes.isNotEmpty) { properties_deviceName_208 = bytes[208]; } if (bytes.isNotEmpty) { properties_deviceName_209 = bytes[209]; } if (bytes.isNotEmpty) { properties_deviceName_210 = bytes[210]; } if (bytes.isNotEmpty) { properties_deviceName_211 = bytes[211]; } if (bytes.isNotEmpty) { properties_deviceName_212 = bytes[212]; } if (bytes.isNotEmpty) { properties_deviceName_213 = bytes[213]; } if (bytes.isNotEmpty) { properties_deviceName_214 = bytes[214]; } if (bytes.isNotEmpty) { properties_deviceName_215 = bytes[215]; } if (bytes.isNotEmpty) { properties_deviceName_216 = bytes[216]; } if (bytes.isNotEmpty) { properties_deviceName_217 = bytes[217]; } if (bytes.isNotEmpty) { properties_deviceName_218 = bytes[218]; } if (bytes.isNotEmpty) { properties_deviceName_219 = bytes[219]; } if (bytes.isNotEmpty) { properties_deviceName_220 = bytes[220]; } if (bytes.isNotEmpty) { properties_deviceName_221 = bytes[221]; } if (bytes.isNotEmpty) { properties_deviceName_222 = bytes[222]; } if (bytes.isNotEmpty) { properties_deviceName_223 = bytes[223]; } if (bytes.isNotEmpty) { properties_deviceName_224 = bytes[224]; } if (bytes.isNotEmpty) { properties_deviceName_225 = bytes[225]; } if (bytes.isNotEmpty) { properties_deviceName_226 = bytes[226]; } if (bytes.isNotEmpty) { properties_deviceName_227 = bytes[227]; } if (bytes.isNotEmpty) { properties_deviceName_228 = bytes[228]; } if (bytes.isNotEmpty) { properties_deviceName_229 = bytes[229]; } if (bytes.isNotEmpty) { properties_deviceName_230 = bytes[230]; } if (bytes.isNotEmpty) { properties_deviceName_231 = bytes[231]; } if (bytes.isNotEmpty) { properties_deviceName_232 = bytes[232]; } if (bytes.isNotEmpty) { properties_deviceName_233 = bytes[233]; } if (bytes.isNotEmpty) { properties_deviceName_234 = bytes[234]; } if (bytes.isNotEmpty) { properties_deviceName_235 = bytes[235]; } if (bytes.isNotEmpty) { properties_deviceName_236 = bytes[236]; } if (bytes.isNotEmpty) { properties_deviceName_237 = bytes[237]; } if (bytes.isNotEmpty) { properties_deviceName_238 = bytes[238]; } if (bytes.isNotEmpty) { properties_deviceName_239 = bytes[239]; } if (bytes.isNotEmpty) { properties_deviceName_240 = bytes[240]; } if (bytes.isNotEmpty) { properties_deviceName_241 = bytes[241]; } if (bytes.isNotEmpty) { properties_deviceName_242 = bytes[242]; } if (bytes.isNotEmpty) { properties_deviceName_243 = bytes[243]; } if (bytes.isNotEmpty) { properties_deviceName_244 = bytes[244]; } if (bytes.isNotEmpty) { properties_deviceName_245 = bytes[245]; } if (bytes.isNotEmpty) { properties_deviceName_246 = bytes[246]; } if (bytes.isNotEmpty) { properties_deviceName_247 = bytes[247]; } if (bytes.isNotEmpty) { properties_deviceName_248 = bytes[248]; } if (bytes.isNotEmpty) { properties_deviceName_249 = bytes[249]; } if (bytes.isNotEmpty) { properties_deviceName_250 = bytes[250]; } if (bytes.isNotEmpty) { properties_deviceName_251 = bytes[251]; } if (bytes.isNotEmpty) { properties_deviceName_252 = bytes[252]; } if (bytes.isNotEmpty) { properties_deviceName_253 = bytes[253]; } if (bytes.isNotEmpty) { properties_deviceName_254 = bytes[254]; } if (bytes.isNotEmpty) { properties_deviceName_255 = bytes[255]; }
  }
  @Uint8() int properties_pipelineCacheUUID_0; @Uint8() int properties_pipelineCacheUUID_1; @Uint8() int properties_pipelineCacheUUID_2; @Uint8() int properties_pipelineCacheUUID_3; @Uint8() int properties_pipelineCacheUUID_4; @Uint8() int properties_pipelineCacheUUID_5; @Uint8() int properties_pipelineCacheUUID_6; @Uint8() int properties_pipelineCacheUUID_7; @Uint8() int properties_pipelineCacheUUID_8; @Uint8() int properties_pipelineCacheUUID_9; @Uint8() int properties_pipelineCacheUUID_10; @Uint8() int properties_pipelineCacheUUID_11; @Uint8() int properties_pipelineCacheUUID_12; @Uint8() int properties_pipelineCacheUUID_13; @Uint8() int properties_pipelineCacheUUID_14; @Uint8() int properties_pipelineCacheUUID_15;
  String get properties_pipelineCacheUUID {
    var bytes = [properties_pipelineCacheUUID_0, properties_pipelineCacheUUID_1, properties_pipelineCacheUUID_2, properties_pipelineCacheUUID_3, properties_pipelineCacheUUID_4, properties_pipelineCacheUUID_5, properties_pipelineCacheUUID_6, properties_pipelineCacheUUID_7, properties_pipelineCacheUUID_8, properties_pipelineCacheUUID_9, properties_pipelineCacheUUID_10, properties_pipelineCacheUUID_11, properties_pipelineCacheUUID_12, properties_pipelineCacheUUID_13, properties_pipelineCacheUUID_14, properties_pipelineCacheUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set properties_pipelineCacheUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { properties_pipelineCacheUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { properties_pipelineCacheUUID_15 = bytes[15]; }
  }
  @Uint32() int properties_limits_maxImageDimension1D;
  @Uint32() int properties_limits_maxImageDimension2D;
  @Uint32() int properties_limits_maxImageDimension3D;
  @Uint32() int properties_limits_maxImageDimensionCube;
  @Uint32() int properties_limits_maxImageArrayLayers;
  @Uint32() int properties_limits_maxTexelBufferElements;
  @Uint32() int properties_limits_maxUniformBufferRange;
  @Uint32() int properties_limits_maxStorageBufferRange;
  @Uint32() int properties_limits_maxPushConstantsSize;
  @Uint32() int properties_limits_maxMemoryAllocationCount;
  @Uint32() int properties_limits_maxSamplerAllocationCount;
  @Uint64() int properties_limits_bufferImageGranularity;
  @Uint64() int properties_limits_sparseAddressSpaceSize;
  @Uint32() int properties_limits_maxBoundDescriptorSets;
  @Uint32() int properties_limits_maxPerStageDescriptorSamplers;
  @Uint32() int properties_limits_maxPerStageDescriptorUniformBuffers;
  @Uint32() int properties_limits_maxPerStageDescriptorStorageBuffers;
  @Uint32() int properties_limits_maxPerStageDescriptorSampledImages;
  @Uint32() int properties_limits_maxPerStageDescriptorStorageImages;
  @Uint32() int properties_limits_maxPerStageDescriptorInputAttachments;
  @Uint32() int properties_limits_maxPerStageResources;
  @Uint32() int properties_limits_maxDescriptorSetSamplers;
  @Uint32() int properties_limits_maxDescriptorSetUniformBuffers;
  @Uint32() int properties_limits_maxDescriptorSetUniformBuffersDynamic;
  @Uint32() int properties_limits_maxDescriptorSetStorageBuffers;
  @Uint32() int properties_limits_maxDescriptorSetStorageBuffersDynamic;
  @Uint32() int properties_limits_maxDescriptorSetSampledImages;
  @Uint32() int properties_limits_maxDescriptorSetStorageImages;
  @Uint32() int properties_limits_maxDescriptorSetInputAttachments;
  @Uint32() int properties_limits_maxVertexInputAttributes;
  @Uint32() int properties_limits_maxVertexInputBindings;
  @Uint32() int properties_limits_maxVertexInputAttributeOffset;
  @Uint32() int properties_limits_maxVertexInputBindingStride;
  @Uint32() int properties_limits_maxVertexOutputComponents;
  @Uint32() int properties_limits_maxTessellationGenerationLevel;
  @Uint32() int properties_limits_maxTessellationPatchSize;
  @Uint32() int properties_limits_maxTessellationControlPerVertexInputComponents;
  @Uint32() int properties_limits_maxTessellationControlPerVertexOutputComponents;
  @Uint32() int properties_limits_maxTessellationControlPerPatchOutputComponents;
  @Uint32() int properties_limits_maxTessellationControlTotalOutputComponents;
  @Uint32() int properties_limits_maxTessellationEvaluationInputComponents;
  @Uint32() int properties_limits_maxTessellationEvaluationOutputComponents;
  @Uint32() int properties_limits_maxGeometryShaderInvocations;
  @Uint32() int properties_limits_maxGeometryInputComponents;
  @Uint32() int properties_limits_maxGeometryOutputComponents;
  @Uint32() int properties_limits_maxGeometryOutputVertices;
  @Uint32() int properties_limits_maxGeometryTotalOutputComponents;
  @Uint32() int properties_limits_maxFragmentInputComponents;
  @Uint32() int properties_limits_maxFragmentOutputAttachments;
  @Uint32() int properties_limits_maxFragmentDualSrcAttachments;
  @Uint32() int properties_limits_maxFragmentCombinedOutputResources;
  @Uint32() int properties_limits_maxComputeSharedMemorySize;
  @Uint32() int properties_limits_maxComputeWorkGroupCount_0; @Uint32() int properties_limits_maxComputeWorkGroupCount_1; @Uint32() int properties_limits_maxComputeWorkGroupCount_2;
  @Uint32() int properties_limits_maxComputeWorkGroupInvocations;
  @Uint32() int properties_limits_maxComputeWorkGroupSize_0; @Uint32() int properties_limits_maxComputeWorkGroupSize_1; @Uint32() int properties_limits_maxComputeWorkGroupSize_2;
  @Uint32() int properties_limits_subPixelPrecisionBits;
  @Uint32() int properties_limits_subTexelPrecisionBits;
  @Uint32() int properties_limits_mipmapPrecisionBits;
  @Uint32() int properties_limits_maxDrawIndexedIndexValue;
  @Uint32() int properties_limits_maxDrawIndirectCount;
  @Float() double properties_limits_maxSamplerLodBias;
  @Float() double properties_limits_maxSamplerAnisotropy;
  @Uint32() int properties_limits_maxViewports;
  @Uint32() int properties_limits_maxViewportDimensions_0; @Uint32() int properties_limits_maxViewportDimensions_1;
  @Float() double properties_limits_viewportBoundsRange_0; @Float() double properties_limits_viewportBoundsRange_1;
  @Uint32() int properties_limits_viewportSubPixelBits;
  @Uint64() int properties_limits_minMemoryMapAlignment;
  @Uint64() int properties_limits_minTexelBufferOffsetAlignment;
  @Uint64() int properties_limits_minUniformBufferOffsetAlignment;
  @Uint64() int properties_limits_minStorageBufferOffsetAlignment;
  @Int32() int properties_limits_minTexelOffset;
  @Uint32() int properties_limits_maxTexelOffset;
  @Int32() int properties_limits_minTexelGatherOffset;
  @Uint32() int properties_limits_maxTexelGatherOffset;
  @Float() double properties_limits_minInterpolationOffset;
  @Float() double properties_limits_maxInterpolationOffset;
  @Uint32() int properties_limits_subPixelInterpolationOffsetBits;
  @Uint32() int properties_limits_maxFramebufferWidth;
  @Uint32() int properties_limits_maxFramebufferHeight;
  @Uint32() int properties_limits_maxFramebufferLayers;
  @Uint32() int properties_limits_framebufferColorSampleCounts;
  @Uint32() int properties_limits_framebufferDepthSampleCounts;
  @Uint32() int properties_limits_framebufferStencilSampleCounts;
  @Uint32() int properties_limits_framebufferNoAttachmentsSampleCounts;
  @Uint32() int properties_limits_maxColorAttachments;
  @Uint32() int properties_limits_sampledImageColorSampleCounts;
  @Uint32() int properties_limits_sampledImageIntegerSampleCounts;
  @Uint32() int properties_limits_sampledImageDepthSampleCounts;
  @Uint32() int properties_limits_sampledImageStencilSampleCounts;
  @Uint32() int properties_limits_storageImageSampleCounts;
  @Uint32() int properties_limits_maxSampleMaskWords;
  @Uint32() int properties_limits_timestampComputeAndGraphics;
  @Float() double properties_limits_timestampPeriod;
  @Uint32() int properties_limits_maxClipDistances;
  @Uint32() int properties_limits_maxCullDistances;
  @Uint32() int properties_limits_maxCombinedClipAndCullDistances;
  @Uint32() int properties_limits_discreteQueuePriorities;
  @Float() double properties_limits_pointSizeRange_0; @Float() double properties_limits_pointSizeRange_1;
  @Float() double properties_limits_lineWidthRange_0; @Float() double properties_limits_lineWidthRange_1;
  @Float() double properties_limits_pointSizeGranularity;
  @Float() double properties_limits_lineWidthGranularity;
  @Uint32() int properties_limits_strictLines;
  @Uint32() int properties_limits_standardSampleLocations;
  @Uint64() int properties_limits_optimalBufferCopyOffsetAlignment;
  @Uint64() int properties_limits_optimalBufferCopyRowPitchAlignment;
  @Uint64() int properties_limits_nonCoherentAtomSize;
  @Uint32() int properties_sparseProperties_residencyStandard2DBlockShape;
  @Uint32() int properties_sparseProperties_residencyStandard2DMultisampleBlockShape;
  @Uint32() int properties_sparseProperties_residencyStandard3DBlockShape;
  @Uint32() int properties_sparseProperties_residencyAlignedMipSize;
  @Uint32() int properties_sparseProperties_residencyNonResidentStrict;
}

class VkPhysicalDeviceProperties2KHR extends Struct {
}

class VkFormatProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int formatProperties_linearTilingFeatures;
  @Uint32() int formatProperties_optimalTilingFeatures;
  @Uint32() int formatProperties_bufferFeatures;
}

class VkFormatProperties2KHR extends Struct {
}

class VkImageFormatProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int imageFormatProperties_maxExtent_width;
  @Uint32() int imageFormatProperties_maxExtent_height;
  @Uint32() int imageFormatProperties_maxExtent_depth;
  @Uint32() int imageFormatProperties_maxMipLevels;
  @Uint32() int imageFormatProperties_maxArrayLayers;
  @Uint32() int imageFormatProperties_sampleCounts;
  @Uint64() int imageFormatProperties_maxResourceSize;
}

class VkImageFormatProperties2KHR extends Struct {
}

class VkPhysicalDeviceImageFormatInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int format;
  @Int32() int type;
  @Int32() int tiling;
  @Uint32() int usage;
  @Uint32() int flags;
}

class VkPhysicalDeviceImageFormatInfo2KHR extends Struct {
}

class VkQueueFamilyProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int queueFamilyProperties_queueFlags;
  @Uint32() int queueFamilyProperties_queueCount;
  @Uint32() int queueFamilyProperties_timestampValidBits;
  @Uint32() int queueFamilyProperties_minImageTransferGranularity_width;
  @Uint32() int queueFamilyProperties_minImageTransferGranularity_height;
  @Uint32() int queueFamilyProperties_minImageTransferGranularity_depth;
}

class VkQueueFamilyProperties2KHR extends Struct {
}

class VkPhysicalDeviceMemoryProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryProperties_memoryTypeCount;
  Pointer memoryProperties_memoryTypes_0; Pointer memoryProperties_memoryTypes_1; Pointer memoryProperties_memoryTypes_2; Pointer memoryProperties_memoryTypes_3; Pointer memoryProperties_memoryTypes_4; Pointer memoryProperties_memoryTypes_5; Pointer memoryProperties_memoryTypes_6; Pointer memoryProperties_memoryTypes_7; Pointer memoryProperties_memoryTypes_8; Pointer memoryProperties_memoryTypes_9; Pointer memoryProperties_memoryTypes_10; Pointer memoryProperties_memoryTypes_11; Pointer memoryProperties_memoryTypes_12; Pointer memoryProperties_memoryTypes_13; Pointer memoryProperties_memoryTypes_14; Pointer memoryProperties_memoryTypes_15; Pointer memoryProperties_memoryTypes_16; Pointer memoryProperties_memoryTypes_17; Pointer memoryProperties_memoryTypes_18; Pointer memoryProperties_memoryTypes_19; Pointer memoryProperties_memoryTypes_20; Pointer memoryProperties_memoryTypes_21; Pointer memoryProperties_memoryTypes_22; Pointer memoryProperties_memoryTypes_23; Pointer memoryProperties_memoryTypes_24; Pointer memoryProperties_memoryTypes_25; Pointer memoryProperties_memoryTypes_26; Pointer memoryProperties_memoryTypes_27; Pointer memoryProperties_memoryTypes_28; Pointer memoryProperties_memoryTypes_29; Pointer memoryProperties_memoryTypes_30; Pointer memoryProperties_memoryTypes_31;
  @Uint32() int memoryProperties_memoryHeapCount;
  Pointer memoryProperties_memoryHeaps_0; Pointer memoryProperties_memoryHeaps_1; Pointer memoryProperties_memoryHeaps_2; Pointer memoryProperties_memoryHeaps_3; Pointer memoryProperties_memoryHeaps_4; Pointer memoryProperties_memoryHeaps_5; Pointer memoryProperties_memoryHeaps_6; Pointer memoryProperties_memoryHeaps_7; Pointer memoryProperties_memoryHeaps_8; Pointer memoryProperties_memoryHeaps_9; Pointer memoryProperties_memoryHeaps_10; Pointer memoryProperties_memoryHeaps_11; Pointer memoryProperties_memoryHeaps_12; Pointer memoryProperties_memoryHeaps_13; Pointer memoryProperties_memoryHeaps_14; Pointer memoryProperties_memoryHeaps_15;
}

class VkPhysicalDeviceMemoryProperties2KHR extends Struct {
}

class VkSparseImageFormatProperties2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int properties_aspectMask;
  @Uint32() int properties_imageGranularity_width;
  @Uint32() int properties_imageGranularity_height;
  @Uint32() int properties_imageGranularity_depth;
  @Uint32() int properties_flags;
}

class VkSparseImageFormatProperties2KHR extends Struct {
}

class VkPhysicalDeviceSparseImageFormatInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int format;
  @Int32() int type;
  @Int32() int samples;
  @Uint32() int usage;
  @Int32() int tiling;
}

class VkPhysicalDeviceSparseImageFormatInfo2KHR extends Struct {
}

class VkPhysicalDevicePushDescriptorPropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxPushDescriptors;
}

class VkConformanceVersion extends Struct {
  @Uint8() int major;
  @Uint8() int minor;
  @Uint8() int subminor;
  @Uint8() int patch;
}

class VkConformanceVersionKHR extends Struct {
}

class VkPhysicalDeviceDriverProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int driverID;
  @Uint8() int driverName_0; @Uint8() int driverName_1; @Uint8() int driverName_2; @Uint8() int driverName_3; @Uint8() int driverName_4; @Uint8() int driverName_5; @Uint8() int driverName_6; @Uint8() int driverName_7; @Uint8() int driverName_8; @Uint8() int driverName_9; @Uint8() int driverName_10; @Uint8() int driverName_11; @Uint8() int driverName_12; @Uint8() int driverName_13; @Uint8() int driverName_14; @Uint8() int driverName_15; @Uint8() int driverName_16; @Uint8() int driverName_17; @Uint8() int driverName_18; @Uint8() int driverName_19; @Uint8() int driverName_20; @Uint8() int driverName_21; @Uint8() int driverName_22; @Uint8() int driverName_23; @Uint8() int driverName_24; @Uint8() int driverName_25; @Uint8() int driverName_26; @Uint8() int driverName_27; @Uint8() int driverName_28; @Uint8() int driverName_29; @Uint8() int driverName_30; @Uint8() int driverName_31; @Uint8() int driverName_32; @Uint8() int driverName_33; @Uint8() int driverName_34; @Uint8() int driverName_35; @Uint8() int driverName_36; @Uint8() int driverName_37; @Uint8() int driverName_38; @Uint8() int driverName_39; @Uint8() int driverName_40; @Uint8() int driverName_41; @Uint8() int driverName_42; @Uint8() int driverName_43; @Uint8() int driverName_44; @Uint8() int driverName_45; @Uint8() int driverName_46; @Uint8() int driverName_47; @Uint8() int driverName_48; @Uint8() int driverName_49; @Uint8() int driverName_50; @Uint8() int driverName_51; @Uint8() int driverName_52; @Uint8() int driverName_53; @Uint8() int driverName_54; @Uint8() int driverName_55; @Uint8() int driverName_56; @Uint8() int driverName_57; @Uint8() int driverName_58; @Uint8() int driverName_59; @Uint8() int driverName_60; @Uint8() int driverName_61; @Uint8() int driverName_62; @Uint8() int driverName_63; @Uint8() int driverName_64; @Uint8() int driverName_65; @Uint8() int driverName_66; @Uint8() int driverName_67; @Uint8() int driverName_68; @Uint8() int driverName_69; @Uint8() int driverName_70; @Uint8() int driverName_71; @Uint8() int driverName_72; @Uint8() int driverName_73; @Uint8() int driverName_74; @Uint8() int driverName_75; @Uint8() int driverName_76; @Uint8() int driverName_77; @Uint8() int driverName_78; @Uint8() int driverName_79; @Uint8() int driverName_80; @Uint8() int driverName_81; @Uint8() int driverName_82; @Uint8() int driverName_83; @Uint8() int driverName_84; @Uint8() int driverName_85; @Uint8() int driverName_86; @Uint8() int driverName_87; @Uint8() int driverName_88; @Uint8() int driverName_89; @Uint8() int driverName_90; @Uint8() int driverName_91; @Uint8() int driverName_92; @Uint8() int driverName_93; @Uint8() int driverName_94; @Uint8() int driverName_95; @Uint8() int driverName_96; @Uint8() int driverName_97; @Uint8() int driverName_98; @Uint8() int driverName_99; @Uint8() int driverName_100; @Uint8() int driverName_101; @Uint8() int driverName_102; @Uint8() int driverName_103; @Uint8() int driverName_104; @Uint8() int driverName_105; @Uint8() int driverName_106; @Uint8() int driverName_107; @Uint8() int driverName_108; @Uint8() int driverName_109; @Uint8() int driverName_110; @Uint8() int driverName_111; @Uint8() int driverName_112; @Uint8() int driverName_113; @Uint8() int driverName_114; @Uint8() int driverName_115; @Uint8() int driverName_116; @Uint8() int driverName_117; @Uint8() int driverName_118; @Uint8() int driverName_119; @Uint8() int driverName_120; @Uint8() int driverName_121; @Uint8() int driverName_122; @Uint8() int driverName_123; @Uint8() int driverName_124; @Uint8() int driverName_125; @Uint8() int driverName_126; @Uint8() int driverName_127; @Uint8() int driverName_128; @Uint8() int driverName_129; @Uint8() int driverName_130; @Uint8() int driverName_131; @Uint8() int driverName_132; @Uint8() int driverName_133; @Uint8() int driverName_134; @Uint8() int driverName_135; @Uint8() int driverName_136; @Uint8() int driverName_137; @Uint8() int driverName_138; @Uint8() int driverName_139; @Uint8() int driverName_140; @Uint8() int driverName_141; @Uint8() int driverName_142; @Uint8() int driverName_143; @Uint8() int driverName_144; @Uint8() int driverName_145; @Uint8() int driverName_146; @Uint8() int driverName_147; @Uint8() int driverName_148; @Uint8() int driverName_149; @Uint8() int driverName_150; @Uint8() int driverName_151; @Uint8() int driverName_152; @Uint8() int driverName_153; @Uint8() int driverName_154; @Uint8() int driverName_155; @Uint8() int driverName_156; @Uint8() int driverName_157; @Uint8() int driverName_158; @Uint8() int driverName_159; @Uint8() int driverName_160; @Uint8() int driverName_161; @Uint8() int driverName_162; @Uint8() int driverName_163; @Uint8() int driverName_164; @Uint8() int driverName_165; @Uint8() int driverName_166; @Uint8() int driverName_167; @Uint8() int driverName_168; @Uint8() int driverName_169; @Uint8() int driverName_170; @Uint8() int driverName_171; @Uint8() int driverName_172; @Uint8() int driverName_173; @Uint8() int driverName_174; @Uint8() int driverName_175; @Uint8() int driverName_176; @Uint8() int driverName_177; @Uint8() int driverName_178; @Uint8() int driverName_179; @Uint8() int driverName_180; @Uint8() int driverName_181; @Uint8() int driverName_182; @Uint8() int driverName_183; @Uint8() int driverName_184; @Uint8() int driverName_185; @Uint8() int driverName_186; @Uint8() int driverName_187; @Uint8() int driverName_188; @Uint8() int driverName_189; @Uint8() int driverName_190; @Uint8() int driverName_191; @Uint8() int driverName_192; @Uint8() int driverName_193; @Uint8() int driverName_194; @Uint8() int driverName_195; @Uint8() int driverName_196; @Uint8() int driverName_197; @Uint8() int driverName_198; @Uint8() int driverName_199; @Uint8() int driverName_200; @Uint8() int driverName_201; @Uint8() int driverName_202; @Uint8() int driverName_203; @Uint8() int driverName_204; @Uint8() int driverName_205; @Uint8() int driverName_206; @Uint8() int driverName_207; @Uint8() int driverName_208; @Uint8() int driverName_209; @Uint8() int driverName_210; @Uint8() int driverName_211; @Uint8() int driverName_212; @Uint8() int driverName_213; @Uint8() int driverName_214; @Uint8() int driverName_215; @Uint8() int driverName_216; @Uint8() int driverName_217; @Uint8() int driverName_218; @Uint8() int driverName_219; @Uint8() int driverName_220; @Uint8() int driverName_221; @Uint8() int driverName_222; @Uint8() int driverName_223; @Uint8() int driverName_224; @Uint8() int driverName_225; @Uint8() int driverName_226; @Uint8() int driverName_227; @Uint8() int driverName_228; @Uint8() int driverName_229; @Uint8() int driverName_230; @Uint8() int driverName_231; @Uint8() int driverName_232; @Uint8() int driverName_233; @Uint8() int driverName_234; @Uint8() int driverName_235; @Uint8() int driverName_236; @Uint8() int driverName_237; @Uint8() int driverName_238; @Uint8() int driverName_239; @Uint8() int driverName_240; @Uint8() int driverName_241; @Uint8() int driverName_242; @Uint8() int driverName_243; @Uint8() int driverName_244; @Uint8() int driverName_245; @Uint8() int driverName_246; @Uint8() int driverName_247; @Uint8() int driverName_248; @Uint8() int driverName_249; @Uint8() int driverName_250; @Uint8() int driverName_251; @Uint8() int driverName_252; @Uint8() int driverName_253; @Uint8() int driverName_254; @Uint8() int driverName_255;
  String get driverName {
    var bytes = [driverName_0, driverName_1, driverName_2, driverName_3, driverName_4, driverName_5, driverName_6, driverName_7, driverName_8, driverName_9, driverName_10, driverName_11, driverName_12, driverName_13, driverName_14, driverName_15, driverName_16, driverName_17, driverName_18, driverName_19, driverName_20, driverName_21, driverName_22, driverName_23, driverName_24, driverName_25, driverName_26, driverName_27, driverName_28, driverName_29, driverName_30, driverName_31, driverName_32, driverName_33, driverName_34, driverName_35, driverName_36, driverName_37, driverName_38, driverName_39, driverName_40, driverName_41, driverName_42, driverName_43, driverName_44, driverName_45, driverName_46, driverName_47, driverName_48, driverName_49, driverName_50, driverName_51, driverName_52, driverName_53, driverName_54, driverName_55, driverName_56, driverName_57, driverName_58, driverName_59, driverName_60, driverName_61, driverName_62, driverName_63, driverName_64, driverName_65, driverName_66, driverName_67, driverName_68, driverName_69, driverName_70, driverName_71, driverName_72, driverName_73, driverName_74, driverName_75, driverName_76, driverName_77, driverName_78, driverName_79, driverName_80, driverName_81, driverName_82, driverName_83, driverName_84, driverName_85, driverName_86, driverName_87, driverName_88, driverName_89, driverName_90, driverName_91, driverName_92, driverName_93, driverName_94, driverName_95, driverName_96, driverName_97, driverName_98, driverName_99, driverName_100, driverName_101, driverName_102, driverName_103, driverName_104, driverName_105, driverName_106, driverName_107, driverName_108, driverName_109, driverName_110, driverName_111, driverName_112, driverName_113, driverName_114, driverName_115, driverName_116, driverName_117, driverName_118, driverName_119, driverName_120, driverName_121, driverName_122, driverName_123, driverName_124, driverName_125, driverName_126, driverName_127, driverName_128, driverName_129, driverName_130, driverName_131, driverName_132, driverName_133, driverName_134, driverName_135, driverName_136, driverName_137, driverName_138, driverName_139, driverName_140, driverName_141, driverName_142, driverName_143, driverName_144, driverName_145, driverName_146, driverName_147, driverName_148, driverName_149, driverName_150, driverName_151, driverName_152, driverName_153, driverName_154, driverName_155, driverName_156, driverName_157, driverName_158, driverName_159, driverName_160, driverName_161, driverName_162, driverName_163, driverName_164, driverName_165, driverName_166, driverName_167, driverName_168, driverName_169, driverName_170, driverName_171, driverName_172, driverName_173, driverName_174, driverName_175, driverName_176, driverName_177, driverName_178, driverName_179, driverName_180, driverName_181, driverName_182, driverName_183, driverName_184, driverName_185, driverName_186, driverName_187, driverName_188, driverName_189, driverName_190, driverName_191, driverName_192, driverName_193, driverName_194, driverName_195, driverName_196, driverName_197, driverName_198, driverName_199, driverName_200, driverName_201, driverName_202, driverName_203, driverName_204, driverName_205, driverName_206, driverName_207, driverName_208, driverName_209, driverName_210, driverName_211, driverName_212, driverName_213, driverName_214, driverName_215, driverName_216, driverName_217, driverName_218, driverName_219, driverName_220, driverName_221, driverName_222, driverName_223, driverName_224, driverName_225, driverName_226, driverName_227, driverName_228, driverName_229, driverName_230, driverName_231, driverName_232, driverName_233, driverName_234, driverName_235, driverName_236, driverName_237, driverName_238, driverName_239, driverName_240, driverName_241, driverName_242, driverName_243, driverName_244, driverName_245, driverName_246, driverName_247, driverName_248, driverName_249, driverName_250, driverName_251, driverName_252, driverName_253, driverName_254, driverName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverName_0 = bytes[0]; } if (bytes.isNotEmpty) { driverName_1 = bytes[1]; } if (bytes.isNotEmpty) { driverName_2 = bytes[2]; } if (bytes.isNotEmpty) { driverName_3 = bytes[3]; } if (bytes.isNotEmpty) { driverName_4 = bytes[4]; } if (bytes.isNotEmpty) { driverName_5 = bytes[5]; } if (bytes.isNotEmpty) { driverName_6 = bytes[6]; } if (bytes.isNotEmpty) { driverName_7 = bytes[7]; } if (bytes.isNotEmpty) { driverName_8 = bytes[8]; } if (bytes.isNotEmpty) { driverName_9 = bytes[9]; } if (bytes.isNotEmpty) { driverName_10 = bytes[10]; } if (bytes.isNotEmpty) { driverName_11 = bytes[11]; } if (bytes.isNotEmpty) { driverName_12 = bytes[12]; } if (bytes.isNotEmpty) { driverName_13 = bytes[13]; } if (bytes.isNotEmpty) { driverName_14 = bytes[14]; } if (bytes.isNotEmpty) { driverName_15 = bytes[15]; } if (bytes.isNotEmpty) { driverName_16 = bytes[16]; } if (bytes.isNotEmpty) { driverName_17 = bytes[17]; } if (bytes.isNotEmpty) { driverName_18 = bytes[18]; } if (bytes.isNotEmpty) { driverName_19 = bytes[19]; } if (bytes.isNotEmpty) { driverName_20 = bytes[20]; } if (bytes.isNotEmpty) { driverName_21 = bytes[21]; } if (bytes.isNotEmpty) { driverName_22 = bytes[22]; } if (bytes.isNotEmpty) { driverName_23 = bytes[23]; } if (bytes.isNotEmpty) { driverName_24 = bytes[24]; } if (bytes.isNotEmpty) { driverName_25 = bytes[25]; } if (bytes.isNotEmpty) { driverName_26 = bytes[26]; } if (bytes.isNotEmpty) { driverName_27 = bytes[27]; } if (bytes.isNotEmpty) { driverName_28 = bytes[28]; } if (bytes.isNotEmpty) { driverName_29 = bytes[29]; } if (bytes.isNotEmpty) { driverName_30 = bytes[30]; } if (bytes.isNotEmpty) { driverName_31 = bytes[31]; } if (bytes.isNotEmpty) { driverName_32 = bytes[32]; } if (bytes.isNotEmpty) { driverName_33 = bytes[33]; } if (bytes.isNotEmpty) { driverName_34 = bytes[34]; } if (bytes.isNotEmpty) { driverName_35 = bytes[35]; } if (bytes.isNotEmpty) { driverName_36 = bytes[36]; } if (bytes.isNotEmpty) { driverName_37 = bytes[37]; } if (bytes.isNotEmpty) { driverName_38 = bytes[38]; } if (bytes.isNotEmpty) { driverName_39 = bytes[39]; } if (bytes.isNotEmpty) { driverName_40 = bytes[40]; } if (bytes.isNotEmpty) { driverName_41 = bytes[41]; } if (bytes.isNotEmpty) { driverName_42 = bytes[42]; } if (bytes.isNotEmpty) { driverName_43 = bytes[43]; } if (bytes.isNotEmpty) { driverName_44 = bytes[44]; } if (bytes.isNotEmpty) { driverName_45 = bytes[45]; } if (bytes.isNotEmpty) { driverName_46 = bytes[46]; } if (bytes.isNotEmpty) { driverName_47 = bytes[47]; } if (bytes.isNotEmpty) { driverName_48 = bytes[48]; } if (bytes.isNotEmpty) { driverName_49 = bytes[49]; } if (bytes.isNotEmpty) { driverName_50 = bytes[50]; } if (bytes.isNotEmpty) { driverName_51 = bytes[51]; } if (bytes.isNotEmpty) { driverName_52 = bytes[52]; } if (bytes.isNotEmpty) { driverName_53 = bytes[53]; } if (bytes.isNotEmpty) { driverName_54 = bytes[54]; } if (bytes.isNotEmpty) { driverName_55 = bytes[55]; } if (bytes.isNotEmpty) { driverName_56 = bytes[56]; } if (bytes.isNotEmpty) { driverName_57 = bytes[57]; } if (bytes.isNotEmpty) { driverName_58 = bytes[58]; } if (bytes.isNotEmpty) { driverName_59 = bytes[59]; } if (bytes.isNotEmpty) { driverName_60 = bytes[60]; } if (bytes.isNotEmpty) { driverName_61 = bytes[61]; } if (bytes.isNotEmpty) { driverName_62 = bytes[62]; } if (bytes.isNotEmpty) { driverName_63 = bytes[63]; } if (bytes.isNotEmpty) { driverName_64 = bytes[64]; } if (bytes.isNotEmpty) { driverName_65 = bytes[65]; } if (bytes.isNotEmpty) { driverName_66 = bytes[66]; } if (bytes.isNotEmpty) { driverName_67 = bytes[67]; } if (bytes.isNotEmpty) { driverName_68 = bytes[68]; } if (bytes.isNotEmpty) { driverName_69 = bytes[69]; } if (bytes.isNotEmpty) { driverName_70 = bytes[70]; } if (bytes.isNotEmpty) { driverName_71 = bytes[71]; } if (bytes.isNotEmpty) { driverName_72 = bytes[72]; } if (bytes.isNotEmpty) { driverName_73 = bytes[73]; } if (bytes.isNotEmpty) { driverName_74 = bytes[74]; } if (bytes.isNotEmpty) { driverName_75 = bytes[75]; } if (bytes.isNotEmpty) { driverName_76 = bytes[76]; } if (bytes.isNotEmpty) { driverName_77 = bytes[77]; } if (bytes.isNotEmpty) { driverName_78 = bytes[78]; } if (bytes.isNotEmpty) { driverName_79 = bytes[79]; } if (bytes.isNotEmpty) { driverName_80 = bytes[80]; } if (bytes.isNotEmpty) { driverName_81 = bytes[81]; } if (bytes.isNotEmpty) { driverName_82 = bytes[82]; } if (bytes.isNotEmpty) { driverName_83 = bytes[83]; } if (bytes.isNotEmpty) { driverName_84 = bytes[84]; } if (bytes.isNotEmpty) { driverName_85 = bytes[85]; } if (bytes.isNotEmpty) { driverName_86 = bytes[86]; } if (bytes.isNotEmpty) { driverName_87 = bytes[87]; } if (bytes.isNotEmpty) { driverName_88 = bytes[88]; } if (bytes.isNotEmpty) { driverName_89 = bytes[89]; } if (bytes.isNotEmpty) { driverName_90 = bytes[90]; } if (bytes.isNotEmpty) { driverName_91 = bytes[91]; } if (bytes.isNotEmpty) { driverName_92 = bytes[92]; } if (bytes.isNotEmpty) { driverName_93 = bytes[93]; } if (bytes.isNotEmpty) { driverName_94 = bytes[94]; } if (bytes.isNotEmpty) { driverName_95 = bytes[95]; } if (bytes.isNotEmpty) { driverName_96 = bytes[96]; } if (bytes.isNotEmpty) { driverName_97 = bytes[97]; } if (bytes.isNotEmpty) { driverName_98 = bytes[98]; } if (bytes.isNotEmpty) { driverName_99 = bytes[99]; } if (bytes.isNotEmpty) { driverName_100 = bytes[100]; } if (bytes.isNotEmpty) { driverName_101 = bytes[101]; } if (bytes.isNotEmpty) { driverName_102 = bytes[102]; } if (bytes.isNotEmpty) { driverName_103 = bytes[103]; } if (bytes.isNotEmpty) { driverName_104 = bytes[104]; } if (bytes.isNotEmpty) { driverName_105 = bytes[105]; } if (bytes.isNotEmpty) { driverName_106 = bytes[106]; } if (bytes.isNotEmpty) { driverName_107 = bytes[107]; } if (bytes.isNotEmpty) { driverName_108 = bytes[108]; } if (bytes.isNotEmpty) { driverName_109 = bytes[109]; } if (bytes.isNotEmpty) { driverName_110 = bytes[110]; } if (bytes.isNotEmpty) { driverName_111 = bytes[111]; } if (bytes.isNotEmpty) { driverName_112 = bytes[112]; } if (bytes.isNotEmpty) { driverName_113 = bytes[113]; } if (bytes.isNotEmpty) { driverName_114 = bytes[114]; } if (bytes.isNotEmpty) { driverName_115 = bytes[115]; } if (bytes.isNotEmpty) { driverName_116 = bytes[116]; } if (bytes.isNotEmpty) { driverName_117 = bytes[117]; } if (bytes.isNotEmpty) { driverName_118 = bytes[118]; } if (bytes.isNotEmpty) { driverName_119 = bytes[119]; } if (bytes.isNotEmpty) { driverName_120 = bytes[120]; } if (bytes.isNotEmpty) { driverName_121 = bytes[121]; } if (bytes.isNotEmpty) { driverName_122 = bytes[122]; } if (bytes.isNotEmpty) { driverName_123 = bytes[123]; } if (bytes.isNotEmpty) { driverName_124 = bytes[124]; } if (bytes.isNotEmpty) { driverName_125 = bytes[125]; } if (bytes.isNotEmpty) { driverName_126 = bytes[126]; } if (bytes.isNotEmpty) { driverName_127 = bytes[127]; } if (bytes.isNotEmpty) { driverName_128 = bytes[128]; } if (bytes.isNotEmpty) { driverName_129 = bytes[129]; } if (bytes.isNotEmpty) { driverName_130 = bytes[130]; } if (bytes.isNotEmpty) { driverName_131 = bytes[131]; } if (bytes.isNotEmpty) { driverName_132 = bytes[132]; } if (bytes.isNotEmpty) { driverName_133 = bytes[133]; } if (bytes.isNotEmpty) { driverName_134 = bytes[134]; } if (bytes.isNotEmpty) { driverName_135 = bytes[135]; } if (bytes.isNotEmpty) { driverName_136 = bytes[136]; } if (bytes.isNotEmpty) { driverName_137 = bytes[137]; } if (bytes.isNotEmpty) { driverName_138 = bytes[138]; } if (bytes.isNotEmpty) { driverName_139 = bytes[139]; } if (bytes.isNotEmpty) { driverName_140 = bytes[140]; } if (bytes.isNotEmpty) { driverName_141 = bytes[141]; } if (bytes.isNotEmpty) { driverName_142 = bytes[142]; } if (bytes.isNotEmpty) { driverName_143 = bytes[143]; } if (bytes.isNotEmpty) { driverName_144 = bytes[144]; } if (bytes.isNotEmpty) { driverName_145 = bytes[145]; } if (bytes.isNotEmpty) { driverName_146 = bytes[146]; } if (bytes.isNotEmpty) { driverName_147 = bytes[147]; } if (bytes.isNotEmpty) { driverName_148 = bytes[148]; } if (bytes.isNotEmpty) { driverName_149 = bytes[149]; } if (bytes.isNotEmpty) { driverName_150 = bytes[150]; } if (bytes.isNotEmpty) { driverName_151 = bytes[151]; } if (bytes.isNotEmpty) { driverName_152 = bytes[152]; } if (bytes.isNotEmpty) { driverName_153 = bytes[153]; } if (bytes.isNotEmpty) { driverName_154 = bytes[154]; } if (bytes.isNotEmpty) { driverName_155 = bytes[155]; } if (bytes.isNotEmpty) { driverName_156 = bytes[156]; } if (bytes.isNotEmpty) { driverName_157 = bytes[157]; } if (bytes.isNotEmpty) { driverName_158 = bytes[158]; } if (bytes.isNotEmpty) { driverName_159 = bytes[159]; } if (bytes.isNotEmpty) { driverName_160 = bytes[160]; } if (bytes.isNotEmpty) { driverName_161 = bytes[161]; } if (bytes.isNotEmpty) { driverName_162 = bytes[162]; } if (bytes.isNotEmpty) { driverName_163 = bytes[163]; } if (bytes.isNotEmpty) { driverName_164 = bytes[164]; } if (bytes.isNotEmpty) { driverName_165 = bytes[165]; } if (bytes.isNotEmpty) { driverName_166 = bytes[166]; } if (bytes.isNotEmpty) { driverName_167 = bytes[167]; } if (bytes.isNotEmpty) { driverName_168 = bytes[168]; } if (bytes.isNotEmpty) { driverName_169 = bytes[169]; } if (bytes.isNotEmpty) { driverName_170 = bytes[170]; } if (bytes.isNotEmpty) { driverName_171 = bytes[171]; } if (bytes.isNotEmpty) { driverName_172 = bytes[172]; } if (bytes.isNotEmpty) { driverName_173 = bytes[173]; } if (bytes.isNotEmpty) { driverName_174 = bytes[174]; } if (bytes.isNotEmpty) { driverName_175 = bytes[175]; } if (bytes.isNotEmpty) { driverName_176 = bytes[176]; } if (bytes.isNotEmpty) { driverName_177 = bytes[177]; } if (bytes.isNotEmpty) { driverName_178 = bytes[178]; } if (bytes.isNotEmpty) { driverName_179 = bytes[179]; } if (bytes.isNotEmpty) { driverName_180 = bytes[180]; } if (bytes.isNotEmpty) { driverName_181 = bytes[181]; } if (bytes.isNotEmpty) { driverName_182 = bytes[182]; } if (bytes.isNotEmpty) { driverName_183 = bytes[183]; } if (bytes.isNotEmpty) { driverName_184 = bytes[184]; } if (bytes.isNotEmpty) { driverName_185 = bytes[185]; } if (bytes.isNotEmpty) { driverName_186 = bytes[186]; } if (bytes.isNotEmpty) { driverName_187 = bytes[187]; } if (bytes.isNotEmpty) { driverName_188 = bytes[188]; } if (bytes.isNotEmpty) { driverName_189 = bytes[189]; } if (bytes.isNotEmpty) { driverName_190 = bytes[190]; } if (bytes.isNotEmpty) { driverName_191 = bytes[191]; } if (bytes.isNotEmpty) { driverName_192 = bytes[192]; } if (bytes.isNotEmpty) { driverName_193 = bytes[193]; } if (bytes.isNotEmpty) { driverName_194 = bytes[194]; } if (bytes.isNotEmpty) { driverName_195 = bytes[195]; } if (bytes.isNotEmpty) { driverName_196 = bytes[196]; } if (bytes.isNotEmpty) { driverName_197 = bytes[197]; } if (bytes.isNotEmpty) { driverName_198 = bytes[198]; } if (bytes.isNotEmpty) { driverName_199 = bytes[199]; } if (bytes.isNotEmpty) { driverName_200 = bytes[200]; } if (bytes.isNotEmpty) { driverName_201 = bytes[201]; } if (bytes.isNotEmpty) { driverName_202 = bytes[202]; } if (bytes.isNotEmpty) { driverName_203 = bytes[203]; } if (bytes.isNotEmpty) { driverName_204 = bytes[204]; } if (bytes.isNotEmpty) { driverName_205 = bytes[205]; } if (bytes.isNotEmpty) { driverName_206 = bytes[206]; } if (bytes.isNotEmpty) { driverName_207 = bytes[207]; } if (bytes.isNotEmpty) { driverName_208 = bytes[208]; } if (bytes.isNotEmpty) { driverName_209 = bytes[209]; } if (bytes.isNotEmpty) { driverName_210 = bytes[210]; } if (bytes.isNotEmpty) { driverName_211 = bytes[211]; } if (bytes.isNotEmpty) { driverName_212 = bytes[212]; } if (bytes.isNotEmpty) { driverName_213 = bytes[213]; } if (bytes.isNotEmpty) { driverName_214 = bytes[214]; } if (bytes.isNotEmpty) { driverName_215 = bytes[215]; } if (bytes.isNotEmpty) { driverName_216 = bytes[216]; } if (bytes.isNotEmpty) { driverName_217 = bytes[217]; } if (bytes.isNotEmpty) { driverName_218 = bytes[218]; } if (bytes.isNotEmpty) { driverName_219 = bytes[219]; } if (bytes.isNotEmpty) { driverName_220 = bytes[220]; } if (bytes.isNotEmpty) { driverName_221 = bytes[221]; } if (bytes.isNotEmpty) { driverName_222 = bytes[222]; } if (bytes.isNotEmpty) { driverName_223 = bytes[223]; } if (bytes.isNotEmpty) { driverName_224 = bytes[224]; } if (bytes.isNotEmpty) { driverName_225 = bytes[225]; } if (bytes.isNotEmpty) { driverName_226 = bytes[226]; } if (bytes.isNotEmpty) { driverName_227 = bytes[227]; } if (bytes.isNotEmpty) { driverName_228 = bytes[228]; } if (bytes.isNotEmpty) { driverName_229 = bytes[229]; } if (bytes.isNotEmpty) { driverName_230 = bytes[230]; } if (bytes.isNotEmpty) { driverName_231 = bytes[231]; } if (bytes.isNotEmpty) { driverName_232 = bytes[232]; } if (bytes.isNotEmpty) { driverName_233 = bytes[233]; } if (bytes.isNotEmpty) { driverName_234 = bytes[234]; } if (bytes.isNotEmpty) { driverName_235 = bytes[235]; } if (bytes.isNotEmpty) { driverName_236 = bytes[236]; } if (bytes.isNotEmpty) { driverName_237 = bytes[237]; } if (bytes.isNotEmpty) { driverName_238 = bytes[238]; } if (bytes.isNotEmpty) { driverName_239 = bytes[239]; } if (bytes.isNotEmpty) { driverName_240 = bytes[240]; } if (bytes.isNotEmpty) { driverName_241 = bytes[241]; } if (bytes.isNotEmpty) { driverName_242 = bytes[242]; } if (bytes.isNotEmpty) { driverName_243 = bytes[243]; } if (bytes.isNotEmpty) { driverName_244 = bytes[244]; } if (bytes.isNotEmpty) { driverName_245 = bytes[245]; } if (bytes.isNotEmpty) { driverName_246 = bytes[246]; } if (bytes.isNotEmpty) { driverName_247 = bytes[247]; } if (bytes.isNotEmpty) { driverName_248 = bytes[248]; } if (bytes.isNotEmpty) { driverName_249 = bytes[249]; } if (bytes.isNotEmpty) { driverName_250 = bytes[250]; } if (bytes.isNotEmpty) { driverName_251 = bytes[251]; } if (bytes.isNotEmpty) { driverName_252 = bytes[252]; } if (bytes.isNotEmpty) { driverName_253 = bytes[253]; } if (bytes.isNotEmpty) { driverName_254 = bytes[254]; } if (bytes.isNotEmpty) { driverName_255 = bytes[255]; }
  }
  @Uint8() int driverInfo_0; @Uint8() int driverInfo_1; @Uint8() int driverInfo_2; @Uint8() int driverInfo_3; @Uint8() int driverInfo_4; @Uint8() int driverInfo_5; @Uint8() int driverInfo_6; @Uint8() int driverInfo_7; @Uint8() int driverInfo_8; @Uint8() int driverInfo_9; @Uint8() int driverInfo_10; @Uint8() int driverInfo_11; @Uint8() int driverInfo_12; @Uint8() int driverInfo_13; @Uint8() int driverInfo_14; @Uint8() int driverInfo_15; @Uint8() int driverInfo_16; @Uint8() int driverInfo_17; @Uint8() int driverInfo_18; @Uint8() int driverInfo_19; @Uint8() int driverInfo_20; @Uint8() int driverInfo_21; @Uint8() int driverInfo_22; @Uint8() int driverInfo_23; @Uint8() int driverInfo_24; @Uint8() int driverInfo_25; @Uint8() int driverInfo_26; @Uint8() int driverInfo_27; @Uint8() int driverInfo_28; @Uint8() int driverInfo_29; @Uint8() int driverInfo_30; @Uint8() int driverInfo_31; @Uint8() int driverInfo_32; @Uint8() int driverInfo_33; @Uint8() int driverInfo_34; @Uint8() int driverInfo_35; @Uint8() int driverInfo_36; @Uint8() int driverInfo_37; @Uint8() int driverInfo_38; @Uint8() int driverInfo_39; @Uint8() int driverInfo_40; @Uint8() int driverInfo_41; @Uint8() int driverInfo_42; @Uint8() int driverInfo_43; @Uint8() int driverInfo_44; @Uint8() int driverInfo_45; @Uint8() int driverInfo_46; @Uint8() int driverInfo_47; @Uint8() int driverInfo_48; @Uint8() int driverInfo_49; @Uint8() int driverInfo_50; @Uint8() int driverInfo_51; @Uint8() int driverInfo_52; @Uint8() int driverInfo_53; @Uint8() int driverInfo_54; @Uint8() int driverInfo_55; @Uint8() int driverInfo_56; @Uint8() int driverInfo_57; @Uint8() int driverInfo_58; @Uint8() int driverInfo_59; @Uint8() int driverInfo_60; @Uint8() int driverInfo_61; @Uint8() int driverInfo_62; @Uint8() int driverInfo_63; @Uint8() int driverInfo_64; @Uint8() int driverInfo_65; @Uint8() int driverInfo_66; @Uint8() int driverInfo_67; @Uint8() int driverInfo_68; @Uint8() int driverInfo_69; @Uint8() int driverInfo_70; @Uint8() int driverInfo_71; @Uint8() int driverInfo_72; @Uint8() int driverInfo_73; @Uint8() int driverInfo_74; @Uint8() int driverInfo_75; @Uint8() int driverInfo_76; @Uint8() int driverInfo_77; @Uint8() int driverInfo_78; @Uint8() int driverInfo_79; @Uint8() int driverInfo_80; @Uint8() int driverInfo_81; @Uint8() int driverInfo_82; @Uint8() int driverInfo_83; @Uint8() int driverInfo_84; @Uint8() int driverInfo_85; @Uint8() int driverInfo_86; @Uint8() int driverInfo_87; @Uint8() int driverInfo_88; @Uint8() int driverInfo_89; @Uint8() int driverInfo_90; @Uint8() int driverInfo_91; @Uint8() int driverInfo_92; @Uint8() int driverInfo_93; @Uint8() int driverInfo_94; @Uint8() int driverInfo_95; @Uint8() int driverInfo_96; @Uint8() int driverInfo_97; @Uint8() int driverInfo_98; @Uint8() int driverInfo_99; @Uint8() int driverInfo_100; @Uint8() int driverInfo_101; @Uint8() int driverInfo_102; @Uint8() int driverInfo_103; @Uint8() int driverInfo_104; @Uint8() int driverInfo_105; @Uint8() int driverInfo_106; @Uint8() int driverInfo_107; @Uint8() int driverInfo_108; @Uint8() int driverInfo_109; @Uint8() int driverInfo_110; @Uint8() int driverInfo_111; @Uint8() int driverInfo_112; @Uint8() int driverInfo_113; @Uint8() int driverInfo_114; @Uint8() int driverInfo_115; @Uint8() int driverInfo_116; @Uint8() int driverInfo_117; @Uint8() int driverInfo_118; @Uint8() int driverInfo_119; @Uint8() int driverInfo_120; @Uint8() int driverInfo_121; @Uint8() int driverInfo_122; @Uint8() int driverInfo_123; @Uint8() int driverInfo_124; @Uint8() int driverInfo_125; @Uint8() int driverInfo_126; @Uint8() int driverInfo_127; @Uint8() int driverInfo_128; @Uint8() int driverInfo_129; @Uint8() int driverInfo_130; @Uint8() int driverInfo_131; @Uint8() int driverInfo_132; @Uint8() int driverInfo_133; @Uint8() int driverInfo_134; @Uint8() int driverInfo_135; @Uint8() int driverInfo_136; @Uint8() int driverInfo_137; @Uint8() int driverInfo_138; @Uint8() int driverInfo_139; @Uint8() int driverInfo_140; @Uint8() int driverInfo_141; @Uint8() int driverInfo_142; @Uint8() int driverInfo_143; @Uint8() int driverInfo_144; @Uint8() int driverInfo_145; @Uint8() int driverInfo_146; @Uint8() int driverInfo_147; @Uint8() int driverInfo_148; @Uint8() int driverInfo_149; @Uint8() int driverInfo_150; @Uint8() int driverInfo_151; @Uint8() int driverInfo_152; @Uint8() int driverInfo_153; @Uint8() int driverInfo_154; @Uint8() int driverInfo_155; @Uint8() int driverInfo_156; @Uint8() int driverInfo_157; @Uint8() int driverInfo_158; @Uint8() int driverInfo_159; @Uint8() int driverInfo_160; @Uint8() int driverInfo_161; @Uint8() int driverInfo_162; @Uint8() int driverInfo_163; @Uint8() int driverInfo_164; @Uint8() int driverInfo_165; @Uint8() int driverInfo_166; @Uint8() int driverInfo_167; @Uint8() int driverInfo_168; @Uint8() int driverInfo_169; @Uint8() int driverInfo_170; @Uint8() int driverInfo_171; @Uint8() int driverInfo_172; @Uint8() int driverInfo_173; @Uint8() int driverInfo_174; @Uint8() int driverInfo_175; @Uint8() int driverInfo_176; @Uint8() int driverInfo_177; @Uint8() int driverInfo_178; @Uint8() int driverInfo_179; @Uint8() int driverInfo_180; @Uint8() int driverInfo_181; @Uint8() int driverInfo_182; @Uint8() int driverInfo_183; @Uint8() int driverInfo_184; @Uint8() int driverInfo_185; @Uint8() int driverInfo_186; @Uint8() int driverInfo_187; @Uint8() int driverInfo_188; @Uint8() int driverInfo_189; @Uint8() int driverInfo_190; @Uint8() int driverInfo_191; @Uint8() int driverInfo_192; @Uint8() int driverInfo_193; @Uint8() int driverInfo_194; @Uint8() int driverInfo_195; @Uint8() int driverInfo_196; @Uint8() int driverInfo_197; @Uint8() int driverInfo_198; @Uint8() int driverInfo_199; @Uint8() int driverInfo_200; @Uint8() int driverInfo_201; @Uint8() int driverInfo_202; @Uint8() int driverInfo_203; @Uint8() int driverInfo_204; @Uint8() int driverInfo_205; @Uint8() int driverInfo_206; @Uint8() int driverInfo_207; @Uint8() int driverInfo_208; @Uint8() int driverInfo_209; @Uint8() int driverInfo_210; @Uint8() int driverInfo_211; @Uint8() int driverInfo_212; @Uint8() int driverInfo_213; @Uint8() int driverInfo_214; @Uint8() int driverInfo_215; @Uint8() int driverInfo_216; @Uint8() int driverInfo_217; @Uint8() int driverInfo_218; @Uint8() int driverInfo_219; @Uint8() int driverInfo_220; @Uint8() int driverInfo_221; @Uint8() int driverInfo_222; @Uint8() int driverInfo_223; @Uint8() int driverInfo_224; @Uint8() int driverInfo_225; @Uint8() int driverInfo_226; @Uint8() int driverInfo_227; @Uint8() int driverInfo_228; @Uint8() int driverInfo_229; @Uint8() int driverInfo_230; @Uint8() int driverInfo_231; @Uint8() int driverInfo_232; @Uint8() int driverInfo_233; @Uint8() int driverInfo_234; @Uint8() int driverInfo_235; @Uint8() int driverInfo_236; @Uint8() int driverInfo_237; @Uint8() int driverInfo_238; @Uint8() int driverInfo_239; @Uint8() int driverInfo_240; @Uint8() int driverInfo_241; @Uint8() int driverInfo_242; @Uint8() int driverInfo_243; @Uint8() int driverInfo_244; @Uint8() int driverInfo_245; @Uint8() int driverInfo_246; @Uint8() int driverInfo_247; @Uint8() int driverInfo_248; @Uint8() int driverInfo_249; @Uint8() int driverInfo_250; @Uint8() int driverInfo_251; @Uint8() int driverInfo_252; @Uint8() int driverInfo_253; @Uint8() int driverInfo_254; @Uint8() int driverInfo_255;
  String get driverInfo {
    var bytes = [driverInfo_0, driverInfo_1, driverInfo_2, driverInfo_3, driverInfo_4, driverInfo_5, driverInfo_6, driverInfo_7, driverInfo_8, driverInfo_9, driverInfo_10, driverInfo_11, driverInfo_12, driverInfo_13, driverInfo_14, driverInfo_15, driverInfo_16, driverInfo_17, driverInfo_18, driverInfo_19, driverInfo_20, driverInfo_21, driverInfo_22, driverInfo_23, driverInfo_24, driverInfo_25, driverInfo_26, driverInfo_27, driverInfo_28, driverInfo_29, driverInfo_30, driverInfo_31, driverInfo_32, driverInfo_33, driverInfo_34, driverInfo_35, driverInfo_36, driverInfo_37, driverInfo_38, driverInfo_39, driverInfo_40, driverInfo_41, driverInfo_42, driverInfo_43, driverInfo_44, driverInfo_45, driverInfo_46, driverInfo_47, driverInfo_48, driverInfo_49, driverInfo_50, driverInfo_51, driverInfo_52, driverInfo_53, driverInfo_54, driverInfo_55, driverInfo_56, driverInfo_57, driverInfo_58, driverInfo_59, driverInfo_60, driverInfo_61, driverInfo_62, driverInfo_63, driverInfo_64, driverInfo_65, driverInfo_66, driverInfo_67, driverInfo_68, driverInfo_69, driverInfo_70, driverInfo_71, driverInfo_72, driverInfo_73, driverInfo_74, driverInfo_75, driverInfo_76, driverInfo_77, driverInfo_78, driverInfo_79, driverInfo_80, driverInfo_81, driverInfo_82, driverInfo_83, driverInfo_84, driverInfo_85, driverInfo_86, driverInfo_87, driverInfo_88, driverInfo_89, driverInfo_90, driverInfo_91, driverInfo_92, driverInfo_93, driverInfo_94, driverInfo_95, driverInfo_96, driverInfo_97, driverInfo_98, driverInfo_99, driverInfo_100, driverInfo_101, driverInfo_102, driverInfo_103, driverInfo_104, driverInfo_105, driverInfo_106, driverInfo_107, driverInfo_108, driverInfo_109, driverInfo_110, driverInfo_111, driverInfo_112, driverInfo_113, driverInfo_114, driverInfo_115, driverInfo_116, driverInfo_117, driverInfo_118, driverInfo_119, driverInfo_120, driverInfo_121, driverInfo_122, driverInfo_123, driverInfo_124, driverInfo_125, driverInfo_126, driverInfo_127, driverInfo_128, driverInfo_129, driverInfo_130, driverInfo_131, driverInfo_132, driverInfo_133, driverInfo_134, driverInfo_135, driverInfo_136, driverInfo_137, driverInfo_138, driverInfo_139, driverInfo_140, driverInfo_141, driverInfo_142, driverInfo_143, driverInfo_144, driverInfo_145, driverInfo_146, driverInfo_147, driverInfo_148, driverInfo_149, driverInfo_150, driverInfo_151, driverInfo_152, driverInfo_153, driverInfo_154, driverInfo_155, driverInfo_156, driverInfo_157, driverInfo_158, driverInfo_159, driverInfo_160, driverInfo_161, driverInfo_162, driverInfo_163, driverInfo_164, driverInfo_165, driverInfo_166, driverInfo_167, driverInfo_168, driverInfo_169, driverInfo_170, driverInfo_171, driverInfo_172, driverInfo_173, driverInfo_174, driverInfo_175, driverInfo_176, driverInfo_177, driverInfo_178, driverInfo_179, driverInfo_180, driverInfo_181, driverInfo_182, driverInfo_183, driverInfo_184, driverInfo_185, driverInfo_186, driverInfo_187, driverInfo_188, driverInfo_189, driverInfo_190, driverInfo_191, driverInfo_192, driverInfo_193, driverInfo_194, driverInfo_195, driverInfo_196, driverInfo_197, driverInfo_198, driverInfo_199, driverInfo_200, driverInfo_201, driverInfo_202, driverInfo_203, driverInfo_204, driverInfo_205, driverInfo_206, driverInfo_207, driverInfo_208, driverInfo_209, driverInfo_210, driverInfo_211, driverInfo_212, driverInfo_213, driverInfo_214, driverInfo_215, driverInfo_216, driverInfo_217, driverInfo_218, driverInfo_219, driverInfo_220, driverInfo_221, driverInfo_222, driverInfo_223, driverInfo_224, driverInfo_225, driverInfo_226, driverInfo_227, driverInfo_228, driverInfo_229, driverInfo_230, driverInfo_231, driverInfo_232, driverInfo_233, driverInfo_234, driverInfo_235, driverInfo_236, driverInfo_237, driverInfo_238, driverInfo_239, driverInfo_240, driverInfo_241, driverInfo_242, driverInfo_243, driverInfo_244, driverInfo_245, driverInfo_246, driverInfo_247, driverInfo_248, driverInfo_249, driverInfo_250, driverInfo_251, driverInfo_252, driverInfo_253, driverInfo_254, driverInfo_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverInfo(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverInfo_0 = bytes[0]; } if (bytes.isNotEmpty) { driverInfo_1 = bytes[1]; } if (bytes.isNotEmpty) { driverInfo_2 = bytes[2]; } if (bytes.isNotEmpty) { driverInfo_3 = bytes[3]; } if (bytes.isNotEmpty) { driverInfo_4 = bytes[4]; } if (bytes.isNotEmpty) { driverInfo_5 = bytes[5]; } if (bytes.isNotEmpty) { driverInfo_6 = bytes[6]; } if (bytes.isNotEmpty) { driverInfo_7 = bytes[7]; } if (bytes.isNotEmpty) { driverInfo_8 = bytes[8]; } if (bytes.isNotEmpty) { driverInfo_9 = bytes[9]; } if (bytes.isNotEmpty) { driverInfo_10 = bytes[10]; } if (bytes.isNotEmpty) { driverInfo_11 = bytes[11]; } if (bytes.isNotEmpty) { driverInfo_12 = bytes[12]; } if (bytes.isNotEmpty) { driverInfo_13 = bytes[13]; } if (bytes.isNotEmpty) { driverInfo_14 = bytes[14]; } if (bytes.isNotEmpty) { driverInfo_15 = bytes[15]; } if (bytes.isNotEmpty) { driverInfo_16 = bytes[16]; } if (bytes.isNotEmpty) { driverInfo_17 = bytes[17]; } if (bytes.isNotEmpty) { driverInfo_18 = bytes[18]; } if (bytes.isNotEmpty) { driverInfo_19 = bytes[19]; } if (bytes.isNotEmpty) { driverInfo_20 = bytes[20]; } if (bytes.isNotEmpty) { driverInfo_21 = bytes[21]; } if (bytes.isNotEmpty) { driverInfo_22 = bytes[22]; } if (bytes.isNotEmpty) { driverInfo_23 = bytes[23]; } if (bytes.isNotEmpty) { driverInfo_24 = bytes[24]; } if (bytes.isNotEmpty) { driverInfo_25 = bytes[25]; } if (bytes.isNotEmpty) { driverInfo_26 = bytes[26]; } if (bytes.isNotEmpty) { driverInfo_27 = bytes[27]; } if (bytes.isNotEmpty) { driverInfo_28 = bytes[28]; } if (bytes.isNotEmpty) { driverInfo_29 = bytes[29]; } if (bytes.isNotEmpty) { driverInfo_30 = bytes[30]; } if (bytes.isNotEmpty) { driverInfo_31 = bytes[31]; } if (bytes.isNotEmpty) { driverInfo_32 = bytes[32]; } if (bytes.isNotEmpty) { driverInfo_33 = bytes[33]; } if (bytes.isNotEmpty) { driverInfo_34 = bytes[34]; } if (bytes.isNotEmpty) { driverInfo_35 = bytes[35]; } if (bytes.isNotEmpty) { driverInfo_36 = bytes[36]; } if (bytes.isNotEmpty) { driverInfo_37 = bytes[37]; } if (bytes.isNotEmpty) { driverInfo_38 = bytes[38]; } if (bytes.isNotEmpty) { driverInfo_39 = bytes[39]; } if (bytes.isNotEmpty) { driverInfo_40 = bytes[40]; } if (bytes.isNotEmpty) { driverInfo_41 = bytes[41]; } if (bytes.isNotEmpty) { driverInfo_42 = bytes[42]; } if (bytes.isNotEmpty) { driverInfo_43 = bytes[43]; } if (bytes.isNotEmpty) { driverInfo_44 = bytes[44]; } if (bytes.isNotEmpty) { driverInfo_45 = bytes[45]; } if (bytes.isNotEmpty) { driverInfo_46 = bytes[46]; } if (bytes.isNotEmpty) { driverInfo_47 = bytes[47]; } if (bytes.isNotEmpty) { driverInfo_48 = bytes[48]; } if (bytes.isNotEmpty) { driverInfo_49 = bytes[49]; } if (bytes.isNotEmpty) { driverInfo_50 = bytes[50]; } if (bytes.isNotEmpty) { driverInfo_51 = bytes[51]; } if (bytes.isNotEmpty) { driverInfo_52 = bytes[52]; } if (bytes.isNotEmpty) { driverInfo_53 = bytes[53]; } if (bytes.isNotEmpty) { driverInfo_54 = bytes[54]; } if (bytes.isNotEmpty) { driverInfo_55 = bytes[55]; } if (bytes.isNotEmpty) { driverInfo_56 = bytes[56]; } if (bytes.isNotEmpty) { driverInfo_57 = bytes[57]; } if (bytes.isNotEmpty) { driverInfo_58 = bytes[58]; } if (bytes.isNotEmpty) { driverInfo_59 = bytes[59]; } if (bytes.isNotEmpty) { driverInfo_60 = bytes[60]; } if (bytes.isNotEmpty) { driverInfo_61 = bytes[61]; } if (bytes.isNotEmpty) { driverInfo_62 = bytes[62]; } if (bytes.isNotEmpty) { driverInfo_63 = bytes[63]; } if (bytes.isNotEmpty) { driverInfo_64 = bytes[64]; } if (bytes.isNotEmpty) { driverInfo_65 = bytes[65]; } if (bytes.isNotEmpty) { driverInfo_66 = bytes[66]; } if (bytes.isNotEmpty) { driverInfo_67 = bytes[67]; } if (bytes.isNotEmpty) { driverInfo_68 = bytes[68]; } if (bytes.isNotEmpty) { driverInfo_69 = bytes[69]; } if (bytes.isNotEmpty) { driverInfo_70 = bytes[70]; } if (bytes.isNotEmpty) { driverInfo_71 = bytes[71]; } if (bytes.isNotEmpty) { driverInfo_72 = bytes[72]; } if (bytes.isNotEmpty) { driverInfo_73 = bytes[73]; } if (bytes.isNotEmpty) { driverInfo_74 = bytes[74]; } if (bytes.isNotEmpty) { driverInfo_75 = bytes[75]; } if (bytes.isNotEmpty) { driverInfo_76 = bytes[76]; } if (bytes.isNotEmpty) { driverInfo_77 = bytes[77]; } if (bytes.isNotEmpty) { driverInfo_78 = bytes[78]; } if (bytes.isNotEmpty) { driverInfo_79 = bytes[79]; } if (bytes.isNotEmpty) { driverInfo_80 = bytes[80]; } if (bytes.isNotEmpty) { driverInfo_81 = bytes[81]; } if (bytes.isNotEmpty) { driverInfo_82 = bytes[82]; } if (bytes.isNotEmpty) { driverInfo_83 = bytes[83]; } if (bytes.isNotEmpty) { driverInfo_84 = bytes[84]; } if (bytes.isNotEmpty) { driverInfo_85 = bytes[85]; } if (bytes.isNotEmpty) { driverInfo_86 = bytes[86]; } if (bytes.isNotEmpty) { driverInfo_87 = bytes[87]; } if (bytes.isNotEmpty) { driverInfo_88 = bytes[88]; } if (bytes.isNotEmpty) { driverInfo_89 = bytes[89]; } if (bytes.isNotEmpty) { driverInfo_90 = bytes[90]; } if (bytes.isNotEmpty) { driverInfo_91 = bytes[91]; } if (bytes.isNotEmpty) { driverInfo_92 = bytes[92]; } if (bytes.isNotEmpty) { driverInfo_93 = bytes[93]; } if (bytes.isNotEmpty) { driverInfo_94 = bytes[94]; } if (bytes.isNotEmpty) { driverInfo_95 = bytes[95]; } if (bytes.isNotEmpty) { driverInfo_96 = bytes[96]; } if (bytes.isNotEmpty) { driverInfo_97 = bytes[97]; } if (bytes.isNotEmpty) { driverInfo_98 = bytes[98]; } if (bytes.isNotEmpty) { driverInfo_99 = bytes[99]; } if (bytes.isNotEmpty) { driverInfo_100 = bytes[100]; } if (bytes.isNotEmpty) { driverInfo_101 = bytes[101]; } if (bytes.isNotEmpty) { driverInfo_102 = bytes[102]; } if (bytes.isNotEmpty) { driverInfo_103 = bytes[103]; } if (bytes.isNotEmpty) { driverInfo_104 = bytes[104]; } if (bytes.isNotEmpty) { driverInfo_105 = bytes[105]; } if (bytes.isNotEmpty) { driverInfo_106 = bytes[106]; } if (bytes.isNotEmpty) { driverInfo_107 = bytes[107]; } if (bytes.isNotEmpty) { driverInfo_108 = bytes[108]; } if (bytes.isNotEmpty) { driverInfo_109 = bytes[109]; } if (bytes.isNotEmpty) { driverInfo_110 = bytes[110]; } if (bytes.isNotEmpty) { driverInfo_111 = bytes[111]; } if (bytes.isNotEmpty) { driverInfo_112 = bytes[112]; } if (bytes.isNotEmpty) { driverInfo_113 = bytes[113]; } if (bytes.isNotEmpty) { driverInfo_114 = bytes[114]; } if (bytes.isNotEmpty) { driverInfo_115 = bytes[115]; } if (bytes.isNotEmpty) { driverInfo_116 = bytes[116]; } if (bytes.isNotEmpty) { driverInfo_117 = bytes[117]; } if (bytes.isNotEmpty) { driverInfo_118 = bytes[118]; } if (bytes.isNotEmpty) { driverInfo_119 = bytes[119]; } if (bytes.isNotEmpty) { driverInfo_120 = bytes[120]; } if (bytes.isNotEmpty) { driverInfo_121 = bytes[121]; } if (bytes.isNotEmpty) { driverInfo_122 = bytes[122]; } if (bytes.isNotEmpty) { driverInfo_123 = bytes[123]; } if (bytes.isNotEmpty) { driverInfo_124 = bytes[124]; } if (bytes.isNotEmpty) { driverInfo_125 = bytes[125]; } if (bytes.isNotEmpty) { driverInfo_126 = bytes[126]; } if (bytes.isNotEmpty) { driverInfo_127 = bytes[127]; } if (bytes.isNotEmpty) { driverInfo_128 = bytes[128]; } if (bytes.isNotEmpty) { driverInfo_129 = bytes[129]; } if (bytes.isNotEmpty) { driverInfo_130 = bytes[130]; } if (bytes.isNotEmpty) { driverInfo_131 = bytes[131]; } if (bytes.isNotEmpty) { driverInfo_132 = bytes[132]; } if (bytes.isNotEmpty) { driverInfo_133 = bytes[133]; } if (bytes.isNotEmpty) { driverInfo_134 = bytes[134]; } if (bytes.isNotEmpty) { driverInfo_135 = bytes[135]; } if (bytes.isNotEmpty) { driverInfo_136 = bytes[136]; } if (bytes.isNotEmpty) { driverInfo_137 = bytes[137]; } if (bytes.isNotEmpty) { driverInfo_138 = bytes[138]; } if (bytes.isNotEmpty) { driverInfo_139 = bytes[139]; } if (bytes.isNotEmpty) { driverInfo_140 = bytes[140]; } if (bytes.isNotEmpty) { driverInfo_141 = bytes[141]; } if (bytes.isNotEmpty) { driverInfo_142 = bytes[142]; } if (bytes.isNotEmpty) { driverInfo_143 = bytes[143]; } if (bytes.isNotEmpty) { driverInfo_144 = bytes[144]; } if (bytes.isNotEmpty) { driverInfo_145 = bytes[145]; } if (bytes.isNotEmpty) { driverInfo_146 = bytes[146]; } if (bytes.isNotEmpty) { driverInfo_147 = bytes[147]; } if (bytes.isNotEmpty) { driverInfo_148 = bytes[148]; } if (bytes.isNotEmpty) { driverInfo_149 = bytes[149]; } if (bytes.isNotEmpty) { driverInfo_150 = bytes[150]; } if (bytes.isNotEmpty) { driverInfo_151 = bytes[151]; } if (bytes.isNotEmpty) { driverInfo_152 = bytes[152]; } if (bytes.isNotEmpty) { driverInfo_153 = bytes[153]; } if (bytes.isNotEmpty) { driverInfo_154 = bytes[154]; } if (bytes.isNotEmpty) { driverInfo_155 = bytes[155]; } if (bytes.isNotEmpty) { driverInfo_156 = bytes[156]; } if (bytes.isNotEmpty) { driverInfo_157 = bytes[157]; } if (bytes.isNotEmpty) { driverInfo_158 = bytes[158]; } if (bytes.isNotEmpty) { driverInfo_159 = bytes[159]; } if (bytes.isNotEmpty) { driverInfo_160 = bytes[160]; } if (bytes.isNotEmpty) { driverInfo_161 = bytes[161]; } if (bytes.isNotEmpty) { driverInfo_162 = bytes[162]; } if (bytes.isNotEmpty) { driverInfo_163 = bytes[163]; } if (bytes.isNotEmpty) { driverInfo_164 = bytes[164]; } if (bytes.isNotEmpty) { driverInfo_165 = bytes[165]; } if (bytes.isNotEmpty) { driverInfo_166 = bytes[166]; } if (bytes.isNotEmpty) { driverInfo_167 = bytes[167]; } if (bytes.isNotEmpty) { driverInfo_168 = bytes[168]; } if (bytes.isNotEmpty) { driverInfo_169 = bytes[169]; } if (bytes.isNotEmpty) { driverInfo_170 = bytes[170]; } if (bytes.isNotEmpty) { driverInfo_171 = bytes[171]; } if (bytes.isNotEmpty) { driverInfo_172 = bytes[172]; } if (bytes.isNotEmpty) { driverInfo_173 = bytes[173]; } if (bytes.isNotEmpty) { driverInfo_174 = bytes[174]; } if (bytes.isNotEmpty) { driverInfo_175 = bytes[175]; } if (bytes.isNotEmpty) { driverInfo_176 = bytes[176]; } if (bytes.isNotEmpty) { driverInfo_177 = bytes[177]; } if (bytes.isNotEmpty) { driverInfo_178 = bytes[178]; } if (bytes.isNotEmpty) { driverInfo_179 = bytes[179]; } if (bytes.isNotEmpty) { driverInfo_180 = bytes[180]; } if (bytes.isNotEmpty) { driverInfo_181 = bytes[181]; } if (bytes.isNotEmpty) { driverInfo_182 = bytes[182]; } if (bytes.isNotEmpty) { driverInfo_183 = bytes[183]; } if (bytes.isNotEmpty) { driverInfo_184 = bytes[184]; } if (bytes.isNotEmpty) { driverInfo_185 = bytes[185]; } if (bytes.isNotEmpty) { driverInfo_186 = bytes[186]; } if (bytes.isNotEmpty) { driverInfo_187 = bytes[187]; } if (bytes.isNotEmpty) { driverInfo_188 = bytes[188]; } if (bytes.isNotEmpty) { driverInfo_189 = bytes[189]; } if (bytes.isNotEmpty) { driverInfo_190 = bytes[190]; } if (bytes.isNotEmpty) { driverInfo_191 = bytes[191]; } if (bytes.isNotEmpty) { driverInfo_192 = bytes[192]; } if (bytes.isNotEmpty) { driverInfo_193 = bytes[193]; } if (bytes.isNotEmpty) { driverInfo_194 = bytes[194]; } if (bytes.isNotEmpty) { driverInfo_195 = bytes[195]; } if (bytes.isNotEmpty) { driverInfo_196 = bytes[196]; } if (bytes.isNotEmpty) { driverInfo_197 = bytes[197]; } if (bytes.isNotEmpty) { driverInfo_198 = bytes[198]; } if (bytes.isNotEmpty) { driverInfo_199 = bytes[199]; } if (bytes.isNotEmpty) { driverInfo_200 = bytes[200]; } if (bytes.isNotEmpty) { driverInfo_201 = bytes[201]; } if (bytes.isNotEmpty) { driverInfo_202 = bytes[202]; } if (bytes.isNotEmpty) { driverInfo_203 = bytes[203]; } if (bytes.isNotEmpty) { driverInfo_204 = bytes[204]; } if (bytes.isNotEmpty) { driverInfo_205 = bytes[205]; } if (bytes.isNotEmpty) { driverInfo_206 = bytes[206]; } if (bytes.isNotEmpty) { driverInfo_207 = bytes[207]; } if (bytes.isNotEmpty) { driverInfo_208 = bytes[208]; } if (bytes.isNotEmpty) { driverInfo_209 = bytes[209]; } if (bytes.isNotEmpty) { driverInfo_210 = bytes[210]; } if (bytes.isNotEmpty) { driverInfo_211 = bytes[211]; } if (bytes.isNotEmpty) { driverInfo_212 = bytes[212]; } if (bytes.isNotEmpty) { driverInfo_213 = bytes[213]; } if (bytes.isNotEmpty) { driverInfo_214 = bytes[214]; } if (bytes.isNotEmpty) { driverInfo_215 = bytes[215]; } if (bytes.isNotEmpty) { driverInfo_216 = bytes[216]; } if (bytes.isNotEmpty) { driverInfo_217 = bytes[217]; } if (bytes.isNotEmpty) { driverInfo_218 = bytes[218]; } if (bytes.isNotEmpty) { driverInfo_219 = bytes[219]; } if (bytes.isNotEmpty) { driverInfo_220 = bytes[220]; } if (bytes.isNotEmpty) { driverInfo_221 = bytes[221]; } if (bytes.isNotEmpty) { driverInfo_222 = bytes[222]; } if (bytes.isNotEmpty) { driverInfo_223 = bytes[223]; } if (bytes.isNotEmpty) { driverInfo_224 = bytes[224]; } if (bytes.isNotEmpty) { driverInfo_225 = bytes[225]; } if (bytes.isNotEmpty) { driverInfo_226 = bytes[226]; } if (bytes.isNotEmpty) { driverInfo_227 = bytes[227]; } if (bytes.isNotEmpty) { driverInfo_228 = bytes[228]; } if (bytes.isNotEmpty) { driverInfo_229 = bytes[229]; } if (bytes.isNotEmpty) { driverInfo_230 = bytes[230]; } if (bytes.isNotEmpty) { driverInfo_231 = bytes[231]; } if (bytes.isNotEmpty) { driverInfo_232 = bytes[232]; } if (bytes.isNotEmpty) { driverInfo_233 = bytes[233]; } if (bytes.isNotEmpty) { driverInfo_234 = bytes[234]; } if (bytes.isNotEmpty) { driverInfo_235 = bytes[235]; } if (bytes.isNotEmpty) { driverInfo_236 = bytes[236]; } if (bytes.isNotEmpty) { driverInfo_237 = bytes[237]; } if (bytes.isNotEmpty) { driverInfo_238 = bytes[238]; } if (bytes.isNotEmpty) { driverInfo_239 = bytes[239]; } if (bytes.isNotEmpty) { driverInfo_240 = bytes[240]; } if (bytes.isNotEmpty) { driverInfo_241 = bytes[241]; } if (bytes.isNotEmpty) { driverInfo_242 = bytes[242]; } if (bytes.isNotEmpty) { driverInfo_243 = bytes[243]; } if (bytes.isNotEmpty) { driverInfo_244 = bytes[244]; } if (bytes.isNotEmpty) { driverInfo_245 = bytes[245]; } if (bytes.isNotEmpty) { driverInfo_246 = bytes[246]; } if (bytes.isNotEmpty) { driverInfo_247 = bytes[247]; } if (bytes.isNotEmpty) { driverInfo_248 = bytes[248]; } if (bytes.isNotEmpty) { driverInfo_249 = bytes[249]; } if (bytes.isNotEmpty) { driverInfo_250 = bytes[250]; } if (bytes.isNotEmpty) { driverInfo_251 = bytes[251]; } if (bytes.isNotEmpty) { driverInfo_252 = bytes[252]; } if (bytes.isNotEmpty) { driverInfo_253 = bytes[253]; } if (bytes.isNotEmpty) { driverInfo_254 = bytes[254]; } if (bytes.isNotEmpty) { driverInfo_255 = bytes[255]; }
  }
  @Uint8() int conformanceVersion_major;
  @Uint8() int conformanceVersion_minor;
  @Uint8() int conformanceVersion_subminor;
  @Uint8() int conformanceVersion_patch;
}

class VkPhysicalDeviceDriverPropertiesKHR extends Struct {
}

class VkPresentRegionsKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int swapchainCount;
  Pointer<VkPresentRegionKHR> pRegions;
}

class VkPresentRegionKHR extends Struct {
  @Uint32() int rectangleCount;
  Pointer<VkRectLayerKHR> pRectangles;
}

class VkRectLayerKHR extends Struct {
  @Int32() int offset_x;
  @Int32() int offset_y;
  @Uint32() int extent_width;
  @Uint32() int extent_height;
  @Uint32() int layer;
}

class VkPhysicalDeviceVariablePointersFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int variablePointersStorageBuffer;
  @Uint32() int variablePointers;
}

class VkPhysicalDeviceVariablePointersFeaturesKHR extends Struct {
}

class VkPhysicalDeviceVariablePointerFeaturesKHR extends Struct {
}

class VkPhysicalDeviceVariablePointerFeatures extends Struct {
}

class VkExternalMemoryProperties extends Struct {
  @Uint32() int externalMemoryFeatures;
  @Uint32() int exportFromImportedHandleTypes;
  @Uint32() int compatibleHandleTypes;
}

class VkExternalMemoryPropertiesKHR extends Struct {
}

class VkPhysicalDeviceExternalImageFormatInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
}

class VkPhysicalDeviceExternalImageFormatInfoKHR extends Struct {
}

class VkExternalImageFormatProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int externalMemoryProperties_externalMemoryFeatures;
  @Uint32() int externalMemoryProperties_exportFromImportedHandleTypes;
  @Uint32() int externalMemoryProperties_compatibleHandleTypes;
}

class VkExternalImageFormatPropertiesKHR extends Struct {
}

class VkPhysicalDeviceExternalBufferInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int usage;
  @Int32() int handleType;
}

class VkPhysicalDeviceExternalBufferInfoKHR extends Struct {
}

class VkExternalBufferProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int externalMemoryProperties_externalMemoryFeatures;
  @Uint32() int externalMemoryProperties_exportFromImportedHandleTypes;
  @Uint32() int externalMemoryProperties_compatibleHandleTypes;
}

class VkExternalBufferPropertiesKHR extends Struct {
}

class VkPhysicalDeviceIDProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint8() int deviceUUID_0; @Uint8() int deviceUUID_1; @Uint8() int deviceUUID_2; @Uint8() int deviceUUID_3; @Uint8() int deviceUUID_4; @Uint8() int deviceUUID_5; @Uint8() int deviceUUID_6; @Uint8() int deviceUUID_7; @Uint8() int deviceUUID_8; @Uint8() int deviceUUID_9; @Uint8() int deviceUUID_10; @Uint8() int deviceUUID_11; @Uint8() int deviceUUID_12; @Uint8() int deviceUUID_13; @Uint8() int deviceUUID_14; @Uint8() int deviceUUID_15;
  String get deviceUUID {
    var bytes = [deviceUUID_0, deviceUUID_1, deviceUUID_2, deviceUUID_3, deviceUUID_4, deviceUUID_5, deviceUUID_6, deviceUUID_7, deviceUUID_8, deviceUUID_9, deviceUUID_10, deviceUUID_11, deviceUUID_12, deviceUUID_13, deviceUUID_14, deviceUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set deviceUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { deviceUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { deviceUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { deviceUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { deviceUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { deviceUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { deviceUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { deviceUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { deviceUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { deviceUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { deviceUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { deviceUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { deviceUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { deviceUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { deviceUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { deviceUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { deviceUUID_15 = bytes[15]; }
  }
  @Uint8() int driverUUID_0; @Uint8() int driverUUID_1; @Uint8() int driverUUID_2; @Uint8() int driverUUID_3; @Uint8() int driverUUID_4; @Uint8() int driverUUID_5; @Uint8() int driverUUID_6; @Uint8() int driverUUID_7; @Uint8() int driverUUID_8; @Uint8() int driverUUID_9; @Uint8() int driverUUID_10; @Uint8() int driverUUID_11; @Uint8() int driverUUID_12; @Uint8() int driverUUID_13; @Uint8() int driverUUID_14; @Uint8() int driverUUID_15;
  String get driverUUID {
    var bytes = [driverUUID_0, driverUUID_1, driverUUID_2, driverUUID_3, driverUUID_4, driverUUID_5, driverUUID_6, driverUUID_7, driverUUID_8, driverUUID_9, driverUUID_10, driverUUID_11, driverUUID_12, driverUUID_13, driverUUID_14, driverUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { driverUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { driverUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { driverUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { driverUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { driverUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { driverUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { driverUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { driverUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { driverUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { driverUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { driverUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { driverUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { driverUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { driverUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { driverUUID_15 = bytes[15]; }
  }
  @Uint8() int deviceLUID_0; @Uint8() int deviceLUID_1; @Uint8() int deviceLUID_2; @Uint8() int deviceLUID_3; @Uint8() int deviceLUID_4; @Uint8() int deviceLUID_5; @Uint8() int deviceLUID_6; @Uint8() int deviceLUID_7;
  String get deviceLUID {
    var bytes = [deviceLUID_0, deviceLUID_1, deviceLUID_2, deviceLUID_3, deviceLUID_4, deviceLUID_5, deviceLUID_6, deviceLUID_7].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set deviceLUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { deviceLUID_0 = bytes[0]; } if (bytes.isNotEmpty) { deviceLUID_1 = bytes[1]; } if (bytes.isNotEmpty) { deviceLUID_2 = bytes[2]; } if (bytes.isNotEmpty) { deviceLUID_3 = bytes[3]; } if (bytes.isNotEmpty) { deviceLUID_4 = bytes[4]; } if (bytes.isNotEmpty) { deviceLUID_5 = bytes[5]; } if (bytes.isNotEmpty) { deviceLUID_6 = bytes[6]; } if (bytes.isNotEmpty) { deviceLUID_7 = bytes[7]; }
  }
  @Uint32() int deviceNodeMask;
  @Uint32() int deviceLUIDValid;
}

class VkPhysicalDeviceIDPropertiesKHR extends Struct {
}

class VkExternalMemoryImageCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExternalMemoryImageCreateInfoKHR extends Struct {
}

class VkExternalMemoryBufferCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExternalMemoryBufferCreateInfoKHR extends Struct {
}

class VkExportMemoryAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExportMemoryAllocateInfoKHR extends Struct {
}

class VkImportMemoryWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
  Pointer handle;
  Pointer name;
}

class VkExportMemoryWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pAttributes;
  Pointer dwAccess;
  Pointer name;
}

class VkMemoryWin32HandlePropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryTypeBits;
}

class VkMemoryGetWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeviceMemory> memory;
  @Int32() int handleType;
}

class VkImportMemoryFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
  Pointer fd;
}

class VkMemoryFdPropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryTypeBits;
}

class VkMemoryGetFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeviceMemory> memory;
  @Int32() int handleType;
}

class VkWin32KeyedMutexAcquireReleaseInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int acquireCount;
  Pointer<Pointer<VkDeviceMemory>> pAcquireSyncs;
  Pointer pAcquireKeys;
  Pointer pAcquireTimeouts;
  @Uint32() int releaseCount;
  Pointer<Pointer<VkDeviceMemory>> pReleaseSyncs;
  Pointer pReleaseKeys;
}

class VkPhysicalDeviceExternalSemaphoreInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
}

class VkPhysicalDeviceExternalSemaphoreInfoKHR extends Struct {
}

class VkExternalSemaphoreProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int exportFromImportedHandleTypes;
  @Uint32() int compatibleHandleTypes;
  @Uint32() int externalSemaphoreFeatures;
}

class VkExternalSemaphorePropertiesKHR extends Struct {
}

class VkExportSemaphoreCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExportSemaphoreCreateInfoKHR extends Struct {
}

class VkImportSemaphoreWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSemaphore> semaphore;
  @Uint32() int flags;
  @Int32() int handleType;
  Pointer handle;
  Pointer name;
}

class VkExportSemaphoreWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pAttributes;
  Pointer dwAccess;
  Pointer name;
}

class VkD3D12FenceSubmitInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreValuesCount;
  Pointer pWaitSemaphoreValues;
  @Uint32() int signalSemaphoreValuesCount;
  Pointer pSignalSemaphoreValues;
}

class VkSemaphoreGetWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSemaphore> semaphore;
  @Int32() int handleType;
}

class VkImportSemaphoreFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSemaphore> semaphore;
  @Uint32() int flags;
  @Int32() int handleType;
  Pointer fd;
}

class VkSemaphoreGetFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSemaphore> semaphore;
  @Int32() int handleType;
}

class VkPhysicalDeviceExternalFenceInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
}

class VkPhysicalDeviceExternalFenceInfoKHR extends Struct {
}

class VkExternalFenceProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int exportFromImportedHandleTypes;
  @Uint32() int compatibleHandleTypes;
  @Uint32() int externalFenceFeatures;
}

class VkExternalFencePropertiesKHR extends Struct {
}

class VkExportFenceCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int handleTypes;
}

class VkExportFenceCreateInfoKHR extends Struct {
}

class VkImportFenceWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkFence> fence;
  @Uint32() int flags;
  @Int32() int handleType;
  Pointer handle;
  Pointer name;
}

class VkExportFenceWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pAttributes;
  Pointer dwAccess;
  Pointer name;
}

class VkFenceGetWin32HandleInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkFence> fence;
  @Int32() int handleType;
}

class VkImportFenceFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkFence> fence;
  @Uint32() int flags;
  @Int32() int handleType;
  Pointer fd;
}

class VkFenceGetFdInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkFence> fence;
  @Int32() int handleType;
}

class VkPhysicalDeviceMultiviewFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int multiview;
  @Uint32() int multiviewGeometryShader;
  @Uint32() int multiviewTessellationShader;
}

class VkPhysicalDeviceMultiviewFeaturesKHR extends Struct {
}

class VkPhysicalDeviceMultiviewProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxMultiviewViewCount;
  @Uint32() int maxMultiviewInstanceIndex;
}

class VkPhysicalDeviceMultiviewPropertiesKHR extends Struct {
}

class VkRenderPassMultiviewCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int subpassCount;
  Pointer pViewMasks;
  @Uint32() int dependencyCount;
  Pointer pViewOffsets;
  @Uint32() int correlationMaskCount;
  Pointer pCorrelationMasks;
}

class VkRenderPassMultiviewCreateInfoKHR extends Struct {
}

class VkSurfaceCapabilities2EXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int minImageCount;
  @Uint32() int maxImageCount;
  @Uint32() int currentExtent_width;
  @Uint32() int currentExtent_height;
  @Uint32() int minImageExtent_width;
  @Uint32() int minImageExtent_height;
  @Uint32() int maxImageExtent_width;
  @Uint32() int maxImageExtent_height;
  @Uint32() int maxImageArrayLayers;
  @Uint32() int supportedTransforms;
  @Int32() int currentTransform;
  @Uint32() int supportedCompositeAlpha;
  @Uint32() int supportedUsageFlags;
  @Uint32() int supportedSurfaceCounters;
}

class VkDisplayPowerInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int powerState;
}

class VkDeviceEventInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int deviceEvent;
}

class VkDisplayEventInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int displayEvent;
}

class VkSwapchainCounterCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int surfaceCounters;
}

class VkPhysicalDeviceGroupProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int physicalDeviceCount;
  Pointer physicalDevices_0; Pointer physicalDevices_1; Pointer physicalDevices_2; Pointer physicalDevices_3; Pointer physicalDevices_4; Pointer physicalDevices_5; Pointer physicalDevices_6; Pointer physicalDevices_7; Pointer physicalDevices_8; Pointer physicalDevices_9; Pointer physicalDevices_10; Pointer physicalDevices_11; Pointer physicalDevices_12; Pointer physicalDevices_13; Pointer physicalDevices_14; Pointer physicalDevices_15; Pointer physicalDevices_16; Pointer physicalDevices_17; Pointer physicalDevices_18; Pointer physicalDevices_19; Pointer physicalDevices_20; Pointer physicalDevices_21; Pointer physicalDevices_22; Pointer physicalDevices_23; Pointer physicalDevices_24; Pointer physicalDevices_25; Pointer physicalDevices_26; Pointer physicalDevices_27; Pointer physicalDevices_28; Pointer physicalDevices_29; Pointer physicalDevices_30; Pointer physicalDevices_31;
  @Uint32() int subsetAllocation;
}

class VkPhysicalDeviceGroupPropertiesKHR extends Struct {
}

class VkMemoryAllocateFlagsInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int deviceMask;
}

class VkMemoryAllocateFlagsInfoKHR extends Struct {
}

class VkBindBufferMemoryInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> buffer;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int memoryOffset;
}

class VkBindBufferMemoryInfoKHR extends Struct {
}

class VkBindBufferMemoryDeviceGroupInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceIndexCount;
  Pointer pDeviceIndices;
}

class VkBindBufferMemoryDeviceGroupInfoKHR extends Struct {
}

class VkBindImageMemoryInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImage> image;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int memoryOffset;
}

class VkBindImageMemoryInfoKHR extends Struct {
}

class VkBindImageMemoryDeviceGroupInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceIndexCount;
  Pointer pDeviceIndices;
  @Uint32() int splitInstanceBindRegionCount;
  Pointer<VkRect2D> pSplitInstanceBindRegions;
}

class VkBindImageMemoryDeviceGroupInfoKHR extends Struct {
}

class VkDeviceGroupRenderPassBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceMask;
  @Uint32() int deviceRenderAreaCount;
  Pointer<VkRect2D> pDeviceRenderAreas;
}

class VkDeviceGroupRenderPassBeginInfoKHR extends Struct {
}

class VkDeviceGroupCommandBufferBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceMask;
}

class VkDeviceGroupCommandBufferBeginInfoKHR extends Struct {
}

class VkDeviceGroupSubmitInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreCount;
  Pointer pWaitSemaphoreDeviceIndices;
  @Uint32() int commandBufferCount;
  Pointer pCommandBufferDeviceMasks;
  @Uint32() int signalSemaphoreCount;
  Pointer pSignalSemaphoreDeviceIndices;
}

class VkDeviceGroupSubmitInfoKHR extends Struct {
}

class VkDeviceGroupBindSparseInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int resourceDeviceIndex;
  @Uint32() int memoryDeviceIndex;
}

class VkDeviceGroupBindSparseInfoKHR extends Struct {
}

class VkDeviceGroupPresentCapabilitiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int presentMask_0; @Uint32() int presentMask_1; @Uint32() int presentMask_2; @Uint32() int presentMask_3; @Uint32() int presentMask_4; @Uint32() int presentMask_5; @Uint32() int presentMask_6; @Uint32() int presentMask_7; @Uint32() int presentMask_8; @Uint32() int presentMask_9; @Uint32() int presentMask_10; @Uint32() int presentMask_11; @Uint32() int presentMask_12; @Uint32() int presentMask_13; @Uint32() int presentMask_14; @Uint32() int presentMask_15; @Uint32() int presentMask_16; @Uint32() int presentMask_17; @Uint32() int presentMask_18; @Uint32() int presentMask_19; @Uint32() int presentMask_20; @Uint32() int presentMask_21; @Uint32() int presentMask_22; @Uint32() int presentMask_23; @Uint32() int presentMask_24; @Uint32() int presentMask_25; @Uint32() int presentMask_26; @Uint32() int presentMask_27; @Uint32() int presentMask_28; @Uint32() int presentMask_29; @Uint32() int presentMask_30; @Uint32() int presentMask_31;
  @Uint32() int modes;
}

class VkImageSwapchainCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSwapchainKHR> swapchain;
}

class VkBindImageMemorySwapchainInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSwapchainKHR> swapchain;
  @Uint32() int imageIndex;
}

class VkAcquireNextImageInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSwapchainKHR> swapchain;
  @Uint64() int timeout;
  Pointer<VkSemaphore> semaphore;
  Pointer<VkFence> fence;
  @Uint32() int deviceMask;
}

class VkDeviceGroupPresentInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int swapchainCount;
  Pointer pDeviceMasks;
  @Int32() int mode;
}

class VkDeviceGroupDeviceCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int physicalDeviceCount;
  Pointer<Pointer<VkPhysicalDevice>> pPhysicalDevices;
}

class VkDeviceGroupDeviceCreateInfoKHR extends Struct {
}

class VkDeviceGroupSwapchainCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int modes;
}

class VkDescriptorUpdateTemplateEntry extends Struct {
  @Uint32() int dstBinding;
  @Uint32() int dstArrayElement;
  @Uint32() int descriptorCount;
  @Int32() int descriptorType;
  @Uint64() int offset;
  @Uint64() int stride;
}

class VkDescriptorUpdateTemplateEntryKHR extends Struct {
}

class VkDescriptorUpdateTemplateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int descriptorUpdateEntryCount;
  Pointer<VkDescriptorUpdateTemplateEntry> pDescriptorUpdateEntries;
  @Int32() int templateType;
  Pointer<VkDescriptorSetLayout> descriptorSetLayout;
  @Int32() int pipelineBindPoint;
  Pointer<VkPipelineLayout> pipelineLayout;
  @Uint32() int set;
}

class VkDescriptorUpdateTemplateCreateInfoKHR extends Struct {
}

class VkXYColorEXT extends Struct {
  @Float() double x;
  @Float() double y;
}

class VkHdrMetadataEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Float() double displayPrimaryRed_x;
  @Float() double displayPrimaryRed_y;
  @Float() double displayPrimaryGreen_x;
  @Float() double displayPrimaryGreen_y;
  @Float() double displayPrimaryBlue_x;
  @Float() double displayPrimaryBlue_y;
  @Float() double whitePoint_x;
  @Float() double whitePoint_y;
  @Float() double maxLuminance;
  @Float() double minLuminance;
  @Float() double maxContentLightLevel;
  @Float() double maxFrameAverageLightLevel;
}

class VkDisplayNativeHdrSurfaceCapabilitiesAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int localDimmingSupport;
}

class VkSwapchainDisplayNativeHdrCreateInfoAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int localDimmingEnable;
}

class VkRefreshCycleDurationGOOGLE extends Struct {
  @Uint64() int refreshDuration;
}

class VkPastPresentationTimingGOOGLE extends Struct {
  @Uint32() int presentID;
  @Uint64() int desiredPresentTime;
  @Uint64() int actualPresentTime;
  @Uint64() int earliestPresentTime;
  @Uint64() int presentMargin;
}

class VkPresentTimesInfoGOOGLE extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int swapchainCount;
  Pointer<VkPresentTimeGOOGLE> pTimes;
}

class VkPresentTimeGOOGLE extends Struct {
  @Uint32() int presentID;
  @Uint64() int desiredPresentTime;
}

class VkIOSSurfaceCreateInfoMVK extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer pView;
}

class VkMacOSSurfaceCreateInfoMVK extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer pView;
}

class VkMetalSurfaceCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer pLayer;
}

class VkViewportWScalingNV extends Struct {
  @Float() double xcoeff;
  @Float() double ycoeff;
}

class VkPipelineViewportWScalingStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int viewportWScalingEnable;
  @Uint32() int viewportCount;
  Pointer<VkViewportWScalingNV> pViewportWScalings;
}

class VkViewportSwizzleNV extends Struct {
  @Int32() int x;
  @Int32() int y;
  @Int32() int z;
  @Int32() int w;
}

class VkPipelineViewportSwizzleStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int viewportCount;
  Pointer<VkViewportSwizzleNV> pViewportSwizzles;
}

class VkPhysicalDeviceDiscardRectanglePropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxDiscardRectangles;
}

class VkPipelineDiscardRectangleStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int discardRectangleMode;
  @Uint32() int discardRectangleCount;
  Pointer<VkRect2D> pDiscardRectangles;
}

class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int perViewPositionAllComponents;
}

class VkInputAttachmentAspectReference extends Struct {
  @Uint32() int subpass;
  @Uint32() int inputAttachmentIndex;
  @Uint32() int aspectMask;
}

class VkInputAttachmentAspectReferenceKHR extends Struct {
}

class VkRenderPassInputAttachmentAspectCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int aspectReferenceCount;
  Pointer<VkInputAttachmentAspectReference> pAspectReferences;
}

class VkRenderPassInputAttachmentAspectCreateInfoKHR extends Struct {
}

class VkPhysicalDeviceSurfaceInfo2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSurfaceKHR> surface;
}

class VkSurfaceCapabilities2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int surfaceCapabilities_minImageCount;
  @Uint32() int surfaceCapabilities_maxImageCount;
  @Uint32() int surfaceCapabilities_currentExtent_width;
  @Uint32() int surfaceCapabilities_currentExtent_height;
  @Uint32() int surfaceCapabilities_minImageExtent_width;
  @Uint32() int surfaceCapabilities_minImageExtent_height;
  @Uint32() int surfaceCapabilities_maxImageExtent_width;
  @Uint32() int surfaceCapabilities_maxImageExtent_height;
  @Uint32() int surfaceCapabilities_maxImageArrayLayers;
  @Uint32() int surfaceCapabilities_supportedTransforms;
  @Int32() int surfaceCapabilities_currentTransform;
  @Uint32() int surfaceCapabilities_supportedCompositeAlpha;
  @Uint32() int surfaceCapabilities_supportedUsageFlags;
}

class VkSurfaceFormat2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int surfaceFormat_format;
  @Int32() int surfaceFormat_colorSpace;
}

class VkDisplayProperties2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDisplayKHR> displayProperties_display;
  Pointer displayProperties_displayName;
  @Uint32() int displayProperties_physicalDimensions_width;
  @Uint32() int displayProperties_physicalDimensions_height;
  @Uint32() int displayProperties_physicalResolution_width;
  @Uint32() int displayProperties_physicalResolution_height;
  @Uint32() int displayProperties_supportedTransforms;
  @Uint32() int displayProperties_planeReorderPossible;
  @Uint32() int displayProperties_persistentContent;
}

class VkDisplayPlaneProperties2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDisplayKHR> displayPlaneProperties_currentDisplay;
  @Uint32() int displayPlaneProperties_currentStackIndex;
}

class VkDisplayModeProperties2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDisplayModeKHR> displayModeProperties_displayMode;
  @Uint32() int displayModeProperties_parameters_visibleRegion_width;
  @Uint32() int displayModeProperties_parameters_visibleRegion_height;
  @Uint32() int displayModeProperties_parameters_refreshRate;
}

class VkDisplayPlaneInfo2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDisplayModeKHR> mode;
  @Uint32() int planeIndex;
}

class VkDisplayPlaneCapabilities2KHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int capabilities_supportedAlpha;
  @Int32() int capabilities_minSrcPosition_x;
  @Int32() int capabilities_minSrcPosition_y;
  @Int32() int capabilities_maxSrcPosition_x;
  @Int32() int capabilities_maxSrcPosition_y;
  @Uint32() int capabilities_minSrcExtent_width;
  @Uint32() int capabilities_minSrcExtent_height;
  @Uint32() int capabilities_maxSrcExtent_width;
  @Uint32() int capabilities_maxSrcExtent_height;
  @Int32() int capabilities_minDstPosition_x;
  @Int32() int capabilities_minDstPosition_y;
  @Int32() int capabilities_maxDstPosition_x;
  @Int32() int capabilities_maxDstPosition_y;
  @Uint32() int capabilities_minDstExtent_width;
  @Uint32() int capabilities_minDstExtent_height;
  @Uint32() int capabilities_maxDstExtent_width;
  @Uint32() int capabilities_maxDstExtent_height;
}

class VkSharedPresentSurfaceCapabilitiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int sharedPresentSupportedUsageFlags;
}

class VkPhysicalDevice16BitStorageFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int storageBuffer16BitAccess;
  @Uint32() int uniformAndStorageBuffer16BitAccess;
  @Uint32() int storagePushConstant16;
  @Uint32() int storageInputOutput16;
}

class VkPhysicalDevice16BitStorageFeaturesKHR extends Struct {
}

class VkPhysicalDeviceSubgroupProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int subgroupSize;
  @Uint32() int supportedStages;
  @Uint32() int supportedOperations;
  @Uint32() int quadOperationsInAllStages;
}

class VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderSubgroupExtendedTypes;
}

class VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR extends Struct {
}

class VkBufferMemoryRequirementsInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> buffer;
}

class VkBufferMemoryRequirementsInfo2KHR extends Struct {
}

class VkImageMemoryRequirementsInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImage> image;
}

class VkImageMemoryRequirementsInfo2KHR extends Struct {
}

class VkImageSparseMemoryRequirementsInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImage> image;
}

class VkImageSparseMemoryRequirementsInfo2KHR extends Struct {
}

class VkMemoryRequirements2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int memoryRequirements_size;
  @Uint64() int memoryRequirements_alignment;
  @Uint32() int memoryRequirements_memoryTypeBits;
}

class VkMemoryRequirements2KHR extends Struct {
}

class VkSparseImageMemoryRequirements2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryRequirements_formatProperties_aspectMask;
  @Uint32() int memoryRequirements_formatProperties_imageGranularity_width;
  @Uint32() int memoryRequirements_formatProperties_imageGranularity_height;
  @Uint32() int memoryRequirements_formatProperties_imageGranularity_depth;
  @Uint32() int memoryRequirements_formatProperties_flags;
  @Uint32() int memoryRequirements_imageMipTailFirstLod;
  @Uint64() int memoryRequirements_imageMipTailSize;
  @Uint64() int memoryRequirements_imageMipTailOffset;
  @Uint64() int memoryRequirements_imageMipTailStride;
}

class VkSparseImageMemoryRequirements2KHR extends Struct {
}

class VkPhysicalDevicePointClippingProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int pointClippingBehavior;
}

class VkPhysicalDevicePointClippingPropertiesKHR extends Struct {
}

class VkMemoryDedicatedRequirements extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int prefersDedicatedAllocation;
  @Uint32() int requiresDedicatedAllocation;
}

class VkMemoryDedicatedRequirementsKHR extends Struct {
}

class VkMemoryDedicatedAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImage> image;
  Pointer<VkBuffer> buffer;
}

class VkMemoryDedicatedAllocateInfoKHR extends Struct {
}

class VkImageViewUsageCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int usage;
}

class VkImageViewUsageCreateInfoKHR extends Struct {
}

class VkPipelineTessellationDomainOriginStateCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int domainOrigin;
}

class VkPipelineTessellationDomainOriginStateCreateInfoKHR extends Struct {
}

class VkSamplerYcbcrConversionInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSamplerYcbcrConversion> conversion;
}

class VkSamplerYcbcrConversionInfoKHR extends Struct {
}

class VkSamplerYcbcrConversionCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int format;
  @Int32() int ycbcrModel;
  @Int32() int ycbcrRange;
  @Int32() int components_r;
  @Int32() int components_g;
  @Int32() int components_b;
  @Int32() int components_a;
  @Int32() int xChromaOffset;
  @Int32() int yChromaOffset;
  @Int32() int chromaFilter;
  @Uint32() int forceExplicitReconstruction;
}

class VkSamplerYcbcrConversionCreateInfoKHR extends Struct {
}

class VkBindImagePlaneMemoryInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int planeAspect;
}

class VkBindImagePlaneMemoryInfoKHR extends Struct {
}

class VkImagePlaneMemoryRequirementsInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int planeAspect;
}

class VkImagePlaneMemoryRequirementsInfoKHR extends Struct {
}

class VkPhysicalDeviceSamplerYcbcrConversionFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int samplerYcbcrConversion;
}

class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR extends Struct {
}

class VkSamplerYcbcrConversionImageFormatProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int combinedImageSamplerDescriptorCount;
}

class VkSamplerYcbcrConversionImageFormatPropertiesKHR extends Struct {
}

class VkTextureLODGatherFormatPropertiesAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int supportsTextureGatherLODBiasAMD;
}

class VkConditionalRenderingBeginInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> buffer;
  @Uint64() int offset;
  @Uint32() int flags;
}

class VkProtectedSubmitInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int protectedSubmit;
}

class VkPhysicalDeviceProtectedMemoryFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int protectedMemory;
}

class VkPhysicalDeviceProtectedMemoryProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int protectedNoFault;
}

class VkDeviceQueueInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int queueFamilyIndex;
  @Uint32() int queueIndex;
}

class VkPipelineCoverageToColorStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int coverageToColorEnable;
  @Uint32() int coverageToColorLocation;
}

class VkPhysicalDeviceSamplerFilterMinmaxProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int filterMinmaxSingleComponentFormats;
  @Uint32() int filterMinmaxImageComponentMapping;
}

class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT extends Struct {
}

class VkSampleLocationEXT extends Struct {
  @Float() double x;
  @Float() double y;
}

class VkSampleLocationsInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int sampleLocationsPerPixel;
  @Uint32() int sampleLocationGridSize_width;
  @Uint32() int sampleLocationGridSize_height;
  @Uint32() int sampleLocationsCount;
  Pointer<VkSampleLocationEXT> pSampleLocations;
}

class VkAttachmentSampleLocationsEXT extends Struct {
  @Uint32() int attachmentIndex;
  @Int32() int sampleLocationsInfo_sType;
  Pointer sampleLocationsInfo_pNext;
  @Int32() int sampleLocationsInfo_sampleLocationsPerPixel;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_width;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_height;
  @Uint32() int sampleLocationsInfo_sampleLocationsCount;
  Pointer<VkSampleLocationEXT> sampleLocationsInfo_pSampleLocations;
}

class VkSubpassSampleLocationsEXT extends Struct {
  @Uint32() int subpassIndex;
  @Int32() int sampleLocationsInfo_sType;
  Pointer sampleLocationsInfo_pNext;
  @Int32() int sampleLocationsInfo_sampleLocationsPerPixel;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_width;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_height;
  @Uint32() int sampleLocationsInfo_sampleLocationsCount;
  Pointer<VkSampleLocationEXT> sampleLocationsInfo_pSampleLocations;
}

class VkRenderPassSampleLocationsBeginInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int attachmentInitialSampleLocationsCount;
  Pointer<VkAttachmentSampleLocationsEXT> pAttachmentInitialSampleLocations;
  @Uint32() int postSubpassSampleLocationsCount;
  Pointer<VkSubpassSampleLocationsEXT> pPostSubpassSampleLocations;
}

class VkPipelineSampleLocationsStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int sampleLocationsEnable;
  @Int32() int sampleLocationsInfo_sType;
  Pointer sampleLocationsInfo_pNext;
  @Int32() int sampleLocationsInfo_sampleLocationsPerPixel;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_width;
  @Uint32() int sampleLocationsInfo_sampleLocationGridSize_height;
  @Uint32() int sampleLocationsInfo_sampleLocationsCount;
  Pointer<VkSampleLocationEXT> sampleLocationsInfo_pSampleLocations;
}

class VkPhysicalDeviceSampleLocationsPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int sampleLocationSampleCounts;
  @Uint32() int maxSampleLocationGridSize_width;
  @Uint32() int maxSampleLocationGridSize_height;
  @Float() double sampleLocationCoordinateRange_0; @Float() double sampleLocationCoordinateRange_1;
  @Uint32() int sampleLocationSubPixelBits;
  @Uint32() int variableSampleLocations;
}

class VkMultisamplePropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxSampleLocationGridSize_width;
  @Uint32() int maxSampleLocationGridSize_height;
}

class VkSamplerReductionModeCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int reductionMode;
}

class VkSamplerReductionModeCreateInfoEXT extends Struct {
}

class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int advancedBlendCoherentOperations;
}

class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int advancedBlendMaxColorAttachments;
  @Uint32() int advancedBlendIndependentBlend;
  @Uint32() int advancedBlendNonPremultipliedSrcColor;
  @Uint32() int advancedBlendNonPremultipliedDstColor;
  @Uint32() int advancedBlendCorrelatedOverlap;
  @Uint32() int advancedBlendAllOperations;
}

class VkPipelineColorBlendAdvancedStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int srcPremultiplied;
  @Uint32() int dstPremultiplied;
  @Int32() int blendOverlap;
}

class VkPhysicalDeviceInlineUniformBlockFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int inlineUniformBlock;
  @Uint32() int descriptorBindingInlineUniformBlockUpdateAfterBind;
}

class VkPhysicalDeviceInlineUniformBlockPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxInlineUniformBlockSize;
  @Uint32() int maxPerStageDescriptorInlineUniformBlocks;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
  @Uint32() int maxDescriptorSetInlineUniformBlocks;
  @Uint32() int maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
}

class VkWriteDescriptorSetInlineUniformBlockEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int dataSize;
  Pointer pData;
}

class VkDescriptorPoolInlineUniformBlockCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxInlineUniformBlockBindings;
}

class VkPipelineCoverageModulationStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int coverageModulationMode;
  @Uint32() int coverageModulationTableEnable;
  @Uint32() int coverageModulationTableCount;
  Pointer pCoverageModulationTable;
}

class VkImageFormatListCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int viewFormatCount;
  @Int32() int pViewFormats;
}

class VkImageFormatListCreateInfoKHR extends Struct {
}

class VkValidationCacheCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint64() int initialDataSize;
  Pointer pInitialData;
}

class VkShaderModuleValidationCacheCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkValidationCacheEXT> validationCache;
}

class VkPhysicalDeviceMaintenance3Properties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxPerSetDescriptors;
  @Uint64() int maxMemoryAllocationSize;
}

class VkPhysicalDeviceMaintenance3PropertiesKHR extends Struct {
}

class VkDescriptorSetLayoutSupport extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int supported;
}

class VkDescriptorSetLayoutSupportKHR extends Struct {
}

class VkPhysicalDeviceShaderDrawParametersFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderDrawParameters;
}

class VkPhysicalDeviceShaderDrawParameterFeatures extends Struct {
}

class VkPhysicalDeviceShaderFloat16Int8Features extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderFloat16;
  @Uint32() int shaderInt8;
}

class VkPhysicalDeviceShaderFloat16Int8FeaturesKHR extends Struct {
}

class VkPhysicalDeviceFloat16Int8FeaturesKHR extends Struct {
}

class VkPhysicalDeviceFloatControlsProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int denormBehaviorIndependence;
  @Int32() int roundingModeIndependence;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat16;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat32;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat64;
  @Uint32() int shaderDenormPreserveFloat16;
  @Uint32() int shaderDenormPreserveFloat32;
  @Uint32() int shaderDenormPreserveFloat64;
  @Uint32() int shaderDenormFlushToZeroFloat16;
  @Uint32() int shaderDenormFlushToZeroFloat32;
  @Uint32() int shaderDenormFlushToZeroFloat64;
  @Uint32() int shaderRoundingModeRTEFloat16;
  @Uint32() int shaderRoundingModeRTEFloat32;
  @Uint32() int shaderRoundingModeRTEFloat64;
  @Uint32() int shaderRoundingModeRTZFloat16;
  @Uint32() int shaderRoundingModeRTZFloat32;
  @Uint32() int shaderRoundingModeRTZFloat64;
}

class VkPhysicalDeviceFloatControlsPropertiesKHR extends Struct {
}

class VkPhysicalDeviceHostQueryResetFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int hostQueryReset;
}

class VkPhysicalDeviceHostQueryResetFeaturesEXT extends Struct {
}

class VkNativeBufferUsage2ANDROID extends Struct {
  @Uint64() int consumer;
  @Uint64() int producer;
}

class VkNativeBufferANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer handle;
  Pointer stride;
  Pointer format;
  Pointer usage;
  @Uint64() int usage2_consumer;
  @Uint64() int usage2_producer;
}

class VkSwapchainImageCreateInfoANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int usage;
}

class VkPhysicalDevicePresentationPropertiesANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int sharedImage;
}

class VkShaderResourceUsageAMD extends Struct {
  @Uint32() int numUsedVgprs;
  @Uint32() int numUsedSgprs;
  @Uint32() int ldsSizePerLocalWorkGroup;
  @Uint64() int ldsUsageSizeInBytes;
  @Uint64() int scratchMemUsageInBytes;
}

class VkShaderStatisticsInfoAMD extends Struct {
  @Uint32() int shaderStageMask;
  @Uint32() int resourceUsage_numUsedVgprs;
  @Uint32() int resourceUsage_numUsedSgprs;
  @Uint32() int resourceUsage_ldsSizePerLocalWorkGroup;
  @Uint64() int resourceUsage_ldsUsageSizeInBytes;
  @Uint64() int resourceUsage_scratchMemUsageInBytes;
  @Uint32() int numPhysicalVgprs;
  @Uint32() int numPhysicalSgprs;
  @Uint32() int numAvailableVgprs;
  @Uint32() int numAvailableSgprs;
  @Uint32() int computeWorkGroupSize_0; @Uint32() int computeWorkGroupSize_1; @Uint32() int computeWorkGroupSize_2;
}

class VkDeviceQueueGlobalPriorityCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int globalPriority;
}

class VkDebugUtilsObjectNameInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int objectType;
  @Uint64() int objectHandle;
  Pointer pObjectName;
}

class VkDebugUtilsObjectTagInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int objectType;
  @Uint64() int objectHandle;
  @Uint64() int tagName;
  @Uint64() int tagSize;
  Pointer pTag;
}

class VkDebugUtilsLabelEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pLabelName;
  @Float() double color_0; @Float() double color_1; @Float() double color_2; @Float() double color_3;
}

class VkDebugUtilsMessengerCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int messageSeverity;
  @Uint32() int messageType;
  Pointer pfnUserCallback;
  Pointer pUserData;
}

class VkDebugUtilsMessengerCallbackDataEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  Pointer pMessageIdName;
  @Int32() int messageIdNumber;
  Pointer pMessage;
  @Uint32() int queueLabelCount;
  Pointer<VkDebugUtilsLabelEXT> pQueueLabels;
  @Uint32() int cmdBufLabelCount;
  Pointer<VkDebugUtilsLabelEXT> pCmdBufLabels;
  @Uint32() int objectCount;
  Pointer<VkDebugUtilsObjectNameInfoEXT> pObjects;
}

class VkImportMemoryHostPointerInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int handleType;
  Pointer pHostPointer;
}

class VkMemoryHostPointerPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryTypeBits;
}

class VkPhysicalDeviceExternalMemoryHostPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int minImportedHostPointerAlignment;
}

class VkPhysicalDeviceConservativeRasterizationPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Float() double primitiveOverestimationSize;
  @Float() double maxExtraPrimitiveOverestimationSize;
  @Float() double extraPrimitiveOverestimationSizeGranularity;
  @Uint32() int primitiveUnderestimation;
  @Uint32() int conservativePointAndLineRasterization;
  @Uint32() int degenerateTrianglesRasterized;
  @Uint32() int degenerateLinesRasterized;
  @Uint32() int fullyCoveredFragmentShaderInputVariable;
  @Uint32() int conservativeRasterizationPostDepthCoverage;
}

class VkCalibratedTimestampInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int timeDomain;
}

class VkPhysicalDeviceShaderCorePropertiesAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderEngineCount;
  @Uint32() int shaderArraysPerEngineCount;
  @Uint32() int computeUnitsPerShaderArray;
  @Uint32() int simdPerComputeUnit;
  @Uint32() int wavefrontsPerSimd;
  @Uint32() int wavefrontSize;
  @Uint32() int sgprsPerSimd;
  @Uint32() int minSgprAllocation;
  @Uint32() int maxSgprAllocation;
  @Uint32() int sgprAllocationGranularity;
  @Uint32() int vgprsPerSimd;
  @Uint32() int minVgprAllocation;
  @Uint32() int maxVgprAllocation;
  @Uint32() int vgprAllocationGranularity;
}

class VkPhysicalDeviceShaderCoreProperties2AMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderCoreFeatures;
  @Uint32() int activeComputeUnitCount;
}

class VkPipelineRasterizationConservativeStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int conservativeRasterizationMode;
  @Float() double extraPrimitiveOverestimationSize;
}

class VkPhysicalDeviceDescriptorIndexingFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderInputAttachmentArrayDynamicIndexing;
  @Uint32() int shaderUniformTexelBufferArrayDynamicIndexing;
  @Uint32() int shaderStorageTexelBufferArrayDynamicIndexing;
  @Uint32() int shaderUniformBufferArrayNonUniformIndexing;
  @Uint32() int shaderSampledImageArrayNonUniformIndexing;
  @Uint32() int shaderStorageBufferArrayNonUniformIndexing;
  @Uint32() int shaderStorageImageArrayNonUniformIndexing;
  @Uint32() int shaderInputAttachmentArrayNonUniformIndexing;
  @Uint32() int shaderUniformTexelBufferArrayNonUniformIndexing;
  @Uint32() int shaderStorageTexelBufferArrayNonUniformIndexing;
  @Uint32() int descriptorBindingUniformBufferUpdateAfterBind;
  @Uint32() int descriptorBindingSampledImageUpdateAfterBind;
  @Uint32() int descriptorBindingStorageImageUpdateAfterBind;
  @Uint32() int descriptorBindingStorageBufferUpdateAfterBind;
  @Uint32() int descriptorBindingUniformTexelBufferUpdateAfterBind;
  @Uint32() int descriptorBindingStorageTexelBufferUpdateAfterBind;
  @Uint32() int descriptorBindingUpdateUnusedWhilePending;
  @Uint32() int descriptorBindingPartiallyBound;
  @Uint32() int descriptorBindingVariableDescriptorCount;
  @Uint32() int runtimeDescriptorArray;
}

class VkPhysicalDeviceDescriptorIndexingFeaturesEXT extends Struct {
}

class VkPhysicalDeviceDescriptorIndexingProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxUpdateAfterBindDescriptorsInAllPools;
  @Uint32() int shaderUniformBufferArrayNonUniformIndexingNative;
  @Uint32() int shaderSampledImageArrayNonUniformIndexingNative;
  @Uint32() int shaderStorageBufferArrayNonUniformIndexingNative;
  @Uint32() int shaderStorageImageArrayNonUniformIndexingNative;
  @Uint32() int shaderInputAttachmentArrayNonUniformIndexingNative;
  @Uint32() int robustBufferAccessUpdateAfterBind;
  @Uint32() int quadDivergentImplicitLod;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindSamplers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindUniformBuffers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindStorageBuffers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindSampledImages;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindStorageImages;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindInputAttachments;
  @Uint32() int maxPerStageUpdateAfterBindResources;
  @Uint32() int maxDescriptorSetUpdateAfterBindSamplers;
  @Uint32() int maxDescriptorSetUpdateAfterBindUniformBuffers;
  @Uint32() int maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageBuffers;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
  @Uint32() int maxDescriptorSetUpdateAfterBindSampledImages;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageImages;
  @Uint32() int maxDescriptorSetUpdateAfterBindInputAttachments;
}

class VkPhysicalDeviceDescriptorIndexingPropertiesEXT extends Struct {
}

class VkDescriptorSetLayoutBindingFlagsCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int bindingCount;
  Pointer pBindingFlags;
}

class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT extends Struct {
}

class VkDescriptorSetVariableDescriptorCountAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int descriptorSetCount;
  Pointer pDescriptorCounts;
}

class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT extends Struct {
}

class VkDescriptorSetVariableDescriptorCountLayoutSupport extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxVariableDescriptorCount;
}

class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT extends Struct {
}

class VkAttachmentDescription2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int format;
  @Int32() int samples;
  @Int32() int loadOp;
  @Int32() int storeOp;
  @Int32() int stencilLoadOp;
  @Int32() int stencilStoreOp;
  @Int32() int initialLayout;
  @Int32() int finalLayout;
}

class VkAttachmentDescription2KHR extends Struct {
}

class VkAttachmentReference2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int attachment;
  @Int32() int layout;
  @Uint32() int aspectMask;
}

class VkAttachmentReference2KHR extends Struct {
}

class VkSubpassDescription2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int pipelineBindPoint;
  @Uint32() int viewMask;
  @Uint32() int inputAttachmentCount;
  Pointer<VkAttachmentReference2> pInputAttachments;
  @Uint32() int colorAttachmentCount;
  Pointer<VkAttachmentReference2> pColorAttachments;
  Pointer<VkAttachmentReference2> pResolveAttachments;
  Pointer<VkAttachmentReference2> pDepthStencilAttachment;
  @Uint32() int preserveAttachmentCount;
  Pointer pPreserveAttachments;
}

class VkSubpassDescription2KHR extends Struct {
}

class VkSubpassDependency2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int srcSubpass;
  @Uint32() int dstSubpass;
  @Uint32() int srcStageMask;
  @Uint32() int dstStageMask;
  @Uint32() int srcAccessMask;
  @Uint32() int dstAccessMask;
  @Uint32() int dependencyFlags;
  @Int32() int viewOffset;
}

class VkSubpassDependency2KHR extends Struct {
}

class VkRenderPassCreateInfo2 extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int attachmentCount;
  Pointer<VkAttachmentDescription2> pAttachments;
  @Uint32() int subpassCount;
  Pointer<VkSubpassDescription2> pSubpasses;
  @Uint32() int dependencyCount;
  Pointer<VkSubpassDependency2> pDependencies;
  @Uint32() int correlatedViewMaskCount;
  Pointer pCorrelatedViewMasks;
}

class VkRenderPassCreateInfo2KHR extends Struct {
}

class VkSubpassBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int contents;
}

class VkSubpassBeginInfoKHR extends Struct {
}

class VkSubpassEndInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
}

class VkSubpassEndInfoKHR extends Struct {
}

class VkPhysicalDeviceTimelineSemaphoreFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int timelineSemaphore;
}

class VkPhysicalDeviceTimelineSemaphoreFeaturesKHR extends Struct {
}

class VkPhysicalDeviceTimelineSemaphoreProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int maxTimelineSemaphoreValueDifference;
}

class VkPhysicalDeviceTimelineSemaphorePropertiesKHR extends Struct {
}

class VkSemaphoreTypeCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int semaphoreType;
  @Uint64() int initialValue;
}

class VkSemaphoreTypeCreateInfoKHR extends Struct {
}

class VkTimelineSemaphoreSubmitInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int waitSemaphoreValueCount;
  Pointer pWaitSemaphoreValues;
  @Uint32() int signalSemaphoreValueCount;
  Pointer pSignalSemaphoreValues;
}

class VkTimelineSemaphoreSubmitInfoKHR extends Struct {
}

class VkSemaphoreWaitInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int semaphoreCount;
  Pointer<Pointer<VkSemaphore>> pSemaphores;
  Pointer pValues;
}

class VkSemaphoreWaitInfoKHR extends Struct {
}

class VkSemaphoreSignalInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkSemaphore> semaphore;
  @Uint64() int value;
}

class VkSemaphoreSignalInfoKHR extends Struct {
}

class VkVertexInputBindingDivisorDescriptionEXT extends Struct {
  @Uint32() int binding;
  @Uint32() int divisor;
}

class VkPipelineVertexInputDivisorStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int vertexBindingDivisorCount;
  Pointer<VkVertexInputBindingDivisorDescriptionEXT> pVertexBindingDivisors;
}

class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxVertexAttribDivisor;
}

class VkPhysicalDevicePCIBusInfoPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int pciDomain;
  @Uint32() int pciBus;
  @Uint32() int pciDevice;
  @Uint32() int pciFunction;
}

class VkImportAndroidHardwareBufferInfoANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer buffer;
}

class VkAndroidHardwareBufferUsageANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int androidHardwareBufferUsage;
}

class VkAndroidHardwareBufferPropertiesANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int allocationSize;
  @Uint32() int memoryTypeBits;
}

class VkMemoryGetAndroidHardwareBufferInfoANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeviceMemory> memory;
}

class VkAndroidHardwareBufferFormatPropertiesANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int format;
  @Uint64() int externalFormat;
  @Uint32() int formatFeatures;
  @Int32() int samplerYcbcrConversionComponents_r;
  @Int32() int samplerYcbcrConversionComponents_g;
  @Int32() int samplerYcbcrConversionComponents_b;
  @Int32() int samplerYcbcrConversionComponents_a;
  @Int32() int suggestedYcbcrModel;
  @Int32() int suggestedYcbcrRange;
  @Int32() int suggestedXChromaOffset;
  @Int32() int suggestedYChromaOffset;
}

class VkCommandBufferInheritanceConditionalRenderingInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int conditionalRenderingEnable;
}

class VkExternalFormatANDROID extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int externalFormat;
}

class VkPhysicalDevice8BitStorageFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int storageBuffer8BitAccess;
  @Uint32() int uniformAndStorageBuffer8BitAccess;
  @Uint32() int storagePushConstant8;
}

class VkPhysicalDevice8BitStorageFeaturesKHR extends Struct {
}

class VkPhysicalDeviceConditionalRenderingFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int conditionalRendering;
  @Uint32() int inheritedConditionalRendering;
}

class VkPhysicalDeviceVulkanMemoryModelFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int vulkanMemoryModel;
  @Uint32() int vulkanMemoryModelDeviceScope;
  @Uint32() int vulkanMemoryModelAvailabilityVisibilityChains;
}

class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR extends Struct {
}

class VkPhysicalDeviceShaderAtomicInt64Features extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderBufferInt64Atomics;
  @Uint32() int shaderSharedInt64Atomics;
}

class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR extends Struct {
}

class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int vertexAttributeInstanceRateDivisor;
  @Uint32() int vertexAttributeInstanceRateZeroDivisor;
}

class VkQueueFamilyCheckpointPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int checkpointExecutionStageMask;
}

class VkCheckpointDataNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int stage;
  Pointer pCheckpointMarker;
}

class VkPhysicalDeviceDepthStencilResolveProperties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int supportedDepthResolveModes;
  @Uint32() int supportedStencilResolveModes;
  @Uint32() int independentResolveNone;
  @Uint32() int independentResolve;
}

class VkPhysicalDeviceDepthStencilResolvePropertiesKHR extends Struct {
}

class VkSubpassDescriptionDepthStencilResolve extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int depthResolveMode;
  @Int32() int stencilResolveMode;
  Pointer<VkAttachmentReference2> pDepthStencilResolveAttachment;
}

class VkSubpassDescriptionDepthStencilResolveKHR extends Struct {
}

class VkImageViewASTCDecodeModeEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int decodeMode;
}

class VkPhysicalDeviceASTCDecodeFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int decodeModeSharedExponent;
}

class VkPhysicalDeviceTransformFeedbackFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int transformFeedback;
  @Uint32() int geometryStreams;
}

class VkPhysicalDeviceTransformFeedbackPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxTransformFeedbackStreams;
  @Uint32() int maxTransformFeedbackBuffers;
  @Uint64() int maxTransformFeedbackBufferSize;
  @Uint32() int maxTransformFeedbackStreamDataSize;
  @Uint32() int maxTransformFeedbackBufferDataSize;
  @Uint32() int maxTransformFeedbackBufferDataStride;
  @Uint32() int transformFeedbackQueries;
  @Uint32() int transformFeedbackStreamsLinesTriangles;
  @Uint32() int transformFeedbackRasterizationStreamSelect;
  @Uint32() int transformFeedbackDraw;
}

class VkPipelineRasterizationStateStreamCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int rasterizationStream;
}

class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int representativeFragmentTest;
}

class VkPipelineRepresentativeFragmentTestStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int representativeFragmentTestEnable;
}

class VkPhysicalDeviceExclusiveScissorFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int exclusiveScissor;
}

class VkPipelineViewportExclusiveScissorStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int exclusiveScissorCount;
  Pointer<VkRect2D> pExclusiveScissors;
}

class VkPhysicalDeviceCornerSampledImageFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int cornerSampledImage;
}

class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int computeDerivativeGroupQuads;
  @Uint32() int computeDerivativeGroupLinear;
}

class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int fragmentShaderBarycentric;
}

class VkPhysicalDeviceShaderImageFootprintFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int imageFootprint;
}

class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int dedicatedAllocationImageAliasing;
}

class VkShadingRatePaletteNV extends Struct {
  @Uint32() int shadingRatePaletteEntryCount;
  @Int32() int pShadingRatePaletteEntries;
}

class VkPipelineViewportShadingRateImageStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shadingRateImageEnable;
  @Uint32() int viewportCount;
  Pointer<VkShadingRatePaletteNV> pShadingRatePalettes;
}

class VkPhysicalDeviceShadingRateImageFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shadingRateImage;
  @Uint32() int shadingRateCoarseSampleOrder;
}

class VkPhysicalDeviceShadingRateImagePropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shadingRateTexelSize_width;
  @Uint32() int shadingRateTexelSize_height;
  @Uint32() int shadingRatePaletteSize;
  @Uint32() int shadingRateMaxCoarseSamples;
}

class VkCoarseSampleLocationNV extends Struct {
  @Uint32() int pixelX;
  @Uint32() int pixelY;
  @Uint32() int sample;
}

class VkCoarseSampleOrderCustomNV extends Struct {
  @Int32() int shadingRate;
  @Uint32() int sampleCount;
  @Uint32() int sampleLocationCount;
  Pointer<VkCoarseSampleLocationNV> pSampleLocations;
}

class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int sampleOrderType;
  @Uint32() int customSampleOrderCount;
  Pointer<VkCoarseSampleOrderCustomNV> pCustomSampleOrders;
}

class VkPhysicalDeviceMeshShaderFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int taskShader;
  @Uint32() int meshShader;
}

class VkPhysicalDeviceMeshShaderPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxDrawMeshTasksCount;
  @Uint32() int maxTaskWorkGroupInvocations;
  @Uint32() int maxTaskWorkGroupSize_0; @Uint32() int maxTaskWorkGroupSize_1; @Uint32() int maxTaskWorkGroupSize_2;
  @Uint32() int maxTaskTotalMemorySize;
  @Uint32() int maxTaskOutputCount;
  @Uint32() int maxMeshWorkGroupInvocations;
  @Uint32() int maxMeshWorkGroupSize_0; @Uint32() int maxMeshWorkGroupSize_1; @Uint32() int maxMeshWorkGroupSize_2;
  @Uint32() int maxMeshTotalMemorySize;
  @Uint32() int maxMeshOutputVertices;
  @Uint32() int maxMeshOutputPrimitives;
  @Uint32() int maxMeshMultiviewViewCount;
  @Uint32() int meshOutputPerVertexGranularity;
  @Uint32() int meshOutputPerPrimitiveGranularity;
}

class VkDrawMeshTasksIndirectCommandNV extends Struct {
  @Uint32() int taskCount;
  @Uint32() int firstTask;
}

class VkRayTracingShaderGroupCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
  @Uint32() int generalShader;
  @Uint32() int closestHitShader;
  @Uint32() int anyHitShader;
  @Uint32() int intersectionShader;
}

class VkRayTracingShaderGroupCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
  @Uint32() int generalShader;
  @Uint32() int closestHitShader;
  @Uint32() int anyHitShader;
  @Uint32() int intersectionShader;
  Pointer pShaderGroupCaptureReplayHandle;
}

class VkRayTracingPipelineCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int stageCount;
  Pointer<VkPipelineShaderStageCreateInfo> pStages;
  @Uint32() int groupCount;
  Pointer<VkRayTracingShaderGroupCreateInfoNV> pGroups;
  @Uint32() int maxRecursionDepth;
  Pointer<VkPipelineLayout> layout;
  Pointer<VkPipeline> basePipelineHandle;
  @Int32() int basePipelineIndex;
}

class VkRayTracingPipelineCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int stageCount;
  Pointer<VkPipelineShaderStageCreateInfo> pStages;
  @Uint32() int groupCount;
  Pointer<VkRayTracingShaderGroupCreateInfoKHR> pGroups;
  @Uint32() int maxRecursionDepth;
  @Int32() int libraries_sType;
  Pointer libraries_pNext;
  @Uint32() int libraries_libraryCount;
  Pointer<Pointer<VkPipeline>> libraries_pLibraries;
  Pointer<VkRayTracingPipelineInterfaceCreateInfoKHR> pLibraryInterface;
  Pointer<VkPipelineLayout> layout;
  Pointer<VkPipeline> basePipelineHandle;
  @Int32() int basePipelineIndex;
}

class VkGeometryTrianglesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> vertexData;
  @Uint64() int vertexOffset;
  @Uint32() int vertexCount;
  @Uint64() int vertexStride;
  @Int32() int vertexFormat;
  Pointer<VkBuffer> indexData;
  @Uint64() int indexOffset;
  @Uint32() int indexCount;
  @Int32() int indexType;
  Pointer<VkBuffer> transformData;
  @Uint64() int transformOffset;
}

class VkGeometryAABBNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> aabbData;
  @Uint32() int numAABBs;
  @Uint32() int stride;
  @Uint64() int offset;
}

class VkGeometryDataNV extends Struct {
  @Int32() int triangles_sType;
  Pointer triangles_pNext;
  Pointer<VkBuffer> triangles_vertexData;
  @Uint64() int triangles_vertexOffset;
  @Uint32() int triangles_vertexCount;
  @Uint64() int triangles_vertexStride;
  @Int32() int triangles_vertexFormat;
  Pointer<VkBuffer> triangles_indexData;
  @Uint64() int triangles_indexOffset;
  @Uint32() int triangles_indexCount;
  @Int32() int triangles_indexType;
  Pointer<VkBuffer> triangles_transformData;
  @Uint64() int triangles_transformOffset;
  @Int32() int aabbs_sType;
  Pointer aabbs_pNext;
  Pointer<VkBuffer> aabbs_aabbData;
  @Uint32() int aabbs_numAABBs;
  @Uint32() int aabbs_stride;
  @Uint64() int aabbs_offset;
}

class VkGeometryNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int geometryType;
  @Int32() int geometry_triangles_sType;
  Pointer geometry_triangles_pNext;
  Pointer<VkBuffer> geometry_triangles_vertexData;
  @Uint64() int geometry_triangles_vertexOffset;
  @Uint32() int geometry_triangles_vertexCount;
  @Uint64() int geometry_triangles_vertexStride;
  @Int32() int geometry_triangles_vertexFormat;
  Pointer<VkBuffer> geometry_triangles_indexData;
  @Uint64() int geometry_triangles_indexOffset;
  @Uint32() int geometry_triangles_indexCount;
  @Int32() int geometry_triangles_indexType;
  Pointer<VkBuffer> geometry_triangles_transformData;
  @Uint64() int geometry_triangles_transformOffset;
  @Int32() int geometry_aabbs_sType;
  Pointer geometry_aabbs_pNext;
  Pointer<VkBuffer> geometry_aabbs_aabbData;
  @Uint32() int geometry_aabbs_numAABBs;
  @Uint32() int geometry_aabbs_stride;
  @Uint64() int geometry_aabbs_offset;
  @Uint32() int flags;
}

class VkAccelerationStructureInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer type;
  Pointer flags;
  @Uint32() int instanceCount;
  @Uint32() int geometryCount;
  Pointer<VkGeometryNV> pGeometries;
}

class VkAccelerationStructureCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int compactedSize;
  @Int32() int info_sType;
  Pointer info_pNext;
  Pointer info_type;
  Pointer info_flags;
  @Uint32() int info_instanceCount;
  @Uint32() int info_geometryCount;
  Pointer<VkGeometryNV> info_pGeometries;
}

class VkBindAccelerationStructureMemoryInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkAccelerationStructureKHR> accelerationStructure;
  Pointer<VkDeviceMemory> memory;
  @Uint64() int memoryOffset;
  @Uint32() int deviceIndexCount;
  Pointer pDeviceIndices;
}

class VkBindAccelerationStructureMemoryInfoNV extends Struct {
}

class VkWriteDescriptorSetAccelerationStructureKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int accelerationStructureCount;
  Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures;
}

class VkWriteDescriptorSetAccelerationStructureNV extends Struct {
}

class VkAccelerationStructureMemoryRequirementsInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
  @Int32() int buildType;
  Pointer<VkAccelerationStructureKHR> accelerationStructure;
}

class VkAccelerationStructureMemoryRequirementsInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer type;
  Pointer accelerationStructure;
}

class VkPhysicalDeviceRayTracingFeaturesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int rayTracing;
  @Uint32() int rayTracingShaderGroupHandleCaptureReplay;
  @Uint32() int rayTracingShaderGroupHandleCaptureReplayMixed;
  @Uint32() int rayTracingAccelerationStructureCaptureReplay;
  @Uint32() int rayTracingIndirectTraceRays;
  @Uint32() int rayTracingIndirectAccelerationStructureBuild;
  @Uint32() int rayTracingHostAccelerationStructureCommands;
  @Uint32() int rayQuery;
  @Uint32() int rayTracingPrimitiveCulling;
}

class VkPhysicalDeviceRayTracingPropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderGroupHandleSize;
  @Uint32() int maxRecursionDepth;
  @Uint32() int maxShaderGroupStride;
  @Uint32() int shaderGroupBaseAlignment;
  @Uint64() int maxGeometryCount;
  @Uint64() int maxInstanceCount;
  @Uint64() int maxPrimitiveCount;
  @Uint32() int maxDescriptorSetAccelerationStructures;
  @Uint32() int shaderGroupHandleCaptureReplaySize;
}

class VkPhysicalDeviceRayTracingPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderGroupHandleSize;
  @Uint32() int maxRecursionDepth;
  @Uint32() int maxShaderGroupStride;
  @Uint32() int shaderGroupBaseAlignment;
  @Uint64() int maxGeometryCount;
  @Uint64() int maxInstanceCount;
  @Uint64() int maxTriangleCount;
  @Uint32() int maxDescriptorSetAccelerationStructures;
}

class VkStridedBufferRegionKHR extends Struct {
  Pointer<VkBuffer> buffer;
  @Uint64() int offset;
  @Uint64() int stride;
  @Uint64() int size;
}

class VkTraceRaysIndirectCommandKHR extends Struct {
  @Uint32() int width;
  @Uint32() int height;
  @Uint32() int depth;
}

class VkDrmFormatModifierPropertiesListEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int drmFormatModifierCount;
  Pointer<VkDrmFormatModifierPropertiesEXT> pDrmFormatModifierProperties;
}

class VkDrmFormatModifierPropertiesEXT extends Struct {
  @Uint64() int drmFormatModifier;
  @Uint32() int drmFormatModifierPlaneCount;
  @Uint32() int drmFormatModifierTilingFeatures;
}

class VkPhysicalDeviceImageDrmFormatModifierInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int drmFormatModifier;
  @Int32() int sharingMode;
  @Uint32() int queueFamilyIndexCount;
  Pointer pQueueFamilyIndices;
}

class VkImageDrmFormatModifierListCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int drmFormatModifierCount;
  Pointer pDrmFormatModifiers;
}

class VkImageDrmFormatModifierExplicitCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int drmFormatModifier;
  @Uint32() int drmFormatModifierPlaneCount;
  Pointer<VkSubresourceLayout> pPlaneLayouts;
}

class VkImageDrmFormatModifierPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int drmFormatModifier;
}

class VkImageStencilUsageCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int stencilUsage;
}

class VkImageStencilUsageCreateInfoEXT extends Struct {
}

class VkDeviceMemoryOverallocationCreateInfoAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int overallocationBehavior;
}

class VkPhysicalDeviceFragmentDensityMapFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int fragmentDensityMap;
  @Uint32() int fragmentDensityMapDynamic;
  @Uint32() int fragmentDensityMapNonSubsampledImages;
}

class VkPhysicalDeviceFragmentDensityMapPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int minFragmentDensityTexelSize_width;
  @Uint32() int minFragmentDensityTexelSize_height;
  @Uint32() int maxFragmentDensityTexelSize_width;
  @Uint32() int maxFragmentDensityTexelSize_height;
  @Uint32() int fragmentDensityInvocations;
}

class VkRenderPassFragmentDensityMapCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int fragmentDensityMapAttachment_attachment;
  @Int32() int fragmentDensityMapAttachment_layout;
}

class VkPhysicalDeviceScalarBlockLayoutFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int scalarBlockLayout;
}

class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT extends Struct {
}

class VkSurfaceProtectedCapabilitiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int supportsProtected;
}

class VkPhysicalDeviceUniformBufferStandardLayoutFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int uniformBufferStandardLayout;
}

class VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR extends Struct {
}

class VkPhysicalDeviceDepthClipEnableFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int depthClipEnable;
}

class VkPipelineRasterizationDepthClipStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int depthClipEnable;
}

class VkPhysicalDeviceMemoryBudgetPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int heapBudget_0; @Uint64() int heapBudget_1; @Uint64() int heapBudget_2; @Uint64() int heapBudget_3; @Uint64() int heapBudget_4; @Uint64() int heapBudget_5; @Uint64() int heapBudget_6; @Uint64() int heapBudget_7; @Uint64() int heapBudget_8; @Uint64() int heapBudget_9; @Uint64() int heapBudget_10; @Uint64() int heapBudget_11; @Uint64() int heapBudget_12; @Uint64() int heapBudget_13; @Uint64() int heapBudget_14; @Uint64() int heapBudget_15;
  @Uint64() int heapUsage_0; @Uint64() int heapUsage_1; @Uint64() int heapUsage_2; @Uint64() int heapUsage_3; @Uint64() int heapUsage_4; @Uint64() int heapUsage_5; @Uint64() int heapUsage_6; @Uint64() int heapUsage_7; @Uint64() int heapUsage_8; @Uint64() int heapUsage_9; @Uint64() int heapUsage_10; @Uint64() int heapUsage_11; @Uint64() int heapUsage_12; @Uint64() int heapUsage_13; @Uint64() int heapUsage_14; @Uint64() int heapUsage_15;
}

class VkPhysicalDeviceMemoryPriorityFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int memoryPriority;
}

class VkMemoryPriorityAllocateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Float() double priority;
}

class VkPhysicalDeviceBufferDeviceAddressFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int bufferDeviceAddress;
  @Uint32() int bufferDeviceAddressCaptureReplay;
  @Uint32() int bufferDeviceAddressMultiDevice;
}

class VkPhysicalDeviceBufferDeviceAddressFeaturesKHR extends Struct {
}

class VkPhysicalDeviceBufferDeviceAddressFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int bufferDeviceAddress;
  @Uint32() int bufferDeviceAddressCaptureReplay;
  @Uint32() int bufferDeviceAddressMultiDevice;
}

class VkPhysicalDeviceBufferAddressFeaturesEXT extends Struct {
}

class VkBufferDeviceAddressInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkBuffer> buffer;
}

class VkBufferDeviceAddressInfoKHR extends Struct {
}

class VkBufferDeviceAddressInfoEXT extends Struct {
}

class VkBufferOpaqueCaptureAddressCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int opaqueCaptureAddress;
}

class VkBufferOpaqueCaptureAddressCreateInfoKHR extends Struct {
}

class VkBufferDeviceAddressCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int deviceAddress;
}

class VkPhysicalDeviceImageViewImageFormatInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int imageViewType;
}

class VkFilterCubicImageViewImageFormatPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int filterCubic;
  @Uint32() int filterCubicMinmax;
}

class VkPhysicalDeviceImagelessFramebufferFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int imagelessFramebuffer;
}

class VkPhysicalDeviceImagelessFramebufferFeaturesKHR extends Struct {
}

class VkFramebufferAttachmentsCreateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int attachmentImageInfoCount;
  Pointer<VkFramebufferAttachmentImageInfo> pAttachmentImageInfos;
}

class VkFramebufferAttachmentsCreateInfoKHR extends Struct {
}

class VkFramebufferAttachmentImageInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint32() int usage;
  @Uint32() int width;
  @Uint32() int height;
  @Uint32() int layerCount;
  @Uint32() int viewFormatCount;
  @Int32() int pViewFormats;
}

class VkFramebufferAttachmentImageInfoKHR extends Struct {
}

class VkRenderPassAttachmentBeginInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int attachmentCount;
  Pointer<Pointer<VkImageView>> pAttachments;
}

class VkRenderPassAttachmentBeginInfoKHR extends Struct {
}

class VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int textureCompressionASTC_HDR;
}

class VkPhysicalDeviceCooperativeMatrixFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int cooperativeMatrix;
  @Uint32() int cooperativeMatrixRobustBufferAccess;
}

class VkPhysicalDeviceCooperativeMatrixPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int cooperativeMatrixSupportedStages;
}

class VkCooperativeMatrixPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int MSize;
  @Uint32() int NSize;
  @Uint32() int KSize;
  @Int32() int AType;
  @Int32() int BType;
  @Int32() int CType;
  @Int32() int DType;
  @Int32() int scope;
}

class VkPhysicalDeviceYcbcrImageArraysFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int ycbcrImageArrays;
}

class VkImageViewHandleInfoNVX extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkImageView> imageView;
  @Int32() int descriptorType;
  Pointer<VkSampler> sampler;
}

class VkImageViewAddressPropertiesNVX extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int deviceAddress;
  @Uint64() int size;
}

class VkPresentFrameTokenGGP extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer frameToken;
}

class VkPipelineCreationFeedbackEXT extends Struct {
  @Uint32() int flags;
  @Uint64() int duration;
}

class VkPipelineCreationFeedbackCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkPipelineCreationFeedbackEXT> pPipelineCreationFeedback;
  @Uint32() int pipelineStageCreationFeedbackCount;
  Pointer<VkPipelineCreationFeedbackEXT> pPipelineStageCreationFeedbacks;
}

class VkSurfaceFullScreenExclusiveInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int fullScreenExclusive;
}

class VkSurfaceFullScreenExclusiveWin32InfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer hmonitor;
}

class VkSurfaceCapabilitiesFullScreenExclusiveEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int fullScreenExclusiveSupported;
}

class VkPhysicalDevicePerformanceQueryFeaturesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int performanceCounterQueryPools;
  @Uint32() int performanceCounterMultipleQueryPools;
}

class VkPhysicalDevicePerformanceQueryPropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int allowCommandBufferQueryCopies;
}

class VkPerformanceCounterKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int unit;
  @Int32() int scope;
  @Int32() int storage;
  @Uint8() int uuid_0; @Uint8() int uuid_1; @Uint8() int uuid_2; @Uint8() int uuid_3; @Uint8() int uuid_4; @Uint8() int uuid_5; @Uint8() int uuid_6; @Uint8() int uuid_7; @Uint8() int uuid_8; @Uint8() int uuid_9; @Uint8() int uuid_10; @Uint8() int uuid_11; @Uint8() int uuid_12; @Uint8() int uuid_13; @Uint8() int uuid_14; @Uint8() int uuid_15;
  String get uuid {
    var bytes = [uuid_0, uuid_1, uuid_2, uuid_3, uuid_4, uuid_5, uuid_6, uuid_7, uuid_8, uuid_9, uuid_10, uuid_11, uuid_12, uuid_13, uuid_14, uuid_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set uuid(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { uuid_0 = bytes[0]; } if (bytes.isNotEmpty) { uuid_1 = bytes[1]; } if (bytes.isNotEmpty) { uuid_2 = bytes[2]; } if (bytes.isNotEmpty) { uuid_3 = bytes[3]; } if (bytes.isNotEmpty) { uuid_4 = bytes[4]; } if (bytes.isNotEmpty) { uuid_5 = bytes[5]; } if (bytes.isNotEmpty) { uuid_6 = bytes[6]; } if (bytes.isNotEmpty) { uuid_7 = bytes[7]; } if (bytes.isNotEmpty) { uuid_8 = bytes[8]; } if (bytes.isNotEmpty) { uuid_9 = bytes[9]; } if (bytes.isNotEmpty) { uuid_10 = bytes[10]; } if (bytes.isNotEmpty) { uuid_11 = bytes[11]; } if (bytes.isNotEmpty) { uuid_12 = bytes[12]; } if (bytes.isNotEmpty) { uuid_13 = bytes[13]; } if (bytes.isNotEmpty) { uuid_14 = bytes[14]; } if (bytes.isNotEmpty) { uuid_15 = bytes[15]; }
  }
}

class VkPerformanceCounterDescriptionKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint8() int name_0; @Uint8() int name_1; @Uint8() int name_2; @Uint8() int name_3; @Uint8() int name_4; @Uint8() int name_5; @Uint8() int name_6; @Uint8() int name_7; @Uint8() int name_8; @Uint8() int name_9; @Uint8() int name_10; @Uint8() int name_11; @Uint8() int name_12; @Uint8() int name_13; @Uint8() int name_14; @Uint8() int name_15; @Uint8() int name_16; @Uint8() int name_17; @Uint8() int name_18; @Uint8() int name_19; @Uint8() int name_20; @Uint8() int name_21; @Uint8() int name_22; @Uint8() int name_23; @Uint8() int name_24; @Uint8() int name_25; @Uint8() int name_26; @Uint8() int name_27; @Uint8() int name_28; @Uint8() int name_29; @Uint8() int name_30; @Uint8() int name_31; @Uint8() int name_32; @Uint8() int name_33; @Uint8() int name_34; @Uint8() int name_35; @Uint8() int name_36; @Uint8() int name_37; @Uint8() int name_38; @Uint8() int name_39; @Uint8() int name_40; @Uint8() int name_41; @Uint8() int name_42; @Uint8() int name_43; @Uint8() int name_44; @Uint8() int name_45; @Uint8() int name_46; @Uint8() int name_47; @Uint8() int name_48; @Uint8() int name_49; @Uint8() int name_50; @Uint8() int name_51; @Uint8() int name_52; @Uint8() int name_53; @Uint8() int name_54; @Uint8() int name_55; @Uint8() int name_56; @Uint8() int name_57; @Uint8() int name_58; @Uint8() int name_59; @Uint8() int name_60; @Uint8() int name_61; @Uint8() int name_62; @Uint8() int name_63; @Uint8() int name_64; @Uint8() int name_65; @Uint8() int name_66; @Uint8() int name_67; @Uint8() int name_68; @Uint8() int name_69; @Uint8() int name_70; @Uint8() int name_71; @Uint8() int name_72; @Uint8() int name_73; @Uint8() int name_74; @Uint8() int name_75; @Uint8() int name_76; @Uint8() int name_77; @Uint8() int name_78; @Uint8() int name_79; @Uint8() int name_80; @Uint8() int name_81; @Uint8() int name_82; @Uint8() int name_83; @Uint8() int name_84; @Uint8() int name_85; @Uint8() int name_86; @Uint8() int name_87; @Uint8() int name_88; @Uint8() int name_89; @Uint8() int name_90; @Uint8() int name_91; @Uint8() int name_92; @Uint8() int name_93; @Uint8() int name_94; @Uint8() int name_95; @Uint8() int name_96; @Uint8() int name_97; @Uint8() int name_98; @Uint8() int name_99; @Uint8() int name_100; @Uint8() int name_101; @Uint8() int name_102; @Uint8() int name_103; @Uint8() int name_104; @Uint8() int name_105; @Uint8() int name_106; @Uint8() int name_107; @Uint8() int name_108; @Uint8() int name_109; @Uint8() int name_110; @Uint8() int name_111; @Uint8() int name_112; @Uint8() int name_113; @Uint8() int name_114; @Uint8() int name_115; @Uint8() int name_116; @Uint8() int name_117; @Uint8() int name_118; @Uint8() int name_119; @Uint8() int name_120; @Uint8() int name_121; @Uint8() int name_122; @Uint8() int name_123; @Uint8() int name_124; @Uint8() int name_125; @Uint8() int name_126; @Uint8() int name_127; @Uint8() int name_128; @Uint8() int name_129; @Uint8() int name_130; @Uint8() int name_131; @Uint8() int name_132; @Uint8() int name_133; @Uint8() int name_134; @Uint8() int name_135; @Uint8() int name_136; @Uint8() int name_137; @Uint8() int name_138; @Uint8() int name_139; @Uint8() int name_140; @Uint8() int name_141; @Uint8() int name_142; @Uint8() int name_143; @Uint8() int name_144; @Uint8() int name_145; @Uint8() int name_146; @Uint8() int name_147; @Uint8() int name_148; @Uint8() int name_149; @Uint8() int name_150; @Uint8() int name_151; @Uint8() int name_152; @Uint8() int name_153; @Uint8() int name_154; @Uint8() int name_155; @Uint8() int name_156; @Uint8() int name_157; @Uint8() int name_158; @Uint8() int name_159; @Uint8() int name_160; @Uint8() int name_161; @Uint8() int name_162; @Uint8() int name_163; @Uint8() int name_164; @Uint8() int name_165; @Uint8() int name_166; @Uint8() int name_167; @Uint8() int name_168; @Uint8() int name_169; @Uint8() int name_170; @Uint8() int name_171; @Uint8() int name_172; @Uint8() int name_173; @Uint8() int name_174; @Uint8() int name_175; @Uint8() int name_176; @Uint8() int name_177; @Uint8() int name_178; @Uint8() int name_179; @Uint8() int name_180; @Uint8() int name_181; @Uint8() int name_182; @Uint8() int name_183; @Uint8() int name_184; @Uint8() int name_185; @Uint8() int name_186; @Uint8() int name_187; @Uint8() int name_188; @Uint8() int name_189; @Uint8() int name_190; @Uint8() int name_191; @Uint8() int name_192; @Uint8() int name_193; @Uint8() int name_194; @Uint8() int name_195; @Uint8() int name_196; @Uint8() int name_197; @Uint8() int name_198; @Uint8() int name_199; @Uint8() int name_200; @Uint8() int name_201; @Uint8() int name_202; @Uint8() int name_203; @Uint8() int name_204; @Uint8() int name_205; @Uint8() int name_206; @Uint8() int name_207; @Uint8() int name_208; @Uint8() int name_209; @Uint8() int name_210; @Uint8() int name_211; @Uint8() int name_212; @Uint8() int name_213; @Uint8() int name_214; @Uint8() int name_215; @Uint8() int name_216; @Uint8() int name_217; @Uint8() int name_218; @Uint8() int name_219; @Uint8() int name_220; @Uint8() int name_221; @Uint8() int name_222; @Uint8() int name_223; @Uint8() int name_224; @Uint8() int name_225; @Uint8() int name_226; @Uint8() int name_227; @Uint8() int name_228; @Uint8() int name_229; @Uint8() int name_230; @Uint8() int name_231; @Uint8() int name_232; @Uint8() int name_233; @Uint8() int name_234; @Uint8() int name_235; @Uint8() int name_236; @Uint8() int name_237; @Uint8() int name_238; @Uint8() int name_239; @Uint8() int name_240; @Uint8() int name_241; @Uint8() int name_242; @Uint8() int name_243; @Uint8() int name_244; @Uint8() int name_245; @Uint8() int name_246; @Uint8() int name_247; @Uint8() int name_248; @Uint8() int name_249; @Uint8() int name_250; @Uint8() int name_251; @Uint8() int name_252; @Uint8() int name_253; @Uint8() int name_254; @Uint8() int name_255;
  String get name {
    var bytes = [name_0, name_1, name_2, name_3, name_4, name_5, name_6, name_7, name_8, name_9, name_10, name_11, name_12, name_13, name_14, name_15, name_16, name_17, name_18, name_19, name_20, name_21, name_22, name_23, name_24, name_25, name_26, name_27, name_28, name_29, name_30, name_31, name_32, name_33, name_34, name_35, name_36, name_37, name_38, name_39, name_40, name_41, name_42, name_43, name_44, name_45, name_46, name_47, name_48, name_49, name_50, name_51, name_52, name_53, name_54, name_55, name_56, name_57, name_58, name_59, name_60, name_61, name_62, name_63, name_64, name_65, name_66, name_67, name_68, name_69, name_70, name_71, name_72, name_73, name_74, name_75, name_76, name_77, name_78, name_79, name_80, name_81, name_82, name_83, name_84, name_85, name_86, name_87, name_88, name_89, name_90, name_91, name_92, name_93, name_94, name_95, name_96, name_97, name_98, name_99, name_100, name_101, name_102, name_103, name_104, name_105, name_106, name_107, name_108, name_109, name_110, name_111, name_112, name_113, name_114, name_115, name_116, name_117, name_118, name_119, name_120, name_121, name_122, name_123, name_124, name_125, name_126, name_127, name_128, name_129, name_130, name_131, name_132, name_133, name_134, name_135, name_136, name_137, name_138, name_139, name_140, name_141, name_142, name_143, name_144, name_145, name_146, name_147, name_148, name_149, name_150, name_151, name_152, name_153, name_154, name_155, name_156, name_157, name_158, name_159, name_160, name_161, name_162, name_163, name_164, name_165, name_166, name_167, name_168, name_169, name_170, name_171, name_172, name_173, name_174, name_175, name_176, name_177, name_178, name_179, name_180, name_181, name_182, name_183, name_184, name_185, name_186, name_187, name_188, name_189, name_190, name_191, name_192, name_193, name_194, name_195, name_196, name_197, name_198, name_199, name_200, name_201, name_202, name_203, name_204, name_205, name_206, name_207, name_208, name_209, name_210, name_211, name_212, name_213, name_214, name_215, name_216, name_217, name_218, name_219, name_220, name_221, name_222, name_223, name_224, name_225, name_226, name_227, name_228, name_229, name_230, name_231, name_232, name_233, name_234, name_235, name_236, name_237, name_238, name_239, name_240, name_241, name_242, name_243, name_244, name_245, name_246, name_247, name_248, name_249, name_250, name_251, name_252, name_253, name_254, name_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set name(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { name_0 = bytes[0]; } if (bytes.isNotEmpty) { name_1 = bytes[1]; } if (bytes.isNotEmpty) { name_2 = bytes[2]; } if (bytes.isNotEmpty) { name_3 = bytes[3]; } if (bytes.isNotEmpty) { name_4 = bytes[4]; } if (bytes.isNotEmpty) { name_5 = bytes[5]; } if (bytes.isNotEmpty) { name_6 = bytes[6]; } if (bytes.isNotEmpty) { name_7 = bytes[7]; } if (bytes.isNotEmpty) { name_8 = bytes[8]; } if (bytes.isNotEmpty) { name_9 = bytes[9]; } if (bytes.isNotEmpty) { name_10 = bytes[10]; } if (bytes.isNotEmpty) { name_11 = bytes[11]; } if (bytes.isNotEmpty) { name_12 = bytes[12]; } if (bytes.isNotEmpty) { name_13 = bytes[13]; } if (bytes.isNotEmpty) { name_14 = bytes[14]; } if (bytes.isNotEmpty) { name_15 = bytes[15]; } if (bytes.isNotEmpty) { name_16 = bytes[16]; } if (bytes.isNotEmpty) { name_17 = bytes[17]; } if (bytes.isNotEmpty) { name_18 = bytes[18]; } if (bytes.isNotEmpty) { name_19 = bytes[19]; } if (bytes.isNotEmpty) { name_20 = bytes[20]; } if (bytes.isNotEmpty) { name_21 = bytes[21]; } if (bytes.isNotEmpty) { name_22 = bytes[22]; } if (bytes.isNotEmpty) { name_23 = bytes[23]; } if (bytes.isNotEmpty) { name_24 = bytes[24]; } if (bytes.isNotEmpty) { name_25 = bytes[25]; } if (bytes.isNotEmpty) { name_26 = bytes[26]; } if (bytes.isNotEmpty) { name_27 = bytes[27]; } if (bytes.isNotEmpty) { name_28 = bytes[28]; } if (bytes.isNotEmpty) { name_29 = bytes[29]; } if (bytes.isNotEmpty) { name_30 = bytes[30]; } if (bytes.isNotEmpty) { name_31 = bytes[31]; } if (bytes.isNotEmpty) { name_32 = bytes[32]; } if (bytes.isNotEmpty) { name_33 = bytes[33]; } if (bytes.isNotEmpty) { name_34 = bytes[34]; } if (bytes.isNotEmpty) { name_35 = bytes[35]; } if (bytes.isNotEmpty) { name_36 = bytes[36]; } if (bytes.isNotEmpty) { name_37 = bytes[37]; } if (bytes.isNotEmpty) { name_38 = bytes[38]; } if (bytes.isNotEmpty) { name_39 = bytes[39]; } if (bytes.isNotEmpty) { name_40 = bytes[40]; } if (bytes.isNotEmpty) { name_41 = bytes[41]; } if (bytes.isNotEmpty) { name_42 = bytes[42]; } if (bytes.isNotEmpty) { name_43 = bytes[43]; } if (bytes.isNotEmpty) { name_44 = bytes[44]; } if (bytes.isNotEmpty) { name_45 = bytes[45]; } if (bytes.isNotEmpty) { name_46 = bytes[46]; } if (bytes.isNotEmpty) { name_47 = bytes[47]; } if (bytes.isNotEmpty) { name_48 = bytes[48]; } if (bytes.isNotEmpty) { name_49 = bytes[49]; } if (bytes.isNotEmpty) { name_50 = bytes[50]; } if (bytes.isNotEmpty) { name_51 = bytes[51]; } if (bytes.isNotEmpty) { name_52 = bytes[52]; } if (bytes.isNotEmpty) { name_53 = bytes[53]; } if (bytes.isNotEmpty) { name_54 = bytes[54]; } if (bytes.isNotEmpty) { name_55 = bytes[55]; } if (bytes.isNotEmpty) { name_56 = bytes[56]; } if (bytes.isNotEmpty) { name_57 = bytes[57]; } if (bytes.isNotEmpty) { name_58 = bytes[58]; } if (bytes.isNotEmpty) { name_59 = bytes[59]; } if (bytes.isNotEmpty) { name_60 = bytes[60]; } if (bytes.isNotEmpty) { name_61 = bytes[61]; } if (bytes.isNotEmpty) { name_62 = bytes[62]; } if (bytes.isNotEmpty) { name_63 = bytes[63]; } if (bytes.isNotEmpty) { name_64 = bytes[64]; } if (bytes.isNotEmpty) { name_65 = bytes[65]; } if (bytes.isNotEmpty) { name_66 = bytes[66]; } if (bytes.isNotEmpty) { name_67 = bytes[67]; } if (bytes.isNotEmpty) { name_68 = bytes[68]; } if (bytes.isNotEmpty) { name_69 = bytes[69]; } if (bytes.isNotEmpty) { name_70 = bytes[70]; } if (bytes.isNotEmpty) { name_71 = bytes[71]; } if (bytes.isNotEmpty) { name_72 = bytes[72]; } if (bytes.isNotEmpty) { name_73 = bytes[73]; } if (bytes.isNotEmpty) { name_74 = bytes[74]; } if (bytes.isNotEmpty) { name_75 = bytes[75]; } if (bytes.isNotEmpty) { name_76 = bytes[76]; } if (bytes.isNotEmpty) { name_77 = bytes[77]; } if (bytes.isNotEmpty) { name_78 = bytes[78]; } if (bytes.isNotEmpty) { name_79 = bytes[79]; } if (bytes.isNotEmpty) { name_80 = bytes[80]; } if (bytes.isNotEmpty) { name_81 = bytes[81]; } if (bytes.isNotEmpty) { name_82 = bytes[82]; } if (bytes.isNotEmpty) { name_83 = bytes[83]; } if (bytes.isNotEmpty) { name_84 = bytes[84]; } if (bytes.isNotEmpty) { name_85 = bytes[85]; } if (bytes.isNotEmpty) { name_86 = bytes[86]; } if (bytes.isNotEmpty) { name_87 = bytes[87]; } if (bytes.isNotEmpty) { name_88 = bytes[88]; } if (bytes.isNotEmpty) { name_89 = bytes[89]; } if (bytes.isNotEmpty) { name_90 = bytes[90]; } if (bytes.isNotEmpty) { name_91 = bytes[91]; } if (bytes.isNotEmpty) { name_92 = bytes[92]; } if (bytes.isNotEmpty) { name_93 = bytes[93]; } if (bytes.isNotEmpty) { name_94 = bytes[94]; } if (bytes.isNotEmpty) { name_95 = bytes[95]; } if (bytes.isNotEmpty) { name_96 = bytes[96]; } if (bytes.isNotEmpty) { name_97 = bytes[97]; } if (bytes.isNotEmpty) { name_98 = bytes[98]; } if (bytes.isNotEmpty) { name_99 = bytes[99]; } if (bytes.isNotEmpty) { name_100 = bytes[100]; } if (bytes.isNotEmpty) { name_101 = bytes[101]; } if (bytes.isNotEmpty) { name_102 = bytes[102]; } if (bytes.isNotEmpty) { name_103 = bytes[103]; } if (bytes.isNotEmpty) { name_104 = bytes[104]; } if (bytes.isNotEmpty) { name_105 = bytes[105]; } if (bytes.isNotEmpty) { name_106 = bytes[106]; } if (bytes.isNotEmpty) { name_107 = bytes[107]; } if (bytes.isNotEmpty) { name_108 = bytes[108]; } if (bytes.isNotEmpty) { name_109 = bytes[109]; } if (bytes.isNotEmpty) { name_110 = bytes[110]; } if (bytes.isNotEmpty) { name_111 = bytes[111]; } if (bytes.isNotEmpty) { name_112 = bytes[112]; } if (bytes.isNotEmpty) { name_113 = bytes[113]; } if (bytes.isNotEmpty) { name_114 = bytes[114]; } if (bytes.isNotEmpty) { name_115 = bytes[115]; } if (bytes.isNotEmpty) { name_116 = bytes[116]; } if (bytes.isNotEmpty) { name_117 = bytes[117]; } if (bytes.isNotEmpty) { name_118 = bytes[118]; } if (bytes.isNotEmpty) { name_119 = bytes[119]; } if (bytes.isNotEmpty) { name_120 = bytes[120]; } if (bytes.isNotEmpty) { name_121 = bytes[121]; } if (bytes.isNotEmpty) { name_122 = bytes[122]; } if (bytes.isNotEmpty) { name_123 = bytes[123]; } if (bytes.isNotEmpty) { name_124 = bytes[124]; } if (bytes.isNotEmpty) { name_125 = bytes[125]; } if (bytes.isNotEmpty) { name_126 = bytes[126]; } if (bytes.isNotEmpty) { name_127 = bytes[127]; } if (bytes.isNotEmpty) { name_128 = bytes[128]; } if (bytes.isNotEmpty) { name_129 = bytes[129]; } if (bytes.isNotEmpty) { name_130 = bytes[130]; } if (bytes.isNotEmpty) { name_131 = bytes[131]; } if (bytes.isNotEmpty) { name_132 = bytes[132]; } if (bytes.isNotEmpty) { name_133 = bytes[133]; } if (bytes.isNotEmpty) { name_134 = bytes[134]; } if (bytes.isNotEmpty) { name_135 = bytes[135]; } if (bytes.isNotEmpty) { name_136 = bytes[136]; } if (bytes.isNotEmpty) { name_137 = bytes[137]; } if (bytes.isNotEmpty) { name_138 = bytes[138]; } if (bytes.isNotEmpty) { name_139 = bytes[139]; } if (bytes.isNotEmpty) { name_140 = bytes[140]; } if (bytes.isNotEmpty) { name_141 = bytes[141]; } if (bytes.isNotEmpty) { name_142 = bytes[142]; } if (bytes.isNotEmpty) { name_143 = bytes[143]; } if (bytes.isNotEmpty) { name_144 = bytes[144]; } if (bytes.isNotEmpty) { name_145 = bytes[145]; } if (bytes.isNotEmpty) { name_146 = bytes[146]; } if (bytes.isNotEmpty) { name_147 = bytes[147]; } if (bytes.isNotEmpty) { name_148 = bytes[148]; } if (bytes.isNotEmpty) { name_149 = bytes[149]; } if (bytes.isNotEmpty) { name_150 = bytes[150]; } if (bytes.isNotEmpty) { name_151 = bytes[151]; } if (bytes.isNotEmpty) { name_152 = bytes[152]; } if (bytes.isNotEmpty) { name_153 = bytes[153]; } if (bytes.isNotEmpty) { name_154 = bytes[154]; } if (bytes.isNotEmpty) { name_155 = bytes[155]; } if (bytes.isNotEmpty) { name_156 = bytes[156]; } if (bytes.isNotEmpty) { name_157 = bytes[157]; } if (bytes.isNotEmpty) { name_158 = bytes[158]; } if (bytes.isNotEmpty) { name_159 = bytes[159]; } if (bytes.isNotEmpty) { name_160 = bytes[160]; } if (bytes.isNotEmpty) { name_161 = bytes[161]; } if (bytes.isNotEmpty) { name_162 = bytes[162]; } if (bytes.isNotEmpty) { name_163 = bytes[163]; } if (bytes.isNotEmpty) { name_164 = bytes[164]; } if (bytes.isNotEmpty) { name_165 = bytes[165]; } if (bytes.isNotEmpty) { name_166 = bytes[166]; } if (bytes.isNotEmpty) { name_167 = bytes[167]; } if (bytes.isNotEmpty) { name_168 = bytes[168]; } if (bytes.isNotEmpty) { name_169 = bytes[169]; } if (bytes.isNotEmpty) { name_170 = bytes[170]; } if (bytes.isNotEmpty) { name_171 = bytes[171]; } if (bytes.isNotEmpty) { name_172 = bytes[172]; } if (bytes.isNotEmpty) { name_173 = bytes[173]; } if (bytes.isNotEmpty) { name_174 = bytes[174]; } if (bytes.isNotEmpty) { name_175 = bytes[175]; } if (bytes.isNotEmpty) { name_176 = bytes[176]; } if (bytes.isNotEmpty) { name_177 = bytes[177]; } if (bytes.isNotEmpty) { name_178 = bytes[178]; } if (bytes.isNotEmpty) { name_179 = bytes[179]; } if (bytes.isNotEmpty) { name_180 = bytes[180]; } if (bytes.isNotEmpty) { name_181 = bytes[181]; } if (bytes.isNotEmpty) { name_182 = bytes[182]; } if (bytes.isNotEmpty) { name_183 = bytes[183]; } if (bytes.isNotEmpty) { name_184 = bytes[184]; } if (bytes.isNotEmpty) { name_185 = bytes[185]; } if (bytes.isNotEmpty) { name_186 = bytes[186]; } if (bytes.isNotEmpty) { name_187 = bytes[187]; } if (bytes.isNotEmpty) { name_188 = bytes[188]; } if (bytes.isNotEmpty) { name_189 = bytes[189]; } if (bytes.isNotEmpty) { name_190 = bytes[190]; } if (bytes.isNotEmpty) { name_191 = bytes[191]; } if (bytes.isNotEmpty) { name_192 = bytes[192]; } if (bytes.isNotEmpty) { name_193 = bytes[193]; } if (bytes.isNotEmpty) { name_194 = bytes[194]; } if (bytes.isNotEmpty) { name_195 = bytes[195]; } if (bytes.isNotEmpty) { name_196 = bytes[196]; } if (bytes.isNotEmpty) { name_197 = bytes[197]; } if (bytes.isNotEmpty) { name_198 = bytes[198]; } if (bytes.isNotEmpty) { name_199 = bytes[199]; } if (bytes.isNotEmpty) { name_200 = bytes[200]; } if (bytes.isNotEmpty) { name_201 = bytes[201]; } if (bytes.isNotEmpty) { name_202 = bytes[202]; } if (bytes.isNotEmpty) { name_203 = bytes[203]; } if (bytes.isNotEmpty) { name_204 = bytes[204]; } if (bytes.isNotEmpty) { name_205 = bytes[205]; } if (bytes.isNotEmpty) { name_206 = bytes[206]; } if (bytes.isNotEmpty) { name_207 = bytes[207]; } if (bytes.isNotEmpty) { name_208 = bytes[208]; } if (bytes.isNotEmpty) { name_209 = bytes[209]; } if (bytes.isNotEmpty) { name_210 = bytes[210]; } if (bytes.isNotEmpty) { name_211 = bytes[211]; } if (bytes.isNotEmpty) { name_212 = bytes[212]; } if (bytes.isNotEmpty) { name_213 = bytes[213]; } if (bytes.isNotEmpty) { name_214 = bytes[214]; } if (bytes.isNotEmpty) { name_215 = bytes[215]; } if (bytes.isNotEmpty) { name_216 = bytes[216]; } if (bytes.isNotEmpty) { name_217 = bytes[217]; } if (bytes.isNotEmpty) { name_218 = bytes[218]; } if (bytes.isNotEmpty) { name_219 = bytes[219]; } if (bytes.isNotEmpty) { name_220 = bytes[220]; } if (bytes.isNotEmpty) { name_221 = bytes[221]; } if (bytes.isNotEmpty) { name_222 = bytes[222]; } if (bytes.isNotEmpty) { name_223 = bytes[223]; } if (bytes.isNotEmpty) { name_224 = bytes[224]; } if (bytes.isNotEmpty) { name_225 = bytes[225]; } if (bytes.isNotEmpty) { name_226 = bytes[226]; } if (bytes.isNotEmpty) { name_227 = bytes[227]; } if (bytes.isNotEmpty) { name_228 = bytes[228]; } if (bytes.isNotEmpty) { name_229 = bytes[229]; } if (bytes.isNotEmpty) { name_230 = bytes[230]; } if (bytes.isNotEmpty) { name_231 = bytes[231]; } if (bytes.isNotEmpty) { name_232 = bytes[232]; } if (bytes.isNotEmpty) { name_233 = bytes[233]; } if (bytes.isNotEmpty) { name_234 = bytes[234]; } if (bytes.isNotEmpty) { name_235 = bytes[235]; } if (bytes.isNotEmpty) { name_236 = bytes[236]; } if (bytes.isNotEmpty) { name_237 = bytes[237]; } if (bytes.isNotEmpty) { name_238 = bytes[238]; } if (bytes.isNotEmpty) { name_239 = bytes[239]; } if (bytes.isNotEmpty) { name_240 = bytes[240]; } if (bytes.isNotEmpty) { name_241 = bytes[241]; } if (bytes.isNotEmpty) { name_242 = bytes[242]; } if (bytes.isNotEmpty) { name_243 = bytes[243]; } if (bytes.isNotEmpty) { name_244 = bytes[244]; } if (bytes.isNotEmpty) { name_245 = bytes[245]; } if (bytes.isNotEmpty) { name_246 = bytes[246]; } if (bytes.isNotEmpty) { name_247 = bytes[247]; } if (bytes.isNotEmpty) { name_248 = bytes[248]; } if (bytes.isNotEmpty) { name_249 = bytes[249]; } if (bytes.isNotEmpty) { name_250 = bytes[250]; } if (bytes.isNotEmpty) { name_251 = bytes[251]; } if (bytes.isNotEmpty) { name_252 = bytes[252]; } if (bytes.isNotEmpty) { name_253 = bytes[253]; } if (bytes.isNotEmpty) { name_254 = bytes[254]; } if (bytes.isNotEmpty) { name_255 = bytes[255]; }
  }
  @Uint8() int category_0; @Uint8() int category_1; @Uint8() int category_2; @Uint8() int category_3; @Uint8() int category_4; @Uint8() int category_5; @Uint8() int category_6; @Uint8() int category_7; @Uint8() int category_8; @Uint8() int category_9; @Uint8() int category_10; @Uint8() int category_11; @Uint8() int category_12; @Uint8() int category_13; @Uint8() int category_14; @Uint8() int category_15; @Uint8() int category_16; @Uint8() int category_17; @Uint8() int category_18; @Uint8() int category_19; @Uint8() int category_20; @Uint8() int category_21; @Uint8() int category_22; @Uint8() int category_23; @Uint8() int category_24; @Uint8() int category_25; @Uint8() int category_26; @Uint8() int category_27; @Uint8() int category_28; @Uint8() int category_29; @Uint8() int category_30; @Uint8() int category_31; @Uint8() int category_32; @Uint8() int category_33; @Uint8() int category_34; @Uint8() int category_35; @Uint8() int category_36; @Uint8() int category_37; @Uint8() int category_38; @Uint8() int category_39; @Uint8() int category_40; @Uint8() int category_41; @Uint8() int category_42; @Uint8() int category_43; @Uint8() int category_44; @Uint8() int category_45; @Uint8() int category_46; @Uint8() int category_47; @Uint8() int category_48; @Uint8() int category_49; @Uint8() int category_50; @Uint8() int category_51; @Uint8() int category_52; @Uint8() int category_53; @Uint8() int category_54; @Uint8() int category_55; @Uint8() int category_56; @Uint8() int category_57; @Uint8() int category_58; @Uint8() int category_59; @Uint8() int category_60; @Uint8() int category_61; @Uint8() int category_62; @Uint8() int category_63; @Uint8() int category_64; @Uint8() int category_65; @Uint8() int category_66; @Uint8() int category_67; @Uint8() int category_68; @Uint8() int category_69; @Uint8() int category_70; @Uint8() int category_71; @Uint8() int category_72; @Uint8() int category_73; @Uint8() int category_74; @Uint8() int category_75; @Uint8() int category_76; @Uint8() int category_77; @Uint8() int category_78; @Uint8() int category_79; @Uint8() int category_80; @Uint8() int category_81; @Uint8() int category_82; @Uint8() int category_83; @Uint8() int category_84; @Uint8() int category_85; @Uint8() int category_86; @Uint8() int category_87; @Uint8() int category_88; @Uint8() int category_89; @Uint8() int category_90; @Uint8() int category_91; @Uint8() int category_92; @Uint8() int category_93; @Uint8() int category_94; @Uint8() int category_95; @Uint8() int category_96; @Uint8() int category_97; @Uint8() int category_98; @Uint8() int category_99; @Uint8() int category_100; @Uint8() int category_101; @Uint8() int category_102; @Uint8() int category_103; @Uint8() int category_104; @Uint8() int category_105; @Uint8() int category_106; @Uint8() int category_107; @Uint8() int category_108; @Uint8() int category_109; @Uint8() int category_110; @Uint8() int category_111; @Uint8() int category_112; @Uint8() int category_113; @Uint8() int category_114; @Uint8() int category_115; @Uint8() int category_116; @Uint8() int category_117; @Uint8() int category_118; @Uint8() int category_119; @Uint8() int category_120; @Uint8() int category_121; @Uint8() int category_122; @Uint8() int category_123; @Uint8() int category_124; @Uint8() int category_125; @Uint8() int category_126; @Uint8() int category_127; @Uint8() int category_128; @Uint8() int category_129; @Uint8() int category_130; @Uint8() int category_131; @Uint8() int category_132; @Uint8() int category_133; @Uint8() int category_134; @Uint8() int category_135; @Uint8() int category_136; @Uint8() int category_137; @Uint8() int category_138; @Uint8() int category_139; @Uint8() int category_140; @Uint8() int category_141; @Uint8() int category_142; @Uint8() int category_143; @Uint8() int category_144; @Uint8() int category_145; @Uint8() int category_146; @Uint8() int category_147; @Uint8() int category_148; @Uint8() int category_149; @Uint8() int category_150; @Uint8() int category_151; @Uint8() int category_152; @Uint8() int category_153; @Uint8() int category_154; @Uint8() int category_155; @Uint8() int category_156; @Uint8() int category_157; @Uint8() int category_158; @Uint8() int category_159; @Uint8() int category_160; @Uint8() int category_161; @Uint8() int category_162; @Uint8() int category_163; @Uint8() int category_164; @Uint8() int category_165; @Uint8() int category_166; @Uint8() int category_167; @Uint8() int category_168; @Uint8() int category_169; @Uint8() int category_170; @Uint8() int category_171; @Uint8() int category_172; @Uint8() int category_173; @Uint8() int category_174; @Uint8() int category_175; @Uint8() int category_176; @Uint8() int category_177; @Uint8() int category_178; @Uint8() int category_179; @Uint8() int category_180; @Uint8() int category_181; @Uint8() int category_182; @Uint8() int category_183; @Uint8() int category_184; @Uint8() int category_185; @Uint8() int category_186; @Uint8() int category_187; @Uint8() int category_188; @Uint8() int category_189; @Uint8() int category_190; @Uint8() int category_191; @Uint8() int category_192; @Uint8() int category_193; @Uint8() int category_194; @Uint8() int category_195; @Uint8() int category_196; @Uint8() int category_197; @Uint8() int category_198; @Uint8() int category_199; @Uint8() int category_200; @Uint8() int category_201; @Uint8() int category_202; @Uint8() int category_203; @Uint8() int category_204; @Uint8() int category_205; @Uint8() int category_206; @Uint8() int category_207; @Uint8() int category_208; @Uint8() int category_209; @Uint8() int category_210; @Uint8() int category_211; @Uint8() int category_212; @Uint8() int category_213; @Uint8() int category_214; @Uint8() int category_215; @Uint8() int category_216; @Uint8() int category_217; @Uint8() int category_218; @Uint8() int category_219; @Uint8() int category_220; @Uint8() int category_221; @Uint8() int category_222; @Uint8() int category_223; @Uint8() int category_224; @Uint8() int category_225; @Uint8() int category_226; @Uint8() int category_227; @Uint8() int category_228; @Uint8() int category_229; @Uint8() int category_230; @Uint8() int category_231; @Uint8() int category_232; @Uint8() int category_233; @Uint8() int category_234; @Uint8() int category_235; @Uint8() int category_236; @Uint8() int category_237; @Uint8() int category_238; @Uint8() int category_239; @Uint8() int category_240; @Uint8() int category_241; @Uint8() int category_242; @Uint8() int category_243; @Uint8() int category_244; @Uint8() int category_245; @Uint8() int category_246; @Uint8() int category_247; @Uint8() int category_248; @Uint8() int category_249; @Uint8() int category_250; @Uint8() int category_251; @Uint8() int category_252; @Uint8() int category_253; @Uint8() int category_254; @Uint8() int category_255;
  String get category {
    var bytes = [category_0, category_1, category_2, category_3, category_4, category_5, category_6, category_7, category_8, category_9, category_10, category_11, category_12, category_13, category_14, category_15, category_16, category_17, category_18, category_19, category_20, category_21, category_22, category_23, category_24, category_25, category_26, category_27, category_28, category_29, category_30, category_31, category_32, category_33, category_34, category_35, category_36, category_37, category_38, category_39, category_40, category_41, category_42, category_43, category_44, category_45, category_46, category_47, category_48, category_49, category_50, category_51, category_52, category_53, category_54, category_55, category_56, category_57, category_58, category_59, category_60, category_61, category_62, category_63, category_64, category_65, category_66, category_67, category_68, category_69, category_70, category_71, category_72, category_73, category_74, category_75, category_76, category_77, category_78, category_79, category_80, category_81, category_82, category_83, category_84, category_85, category_86, category_87, category_88, category_89, category_90, category_91, category_92, category_93, category_94, category_95, category_96, category_97, category_98, category_99, category_100, category_101, category_102, category_103, category_104, category_105, category_106, category_107, category_108, category_109, category_110, category_111, category_112, category_113, category_114, category_115, category_116, category_117, category_118, category_119, category_120, category_121, category_122, category_123, category_124, category_125, category_126, category_127, category_128, category_129, category_130, category_131, category_132, category_133, category_134, category_135, category_136, category_137, category_138, category_139, category_140, category_141, category_142, category_143, category_144, category_145, category_146, category_147, category_148, category_149, category_150, category_151, category_152, category_153, category_154, category_155, category_156, category_157, category_158, category_159, category_160, category_161, category_162, category_163, category_164, category_165, category_166, category_167, category_168, category_169, category_170, category_171, category_172, category_173, category_174, category_175, category_176, category_177, category_178, category_179, category_180, category_181, category_182, category_183, category_184, category_185, category_186, category_187, category_188, category_189, category_190, category_191, category_192, category_193, category_194, category_195, category_196, category_197, category_198, category_199, category_200, category_201, category_202, category_203, category_204, category_205, category_206, category_207, category_208, category_209, category_210, category_211, category_212, category_213, category_214, category_215, category_216, category_217, category_218, category_219, category_220, category_221, category_222, category_223, category_224, category_225, category_226, category_227, category_228, category_229, category_230, category_231, category_232, category_233, category_234, category_235, category_236, category_237, category_238, category_239, category_240, category_241, category_242, category_243, category_244, category_245, category_246, category_247, category_248, category_249, category_250, category_251, category_252, category_253, category_254, category_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set category(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { category_0 = bytes[0]; } if (bytes.isNotEmpty) { category_1 = bytes[1]; } if (bytes.isNotEmpty) { category_2 = bytes[2]; } if (bytes.isNotEmpty) { category_3 = bytes[3]; } if (bytes.isNotEmpty) { category_4 = bytes[4]; } if (bytes.isNotEmpty) { category_5 = bytes[5]; } if (bytes.isNotEmpty) { category_6 = bytes[6]; } if (bytes.isNotEmpty) { category_7 = bytes[7]; } if (bytes.isNotEmpty) { category_8 = bytes[8]; } if (bytes.isNotEmpty) { category_9 = bytes[9]; } if (bytes.isNotEmpty) { category_10 = bytes[10]; } if (bytes.isNotEmpty) { category_11 = bytes[11]; } if (bytes.isNotEmpty) { category_12 = bytes[12]; } if (bytes.isNotEmpty) { category_13 = bytes[13]; } if (bytes.isNotEmpty) { category_14 = bytes[14]; } if (bytes.isNotEmpty) { category_15 = bytes[15]; } if (bytes.isNotEmpty) { category_16 = bytes[16]; } if (bytes.isNotEmpty) { category_17 = bytes[17]; } if (bytes.isNotEmpty) { category_18 = bytes[18]; } if (bytes.isNotEmpty) { category_19 = bytes[19]; } if (bytes.isNotEmpty) { category_20 = bytes[20]; } if (bytes.isNotEmpty) { category_21 = bytes[21]; } if (bytes.isNotEmpty) { category_22 = bytes[22]; } if (bytes.isNotEmpty) { category_23 = bytes[23]; } if (bytes.isNotEmpty) { category_24 = bytes[24]; } if (bytes.isNotEmpty) { category_25 = bytes[25]; } if (bytes.isNotEmpty) { category_26 = bytes[26]; } if (bytes.isNotEmpty) { category_27 = bytes[27]; } if (bytes.isNotEmpty) { category_28 = bytes[28]; } if (bytes.isNotEmpty) { category_29 = bytes[29]; } if (bytes.isNotEmpty) { category_30 = bytes[30]; } if (bytes.isNotEmpty) { category_31 = bytes[31]; } if (bytes.isNotEmpty) { category_32 = bytes[32]; } if (bytes.isNotEmpty) { category_33 = bytes[33]; } if (bytes.isNotEmpty) { category_34 = bytes[34]; } if (bytes.isNotEmpty) { category_35 = bytes[35]; } if (bytes.isNotEmpty) { category_36 = bytes[36]; } if (bytes.isNotEmpty) { category_37 = bytes[37]; } if (bytes.isNotEmpty) { category_38 = bytes[38]; } if (bytes.isNotEmpty) { category_39 = bytes[39]; } if (bytes.isNotEmpty) { category_40 = bytes[40]; } if (bytes.isNotEmpty) { category_41 = bytes[41]; } if (bytes.isNotEmpty) { category_42 = bytes[42]; } if (bytes.isNotEmpty) { category_43 = bytes[43]; } if (bytes.isNotEmpty) { category_44 = bytes[44]; } if (bytes.isNotEmpty) { category_45 = bytes[45]; } if (bytes.isNotEmpty) { category_46 = bytes[46]; } if (bytes.isNotEmpty) { category_47 = bytes[47]; } if (bytes.isNotEmpty) { category_48 = bytes[48]; } if (bytes.isNotEmpty) { category_49 = bytes[49]; } if (bytes.isNotEmpty) { category_50 = bytes[50]; } if (bytes.isNotEmpty) { category_51 = bytes[51]; } if (bytes.isNotEmpty) { category_52 = bytes[52]; } if (bytes.isNotEmpty) { category_53 = bytes[53]; } if (bytes.isNotEmpty) { category_54 = bytes[54]; } if (bytes.isNotEmpty) { category_55 = bytes[55]; } if (bytes.isNotEmpty) { category_56 = bytes[56]; } if (bytes.isNotEmpty) { category_57 = bytes[57]; } if (bytes.isNotEmpty) { category_58 = bytes[58]; } if (bytes.isNotEmpty) { category_59 = bytes[59]; } if (bytes.isNotEmpty) { category_60 = bytes[60]; } if (bytes.isNotEmpty) { category_61 = bytes[61]; } if (bytes.isNotEmpty) { category_62 = bytes[62]; } if (bytes.isNotEmpty) { category_63 = bytes[63]; } if (bytes.isNotEmpty) { category_64 = bytes[64]; } if (bytes.isNotEmpty) { category_65 = bytes[65]; } if (bytes.isNotEmpty) { category_66 = bytes[66]; } if (bytes.isNotEmpty) { category_67 = bytes[67]; } if (bytes.isNotEmpty) { category_68 = bytes[68]; } if (bytes.isNotEmpty) { category_69 = bytes[69]; } if (bytes.isNotEmpty) { category_70 = bytes[70]; } if (bytes.isNotEmpty) { category_71 = bytes[71]; } if (bytes.isNotEmpty) { category_72 = bytes[72]; } if (bytes.isNotEmpty) { category_73 = bytes[73]; } if (bytes.isNotEmpty) { category_74 = bytes[74]; } if (bytes.isNotEmpty) { category_75 = bytes[75]; } if (bytes.isNotEmpty) { category_76 = bytes[76]; } if (bytes.isNotEmpty) { category_77 = bytes[77]; } if (bytes.isNotEmpty) { category_78 = bytes[78]; } if (bytes.isNotEmpty) { category_79 = bytes[79]; } if (bytes.isNotEmpty) { category_80 = bytes[80]; } if (bytes.isNotEmpty) { category_81 = bytes[81]; } if (bytes.isNotEmpty) { category_82 = bytes[82]; } if (bytes.isNotEmpty) { category_83 = bytes[83]; } if (bytes.isNotEmpty) { category_84 = bytes[84]; } if (bytes.isNotEmpty) { category_85 = bytes[85]; } if (bytes.isNotEmpty) { category_86 = bytes[86]; } if (bytes.isNotEmpty) { category_87 = bytes[87]; } if (bytes.isNotEmpty) { category_88 = bytes[88]; } if (bytes.isNotEmpty) { category_89 = bytes[89]; } if (bytes.isNotEmpty) { category_90 = bytes[90]; } if (bytes.isNotEmpty) { category_91 = bytes[91]; } if (bytes.isNotEmpty) { category_92 = bytes[92]; } if (bytes.isNotEmpty) { category_93 = bytes[93]; } if (bytes.isNotEmpty) { category_94 = bytes[94]; } if (bytes.isNotEmpty) { category_95 = bytes[95]; } if (bytes.isNotEmpty) { category_96 = bytes[96]; } if (bytes.isNotEmpty) { category_97 = bytes[97]; } if (bytes.isNotEmpty) { category_98 = bytes[98]; } if (bytes.isNotEmpty) { category_99 = bytes[99]; } if (bytes.isNotEmpty) { category_100 = bytes[100]; } if (bytes.isNotEmpty) { category_101 = bytes[101]; } if (bytes.isNotEmpty) { category_102 = bytes[102]; } if (bytes.isNotEmpty) { category_103 = bytes[103]; } if (bytes.isNotEmpty) { category_104 = bytes[104]; } if (bytes.isNotEmpty) { category_105 = bytes[105]; } if (bytes.isNotEmpty) { category_106 = bytes[106]; } if (bytes.isNotEmpty) { category_107 = bytes[107]; } if (bytes.isNotEmpty) { category_108 = bytes[108]; } if (bytes.isNotEmpty) { category_109 = bytes[109]; } if (bytes.isNotEmpty) { category_110 = bytes[110]; } if (bytes.isNotEmpty) { category_111 = bytes[111]; } if (bytes.isNotEmpty) { category_112 = bytes[112]; } if (bytes.isNotEmpty) { category_113 = bytes[113]; } if (bytes.isNotEmpty) { category_114 = bytes[114]; } if (bytes.isNotEmpty) { category_115 = bytes[115]; } if (bytes.isNotEmpty) { category_116 = bytes[116]; } if (bytes.isNotEmpty) { category_117 = bytes[117]; } if (bytes.isNotEmpty) { category_118 = bytes[118]; } if (bytes.isNotEmpty) { category_119 = bytes[119]; } if (bytes.isNotEmpty) { category_120 = bytes[120]; } if (bytes.isNotEmpty) { category_121 = bytes[121]; } if (bytes.isNotEmpty) { category_122 = bytes[122]; } if (bytes.isNotEmpty) { category_123 = bytes[123]; } if (bytes.isNotEmpty) { category_124 = bytes[124]; } if (bytes.isNotEmpty) { category_125 = bytes[125]; } if (bytes.isNotEmpty) { category_126 = bytes[126]; } if (bytes.isNotEmpty) { category_127 = bytes[127]; } if (bytes.isNotEmpty) { category_128 = bytes[128]; } if (bytes.isNotEmpty) { category_129 = bytes[129]; } if (bytes.isNotEmpty) { category_130 = bytes[130]; } if (bytes.isNotEmpty) { category_131 = bytes[131]; } if (bytes.isNotEmpty) { category_132 = bytes[132]; } if (bytes.isNotEmpty) { category_133 = bytes[133]; } if (bytes.isNotEmpty) { category_134 = bytes[134]; } if (bytes.isNotEmpty) { category_135 = bytes[135]; } if (bytes.isNotEmpty) { category_136 = bytes[136]; } if (bytes.isNotEmpty) { category_137 = bytes[137]; } if (bytes.isNotEmpty) { category_138 = bytes[138]; } if (bytes.isNotEmpty) { category_139 = bytes[139]; } if (bytes.isNotEmpty) { category_140 = bytes[140]; } if (bytes.isNotEmpty) { category_141 = bytes[141]; } if (bytes.isNotEmpty) { category_142 = bytes[142]; } if (bytes.isNotEmpty) { category_143 = bytes[143]; } if (bytes.isNotEmpty) { category_144 = bytes[144]; } if (bytes.isNotEmpty) { category_145 = bytes[145]; } if (bytes.isNotEmpty) { category_146 = bytes[146]; } if (bytes.isNotEmpty) { category_147 = bytes[147]; } if (bytes.isNotEmpty) { category_148 = bytes[148]; } if (bytes.isNotEmpty) { category_149 = bytes[149]; } if (bytes.isNotEmpty) { category_150 = bytes[150]; } if (bytes.isNotEmpty) { category_151 = bytes[151]; } if (bytes.isNotEmpty) { category_152 = bytes[152]; } if (bytes.isNotEmpty) { category_153 = bytes[153]; } if (bytes.isNotEmpty) { category_154 = bytes[154]; } if (bytes.isNotEmpty) { category_155 = bytes[155]; } if (bytes.isNotEmpty) { category_156 = bytes[156]; } if (bytes.isNotEmpty) { category_157 = bytes[157]; } if (bytes.isNotEmpty) { category_158 = bytes[158]; } if (bytes.isNotEmpty) { category_159 = bytes[159]; } if (bytes.isNotEmpty) { category_160 = bytes[160]; } if (bytes.isNotEmpty) { category_161 = bytes[161]; } if (bytes.isNotEmpty) { category_162 = bytes[162]; } if (bytes.isNotEmpty) { category_163 = bytes[163]; } if (bytes.isNotEmpty) { category_164 = bytes[164]; } if (bytes.isNotEmpty) { category_165 = bytes[165]; } if (bytes.isNotEmpty) { category_166 = bytes[166]; } if (bytes.isNotEmpty) { category_167 = bytes[167]; } if (bytes.isNotEmpty) { category_168 = bytes[168]; } if (bytes.isNotEmpty) { category_169 = bytes[169]; } if (bytes.isNotEmpty) { category_170 = bytes[170]; } if (bytes.isNotEmpty) { category_171 = bytes[171]; } if (bytes.isNotEmpty) { category_172 = bytes[172]; } if (bytes.isNotEmpty) { category_173 = bytes[173]; } if (bytes.isNotEmpty) { category_174 = bytes[174]; } if (bytes.isNotEmpty) { category_175 = bytes[175]; } if (bytes.isNotEmpty) { category_176 = bytes[176]; } if (bytes.isNotEmpty) { category_177 = bytes[177]; } if (bytes.isNotEmpty) { category_178 = bytes[178]; } if (bytes.isNotEmpty) { category_179 = bytes[179]; } if (bytes.isNotEmpty) { category_180 = bytes[180]; } if (bytes.isNotEmpty) { category_181 = bytes[181]; } if (bytes.isNotEmpty) { category_182 = bytes[182]; } if (bytes.isNotEmpty) { category_183 = bytes[183]; } if (bytes.isNotEmpty) { category_184 = bytes[184]; } if (bytes.isNotEmpty) { category_185 = bytes[185]; } if (bytes.isNotEmpty) { category_186 = bytes[186]; } if (bytes.isNotEmpty) { category_187 = bytes[187]; } if (bytes.isNotEmpty) { category_188 = bytes[188]; } if (bytes.isNotEmpty) { category_189 = bytes[189]; } if (bytes.isNotEmpty) { category_190 = bytes[190]; } if (bytes.isNotEmpty) { category_191 = bytes[191]; } if (bytes.isNotEmpty) { category_192 = bytes[192]; } if (bytes.isNotEmpty) { category_193 = bytes[193]; } if (bytes.isNotEmpty) { category_194 = bytes[194]; } if (bytes.isNotEmpty) { category_195 = bytes[195]; } if (bytes.isNotEmpty) { category_196 = bytes[196]; } if (bytes.isNotEmpty) { category_197 = bytes[197]; } if (bytes.isNotEmpty) { category_198 = bytes[198]; } if (bytes.isNotEmpty) { category_199 = bytes[199]; } if (bytes.isNotEmpty) { category_200 = bytes[200]; } if (bytes.isNotEmpty) { category_201 = bytes[201]; } if (bytes.isNotEmpty) { category_202 = bytes[202]; } if (bytes.isNotEmpty) { category_203 = bytes[203]; } if (bytes.isNotEmpty) { category_204 = bytes[204]; } if (bytes.isNotEmpty) { category_205 = bytes[205]; } if (bytes.isNotEmpty) { category_206 = bytes[206]; } if (bytes.isNotEmpty) { category_207 = bytes[207]; } if (bytes.isNotEmpty) { category_208 = bytes[208]; } if (bytes.isNotEmpty) { category_209 = bytes[209]; } if (bytes.isNotEmpty) { category_210 = bytes[210]; } if (bytes.isNotEmpty) { category_211 = bytes[211]; } if (bytes.isNotEmpty) { category_212 = bytes[212]; } if (bytes.isNotEmpty) { category_213 = bytes[213]; } if (bytes.isNotEmpty) { category_214 = bytes[214]; } if (bytes.isNotEmpty) { category_215 = bytes[215]; } if (bytes.isNotEmpty) { category_216 = bytes[216]; } if (bytes.isNotEmpty) { category_217 = bytes[217]; } if (bytes.isNotEmpty) { category_218 = bytes[218]; } if (bytes.isNotEmpty) { category_219 = bytes[219]; } if (bytes.isNotEmpty) { category_220 = bytes[220]; } if (bytes.isNotEmpty) { category_221 = bytes[221]; } if (bytes.isNotEmpty) { category_222 = bytes[222]; } if (bytes.isNotEmpty) { category_223 = bytes[223]; } if (bytes.isNotEmpty) { category_224 = bytes[224]; } if (bytes.isNotEmpty) { category_225 = bytes[225]; } if (bytes.isNotEmpty) { category_226 = bytes[226]; } if (bytes.isNotEmpty) { category_227 = bytes[227]; } if (bytes.isNotEmpty) { category_228 = bytes[228]; } if (bytes.isNotEmpty) { category_229 = bytes[229]; } if (bytes.isNotEmpty) { category_230 = bytes[230]; } if (bytes.isNotEmpty) { category_231 = bytes[231]; } if (bytes.isNotEmpty) { category_232 = bytes[232]; } if (bytes.isNotEmpty) { category_233 = bytes[233]; } if (bytes.isNotEmpty) { category_234 = bytes[234]; } if (bytes.isNotEmpty) { category_235 = bytes[235]; } if (bytes.isNotEmpty) { category_236 = bytes[236]; } if (bytes.isNotEmpty) { category_237 = bytes[237]; } if (bytes.isNotEmpty) { category_238 = bytes[238]; } if (bytes.isNotEmpty) { category_239 = bytes[239]; } if (bytes.isNotEmpty) { category_240 = bytes[240]; } if (bytes.isNotEmpty) { category_241 = bytes[241]; } if (bytes.isNotEmpty) { category_242 = bytes[242]; } if (bytes.isNotEmpty) { category_243 = bytes[243]; } if (bytes.isNotEmpty) { category_244 = bytes[244]; } if (bytes.isNotEmpty) { category_245 = bytes[245]; } if (bytes.isNotEmpty) { category_246 = bytes[246]; } if (bytes.isNotEmpty) { category_247 = bytes[247]; } if (bytes.isNotEmpty) { category_248 = bytes[248]; } if (bytes.isNotEmpty) { category_249 = bytes[249]; } if (bytes.isNotEmpty) { category_250 = bytes[250]; } if (bytes.isNotEmpty) { category_251 = bytes[251]; } if (bytes.isNotEmpty) { category_252 = bytes[252]; } if (bytes.isNotEmpty) { category_253 = bytes[253]; } if (bytes.isNotEmpty) { category_254 = bytes[254]; } if (bytes.isNotEmpty) { category_255 = bytes[255]; }
  }
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
}

class VkQueryPoolPerformanceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int queueFamilyIndex;
  @Uint32() int counterIndexCount;
  Pointer pCounterIndices;
}

class VkPerformanceCounterResultKHR extends Struct {
}

class VkPerformanceCounterResultKHRInt32 extends Struct {
  @Int32() int int32;
}

class VkPerformanceCounterResultKHRInt64 extends Struct {
  @Int64() int int64;
}

class VkPerformanceCounterResultKHRUint32 extends Struct {
  @Uint32() int uint32;
}

class VkPerformanceCounterResultKHRUint64 extends Struct {
  @Uint64() int uint64;
}

class VkPerformanceCounterResultKHRFloat32 extends Struct {
  @Float() double float32;
}

class VkPerformanceCounterResultKHRFloat64 extends Struct {
  @Double() double float64;
}

class VkAcquireProfilingLockInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Uint64() int timeout;
}

class VkPerformanceQuerySubmitInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int counterPassIndex;
}

class VkHeadlessSurfaceCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkPhysicalDeviceCoverageReductionModeFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int coverageReductionMode;
}

class VkPipelineCoverageReductionStateCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
  @Int32() int coverageReductionMode;
}

class VkFramebufferMixedSamplesCombinationNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int coverageReductionMode;
  @Int32() int rasterizationSamples;
  @Uint32() int depthStencilSamples;
  @Uint32() int colorSamples;
}

class VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderIntegerFunctions2;
}

class VkPerformanceValueDataINTEL extends Struct {
}

class VkPerformanceValueDataINTELValue32 extends Struct {
  @Uint32() int value32;
}

class VkPerformanceValueDataINTELValue64 extends Struct {
  @Uint64() int value64;
}

class VkPerformanceValueDataINTELValueFloat extends Struct {
  @Float() double valueFloat;
}

class VkPerformanceValueDataINTELValueBool extends Struct {
  @Uint32() int valueBool;
}

class VkPerformanceValueDataINTELValueString extends Struct {
  Pointer valueString;
}

class VkPerformanceValueINTEL extends Struct {
  @Int32() int type;
}

class VkInitializePerformanceApiInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer pUserData;
}

class VkQueryPoolPerformanceQueryCreateInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int performanceCountersSampling;
}

class VkQueryPoolCreateInfoINTEL extends Struct {
}

class VkPerformanceMarkerInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int marker;
}

class VkPerformanceStreamMarkerInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int marker;
}

class VkPerformanceOverrideInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
  @Uint32() int enable;
  @Uint64() int parameter;
}

class VkPerformanceConfigurationAcquireInfoINTEL extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
}

class VkPhysicalDeviceShaderClockFeaturesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderSubgroupClock;
  @Uint32() int shaderDeviceClock;
}

class VkPhysicalDeviceIndexTypeUint8FeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int indexTypeUint8;
}

class VkPhysicalDeviceShaderSMBuiltinsPropertiesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderSMCount;
  @Uint32() int shaderWarpsPerSM;
}

class VkPhysicalDeviceShaderSMBuiltinsFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderSMBuiltins;
}

class VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int fragmentShaderSampleInterlock;
  @Uint32() int fragmentShaderPixelInterlock;
  @Uint32() int fragmentShaderShadingRateInterlock;
}

class VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int separateDepthStencilLayouts;
}

class VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR extends Struct {
}

class VkAttachmentReferenceStencilLayout extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int stencilLayout;
}

class VkAttachmentReferenceStencilLayoutKHR extends Struct {
}

class VkAttachmentDescriptionStencilLayout extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int stencilInitialLayout;
  @Int32() int stencilFinalLayout;
}

class VkAttachmentDescriptionStencilLayoutKHR extends Struct {
}

class VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int pipelineExecutableInfo;
}

class VkPipelineInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkPipeline> pipeline;
}

class VkPipelineExecutablePropertiesKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int stages;
  @Uint8() int name_0; @Uint8() int name_1; @Uint8() int name_2; @Uint8() int name_3; @Uint8() int name_4; @Uint8() int name_5; @Uint8() int name_6; @Uint8() int name_7; @Uint8() int name_8; @Uint8() int name_9; @Uint8() int name_10; @Uint8() int name_11; @Uint8() int name_12; @Uint8() int name_13; @Uint8() int name_14; @Uint8() int name_15; @Uint8() int name_16; @Uint8() int name_17; @Uint8() int name_18; @Uint8() int name_19; @Uint8() int name_20; @Uint8() int name_21; @Uint8() int name_22; @Uint8() int name_23; @Uint8() int name_24; @Uint8() int name_25; @Uint8() int name_26; @Uint8() int name_27; @Uint8() int name_28; @Uint8() int name_29; @Uint8() int name_30; @Uint8() int name_31; @Uint8() int name_32; @Uint8() int name_33; @Uint8() int name_34; @Uint8() int name_35; @Uint8() int name_36; @Uint8() int name_37; @Uint8() int name_38; @Uint8() int name_39; @Uint8() int name_40; @Uint8() int name_41; @Uint8() int name_42; @Uint8() int name_43; @Uint8() int name_44; @Uint8() int name_45; @Uint8() int name_46; @Uint8() int name_47; @Uint8() int name_48; @Uint8() int name_49; @Uint8() int name_50; @Uint8() int name_51; @Uint8() int name_52; @Uint8() int name_53; @Uint8() int name_54; @Uint8() int name_55; @Uint8() int name_56; @Uint8() int name_57; @Uint8() int name_58; @Uint8() int name_59; @Uint8() int name_60; @Uint8() int name_61; @Uint8() int name_62; @Uint8() int name_63; @Uint8() int name_64; @Uint8() int name_65; @Uint8() int name_66; @Uint8() int name_67; @Uint8() int name_68; @Uint8() int name_69; @Uint8() int name_70; @Uint8() int name_71; @Uint8() int name_72; @Uint8() int name_73; @Uint8() int name_74; @Uint8() int name_75; @Uint8() int name_76; @Uint8() int name_77; @Uint8() int name_78; @Uint8() int name_79; @Uint8() int name_80; @Uint8() int name_81; @Uint8() int name_82; @Uint8() int name_83; @Uint8() int name_84; @Uint8() int name_85; @Uint8() int name_86; @Uint8() int name_87; @Uint8() int name_88; @Uint8() int name_89; @Uint8() int name_90; @Uint8() int name_91; @Uint8() int name_92; @Uint8() int name_93; @Uint8() int name_94; @Uint8() int name_95; @Uint8() int name_96; @Uint8() int name_97; @Uint8() int name_98; @Uint8() int name_99; @Uint8() int name_100; @Uint8() int name_101; @Uint8() int name_102; @Uint8() int name_103; @Uint8() int name_104; @Uint8() int name_105; @Uint8() int name_106; @Uint8() int name_107; @Uint8() int name_108; @Uint8() int name_109; @Uint8() int name_110; @Uint8() int name_111; @Uint8() int name_112; @Uint8() int name_113; @Uint8() int name_114; @Uint8() int name_115; @Uint8() int name_116; @Uint8() int name_117; @Uint8() int name_118; @Uint8() int name_119; @Uint8() int name_120; @Uint8() int name_121; @Uint8() int name_122; @Uint8() int name_123; @Uint8() int name_124; @Uint8() int name_125; @Uint8() int name_126; @Uint8() int name_127; @Uint8() int name_128; @Uint8() int name_129; @Uint8() int name_130; @Uint8() int name_131; @Uint8() int name_132; @Uint8() int name_133; @Uint8() int name_134; @Uint8() int name_135; @Uint8() int name_136; @Uint8() int name_137; @Uint8() int name_138; @Uint8() int name_139; @Uint8() int name_140; @Uint8() int name_141; @Uint8() int name_142; @Uint8() int name_143; @Uint8() int name_144; @Uint8() int name_145; @Uint8() int name_146; @Uint8() int name_147; @Uint8() int name_148; @Uint8() int name_149; @Uint8() int name_150; @Uint8() int name_151; @Uint8() int name_152; @Uint8() int name_153; @Uint8() int name_154; @Uint8() int name_155; @Uint8() int name_156; @Uint8() int name_157; @Uint8() int name_158; @Uint8() int name_159; @Uint8() int name_160; @Uint8() int name_161; @Uint8() int name_162; @Uint8() int name_163; @Uint8() int name_164; @Uint8() int name_165; @Uint8() int name_166; @Uint8() int name_167; @Uint8() int name_168; @Uint8() int name_169; @Uint8() int name_170; @Uint8() int name_171; @Uint8() int name_172; @Uint8() int name_173; @Uint8() int name_174; @Uint8() int name_175; @Uint8() int name_176; @Uint8() int name_177; @Uint8() int name_178; @Uint8() int name_179; @Uint8() int name_180; @Uint8() int name_181; @Uint8() int name_182; @Uint8() int name_183; @Uint8() int name_184; @Uint8() int name_185; @Uint8() int name_186; @Uint8() int name_187; @Uint8() int name_188; @Uint8() int name_189; @Uint8() int name_190; @Uint8() int name_191; @Uint8() int name_192; @Uint8() int name_193; @Uint8() int name_194; @Uint8() int name_195; @Uint8() int name_196; @Uint8() int name_197; @Uint8() int name_198; @Uint8() int name_199; @Uint8() int name_200; @Uint8() int name_201; @Uint8() int name_202; @Uint8() int name_203; @Uint8() int name_204; @Uint8() int name_205; @Uint8() int name_206; @Uint8() int name_207; @Uint8() int name_208; @Uint8() int name_209; @Uint8() int name_210; @Uint8() int name_211; @Uint8() int name_212; @Uint8() int name_213; @Uint8() int name_214; @Uint8() int name_215; @Uint8() int name_216; @Uint8() int name_217; @Uint8() int name_218; @Uint8() int name_219; @Uint8() int name_220; @Uint8() int name_221; @Uint8() int name_222; @Uint8() int name_223; @Uint8() int name_224; @Uint8() int name_225; @Uint8() int name_226; @Uint8() int name_227; @Uint8() int name_228; @Uint8() int name_229; @Uint8() int name_230; @Uint8() int name_231; @Uint8() int name_232; @Uint8() int name_233; @Uint8() int name_234; @Uint8() int name_235; @Uint8() int name_236; @Uint8() int name_237; @Uint8() int name_238; @Uint8() int name_239; @Uint8() int name_240; @Uint8() int name_241; @Uint8() int name_242; @Uint8() int name_243; @Uint8() int name_244; @Uint8() int name_245; @Uint8() int name_246; @Uint8() int name_247; @Uint8() int name_248; @Uint8() int name_249; @Uint8() int name_250; @Uint8() int name_251; @Uint8() int name_252; @Uint8() int name_253; @Uint8() int name_254; @Uint8() int name_255;
  String get name {
    var bytes = [name_0, name_1, name_2, name_3, name_4, name_5, name_6, name_7, name_8, name_9, name_10, name_11, name_12, name_13, name_14, name_15, name_16, name_17, name_18, name_19, name_20, name_21, name_22, name_23, name_24, name_25, name_26, name_27, name_28, name_29, name_30, name_31, name_32, name_33, name_34, name_35, name_36, name_37, name_38, name_39, name_40, name_41, name_42, name_43, name_44, name_45, name_46, name_47, name_48, name_49, name_50, name_51, name_52, name_53, name_54, name_55, name_56, name_57, name_58, name_59, name_60, name_61, name_62, name_63, name_64, name_65, name_66, name_67, name_68, name_69, name_70, name_71, name_72, name_73, name_74, name_75, name_76, name_77, name_78, name_79, name_80, name_81, name_82, name_83, name_84, name_85, name_86, name_87, name_88, name_89, name_90, name_91, name_92, name_93, name_94, name_95, name_96, name_97, name_98, name_99, name_100, name_101, name_102, name_103, name_104, name_105, name_106, name_107, name_108, name_109, name_110, name_111, name_112, name_113, name_114, name_115, name_116, name_117, name_118, name_119, name_120, name_121, name_122, name_123, name_124, name_125, name_126, name_127, name_128, name_129, name_130, name_131, name_132, name_133, name_134, name_135, name_136, name_137, name_138, name_139, name_140, name_141, name_142, name_143, name_144, name_145, name_146, name_147, name_148, name_149, name_150, name_151, name_152, name_153, name_154, name_155, name_156, name_157, name_158, name_159, name_160, name_161, name_162, name_163, name_164, name_165, name_166, name_167, name_168, name_169, name_170, name_171, name_172, name_173, name_174, name_175, name_176, name_177, name_178, name_179, name_180, name_181, name_182, name_183, name_184, name_185, name_186, name_187, name_188, name_189, name_190, name_191, name_192, name_193, name_194, name_195, name_196, name_197, name_198, name_199, name_200, name_201, name_202, name_203, name_204, name_205, name_206, name_207, name_208, name_209, name_210, name_211, name_212, name_213, name_214, name_215, name_216, name_217, name_218, name_219, name_220, name_221, name_222, name_223, name_224, name_225, name_226, name_227, name_228, name_229, name_230, name_231, name_232, name_233, name_234, name_235, name_236, name_237, name_238, name_239, name_240, name_241, name_242, name_243, name_244, name_245, name_246, name_247, name_248, name_249, name_250, name_251, name_252, name_253, name_254, name_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set name(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { name_0 = bytes[0]; } if (bytes.isNotEmpty) { name_1 = bytes[1]; } if (bytes.isNotEmpty) { name_2 = bytes[2]; } if (bytes.isNotEmpty) { name_3 = bytes[3]; } if (bytes.isNotEmpty) { name_4 = bytes[4]; } if (bytes.isNotEmpty) { name_5 = bytes[5]; } if (bytes.isNotEmpty) { name_6 = bytes[6]; } if (bytes.isNotEmpty) { name_7 = bytes[7]; } if (bytes.isNotEmpty) { name_8 = bytes[8]; } if (bytes.isNotEmpty) { name_9 = bytes[9]; } if (bytes.isNotEmpty) { name_10 = bytes[10]; } if (bytes.isNotEmpty) { name_11 = bytes[11]; } if (bytes.isNotEmpty) { name_12 = bytes[12]; } if (bytes.isNotEmpty) { name_13 = bytes[13]; } if (bytes.isNotEmpty) { name_14 = bytes[14]; } if (bytes.isNotEmpty) { name_15 = bytes[15]; } if (bytes.isNotEmpty) { name_16 = bytes[16]; } if (bytes.isNotEmpty) { name_17 = bytes[17]; } if (bytes.isNotEmpty) { name_18 = bytes[18]; } if (bytes.isNotEmpty) { name_19 = bytes[19]; } if (bytes.isNotEmpty) { name_20 = bytes[20]; } if (bytes.isNotEmpty) { name_21 = bytes[21]; } if (bytes.isNotEmpty) { name_22 = bytes[22]; } if (bytes.isNotEmpty) { name_23 = bytes[23]; } if (bytes.isNotEmpty) { name_24 = bytes[24]; } if (bytes.isNotEmpty) { name_25 = bytes[25]; } if (bytes.isNotEmpty) { name_26 = bytes[26]; } if (bytes.isNotEmpty) { name_27 = bytes[27]; } if (bytes.isNotEmpty) { name_28 = bytes[28]; } if (bytes.isNotEmpty) { name_29 = bytes[29]; } if (bytes.isNotEmpty) { name_30 = bytes[30]; } if (bytes.isNotEmpty) { name_31 = bytes[31]; } if (bytes.isNotEmpty) { name_32 = bytes[32]; } if (bytes.isNotEmpty) { name_33 = bytes[33]; } if (bytes.isNotEmpty) { name_34 = bytes[34]; } if (bytes.isNotEmpty) { name_35 = bytes[35]; } if (bytes.isNotEmpty) { name_36 = bytes[36]; } if (bytes.isNotEmpty) { name_37 = bytes[37]; } if (bytes.isNotEmpty) { name_38 = bytes[38]; } if (bytes.isNotEmpty) { name_39 = bytes[39]; } if (bytes.isNotEmpty) { name_40 = bytes[40]; } if (bytes.isNotEmpty) { name_41 = bytes[41]; } if (bytes.isNotEmpty) { name_42 = bytes[42]; } if (bytes.isNotEmpty) { name_43 = bytes[43]; } if (bytes.isNotEmpty) { name_44 = bytes[44]; } if (bytes.isNotEmpty) { name_45 = bytes[45]; } if (bytes.isNotEmpty) { name_46 = bytes[46]; } if (bytes.isNotEmpty) { name_47 = bytes[47]; } if (bytes.isNotEmpty) { name_48 = bytes[48]; } if (bytes.isNotEmpty) { name_49 = bytes[49]; } if (bytes.isNotEmpty) { name_50 = bytes[50]; } if (bytes.isNotEmpty) { name_51 = bytes[51]; } if (bytes.isNotEmpty) { name_52 = bytes[52]; } if (bytes.isNotEmpty) { name_53 = bytes[53]; } if (bytes.isNotEmpty) { name_54 = bytes[54]; } if (bytes.isNotEmpty) { name_55 = bytes[55]; } if (bytes.isNotEmpty) { name_56 = bytes[56]; } if (bytes.isNotEmpty) { name_57 = bytes[57]; } if (bytes.isNotEmpty) { name_58 = bytes[58]; } if (bytes.isNotEmpty) { name_59 = bytes[59]; } if (bytes.isNotEmpty) { name_60 = bytes[60]; } if (bytes.isNotEmpty) { name_61 = bytes[61]; } if (bytes.isNotEmpty) { name_62 = bytes[62]; } if (bytes.isNotEmpty) { name_63 = bytes[63]; } if (bytes.isNotEmpty) { name_64 = bytes[64]; } if (bytes.isNotEmpty) { name_65 = bytes[65]; } if (bytes.isNotEmpty) { name_66 = bytes[66]; } if (bytes.isNotEmpty) { name_67 = bytes[67]; } if (bytes.isNotEmpty) { name_68 = bytes[68]; } if (bytes.isNotEmpty) { name_69 = bytes[69]; } if (bytes.isNotEmpty) { name_70 = bytes[70]; } if (bytes.isNotEmpty) { name_71 = bytes[71]; } if (bytes.isNotEmpty) { name_72 = bytes[72]; } if (bytes.isNotEmpty) { name_73 = bytes[73]; } if (bytes.isNotEmpty) { name_74 = bytes[74]; } if (bytes.isNotEmpty) { name_75 = bytes[75]; } if (bytes.isNotEmpty) { name_76 = bytes[76]; } if (bytes.isNotEmpty) { name_77 = bytes[77]; } if (bytes.isNotEmpty) { name_78 = bytes[78]; } if (bytes.isNotEmpty) { name_79 = bytes[79]; } if (bytes.isNotEmpty) { name_80 = bytes[80]; } if (bytes.isNotEmpty) { name_81 = bytes[81]; } if (bytes.isNotEmpty) { name_82 = bytes[82]; } if (bytes.isNotEmpty) { name_83 = bytes[83]; } if (bytes.isNotEmpty) { name_84 = bytes[84]; } if (bytes.isNotEmpty) { name_85 = bytes[85]; } if (bytes.isNotEmpty) { name_86 = bytes[86]; } if (bytes.isNotEmpty) { name_87 = bytes[87]; } if (bytes.isNotEmpty) { name_88 = bytes[88]; } if (bytes.isNotEmpty) { name_89 = bytes[89]; } if (bytes.isNotEmpty) { name_90 = bytes[90]; } if (bytes.isNotEmpty) { name_91 = bytes[91]; } if (bytes.isNotEmpty) { name_92 = bytes[92]; } if (bytes.isNotEmpty) { name_93 = bytes[93]; } if (bytes.isNotEmpty) { name_94 = bytes[94]; } if (bytes.isNotEmpty) { name_95 = bytes[95]; } if (bytes.isNotEmpty) { name_96 = bytes[96]; } if (bytes.isNotEmpty) { name_97 = bytes[97]; } if (bytes.isNotEmpty) { name_98 = bytes[98]; } if (bytes.isNotEmpty) { name_99 = bytes[99]; } if (bytes.isNotEmpty) { name_100 = bytes[100]; } if (bytes.isNotEmpty) { name_101 = bytes[101]; } if (bytes.isNotEmpty) { name_102 = bytes[102]; } if (bytes.isNotEmpty) { name_103 = bytes[103]; } if (bytes.isNotEmpty) { name_104 = bytes[104]; } if (bytes.isNotEmpty) { name_105 = bytes[105]; } if (bytes.isNotEmpty) { name_106 = bytes[106]; } if (bytes.isNotEmpty) { name_107 = bytes[107]; } if (bytes.isNotEmpty) { name_108 = bytes[108]; } if (bytes.isNotEmpty) { name_109 = bytes[109]; } if (bytes.isNotEmpty) { name_110 = bytes[110]; } if (bytes.isNotEmpty) { name_111 = bytes[111]; } if (bytes.isNotEmpty) { name_112 = bytes[112]; } if (bytes.isNotEmpty) { name_113 = bytes[113]; } if (bytes.isNotEmpty) { name_114 = bytes[114]; } if (bytes.isNotEmpty) { name_115 = bytes[115]; } if (bytes.isNotEmpty) { name_116 = bytes[116]; } if (bytes.isNotEmpty) { name_117 = bytes[117]; } if (bytes.isNotEmpty) { name_118 = bytes[118]; } if (bytes.isNotEmpty) { name_119 = bytes[119]; } if (bytes.isNotEmpty) { name_120 = bytes[120]; } if (bytes.isNotEmpty) { name_121 = bytes[121]; } if (bytes.isNotEmpty) { name_122 = bytes[122]; } if (bytes.isNotEmpty) { name_123 = bytes[123]; } if (bytes.isNotEmpty) { name_124 = bytes[124]; } if (bytes.isNotEmpty) { name_125 = bytes[125]; } if (bytes.isNotEmpty) { name_126 = bytes[126]; } if (bytes.isNotEmpty) { name_127 = bytes[127]; } if (bytes.isNotEmpty) { name_128 = bytes[128]; } if (bytes.isNotEmpty) { name_129 = bytes[129]; } if (bytes.isNotEmpty) { name_130 = bytes[130]; } if (bytes.isNotEmpty) { name_131 = bytes[131]; } if (bytes.isNotEmpty) { name_132 = bytes[132]; } if (bytes.isNotEmpty) { name_133 = bytes[133]; } if (bytes.isNotEmpty) { name_134 = bytes[134]; } if (bytes.isNotEmpty) { name_135 = bytes[135]; } if (bytes.isNotEmpty) { name_136 = bytes[136]; } if (bytes.isNotEmpty) { name_137 = bytes[137]; } if (bytes.isNotEmpty) { name_138 = bytes[138]; } if (bytes.isNotEmpty) { name_139 = bytes[139]; } if (bytes.isNotEmpty) { name_140 = bytes[140]; } if (bytes.isNotEmpty) { name_141 = bytes[141]; } if (bytes.isNotEmpty) { name_142 = bytes[142]; } if (bytes.isNotEmpty) { name_143 = bytes[143]; } if (bytes.isNotEmpty) { name_144 = bytes[144]; } if (bytes.isNotEmpty) { name_145 = bytes[145]; } if (bytes.isNotEmpty) { name_146 = bytes[146]; } if (bytes.isNotEmpty) { name_147 = bytes[147]; } if (bytes.isNotEmpty) { name_148 = bytes[148]; } if (bytes.isNotEmpty) { name_149 = bytes[149]; } if (bytes.isNotEmpty) { name_150 = bytes[150]; } if (bytes.isNotEmpty) { name_151 = bytes[151]; } if (bytes.isNotEmpty) { name_152 = bytes[152]; } if (bytes.isNotEmpty) { name_153 = bytes[153]; } if (bytes.isNotEmpty) { name_154 = bytes[154]; } if (bytes.isNotEmpty) { name_155 = bytes[155]; } if (bytes.isNotEmpty) { name_156 = bytes[156]; } if (bytes.isNotEmpty) { name_157 = bytes[157]; } if (bytes.isNotEmpty) { name_158 = bytes[158]; } if (bytes.isNotEmpty) { name_159 = bytes[159]; } if (bytes.isNotEmpty) { name_160 = bytes[160]; } if (bytes.isNotEmpty) { name_161 = bytes[161]; } if (bytes.isNotEmpty) { name_162 = bytes[162]; } if (bytes.isNotEmpty) { name_163 = bytes[163]; } if (bytes.isNotEmpty) { name_164 = bytes[164]; } if (bytes.isNotEmpty) { name_165 = bytes[165]; } if (bytes.isNotEmpty) { name_166 = bytes[166]; } if (bytes.isNotEmpty) { name_167 = bytes[167]; } if (bytes.isNotEmpty) { name_168 = bytes[168]; } if (bytes.isNotEmpty) { name_169 = bytes[169]; } if (bytes.isNotEmpty) { name_170 = bytes[170]; } if (bytes.isNotEmpty) { name_171 = bytes[171]; } if (bytes.isNotEmpty) { name_172 = bytes[172]; } if (bytes.isNotEmpty) { name_173 = bytes[173]; } if (bytes.isNotEmpty) { name_174 = bytes[174]; } if (bytes.isNotEmpty) { name_175 = bytes[175]; } if (bytes.isNotEmpty) { name_176 = bytes[176]; } if (bytes.isNotEmpty) { name_177 = bytes[177]; } if (bytes.isNotEmpty) { name_178 = bytes[178]; } if (bytes.isNotEmpty) { name_179 = bytes[179]; } if (bytes.isNotEmpty) { name_180 = bytes[180]; } if (bytes.isNotEmpty) { name_181 = bytes[181]; } if (bytes.isNotEmpty) { name_182 = bytes[182]; } if (bytes.isNotEmpty) { name_183 = bytes[183]; } if (bytes.isNotEmpty) { name_184 = bytes[184]; } if (bytes.isNotEmpty) { name_185 = bytes[185]; } if (bytes.isNotEmpty) { name_186 = bytes[186]; } if (bytes.isNotEmpty) { name_187 = bytes[187]; } if (bytes.isNotEmpty) { name_188 = bytes[188]; } if (bytes.isNotEmpty) { name_189 = bytes[189]; } if (bytes.isNotEmpty) { name_190 = bytes[190]; } if (bytes.isNotEmpty) { name_191 = bytes[191]; } if (bytes.isNotEmpty) { name_192 = bytes[192]; } if (bytes.isNotEmpty) { name_193 = bytes[193]; } if (bytes.isNotEmpty) { name_194 = bytes[194]; } if (bytes.isNotEmpty) { name_195 = bytes[195]; } if (bytes.isNotEmpty) { name_196 = bytes[196]; } if (bytes.isNotEmpty) { name_197 = bytes[197]; } if (bytes.isNotEmpty) { name_198 = bytes[198]; } if (bytes.isNotEmpty) { name_199 = bytes[199]; } if (bytes.isNotEmpty) { name_200 = bytes[200]; } if (bytes.isNotEmpty) { name_201 = bytes[201]; } if (bytes.isNotEmpty) { name_202 = bytes[202]; } if (bytes.isNotEmpty) { name_203 = bytes[203]; } if (bytes.isNotEmpty) { name_204 = bytes[204]; } if (bytes.isNotEmpty) { name_205 = bytes[205]; } if (bytes.isNotEmpty) { name_206 = bytes[206]; } if (bytes.isNotEmpty) { name_207 = bytes[207]; } if (bytes.isNotEmpty) { name_208 = bytes[208]; } if (bytes.isNotEmpty) { name_209 = bytes[209]; } if (bytes.isNotEmpty) { name_210 = bytes[210]; } if (bytes.isNotEmpty) { name_211 = bytes[211]; } if (bytes.isNotEmpty) { name_212 = bytes[212]; } if (bytes.isNotEmpty) { name_213 = bytes[213]; } if (bytes.isNotEmpty) { name_214 = bytes[214]; } if (bytes.isNotEmpty) { name_215 = bytes[215]; } if (bytes.isNotEmpty) { name_216 = bytes[216]; } if (bytes.isNotEmpty) { name_217 = bytes[217]; } if (bytes.isNotEmpty) { name_218 = bytes[218]; } if (bytes.isNotEmpty) { name_219 = bytes[219]; } if (bytes.isNotEmpty) { name_220 = bytes[220]; } if (bytes.isNotEmpty) { name_221 = bytes[221]; } if (bytes.isNotEmpty) { name_222 = bytes[222]; } if (bytes.isNotEmpty) { name_223 = bytes[223]; } if (bytes.isNotEmpty) { name_224 = bytes[224]; } if (bytes.isNotEmpty) { name_225 = bytes[225]; } if (bytes.isNotEmpty) { name_226 = bytes[226]; } if (bytes.isNotEmpty) { name_227 = bytes[227]; } if (bytes.isNotEmpty) { name_228 = bytes[228]; } if (bytes.isNotEmpty) { name_229 = bytes[229]; } if (bytes.isNotEmpty) { name_230 = bytes[230]; } if (bytes.isNotEmpty) { name_231 = bytes[231]; } if (bytes.isNotEmpty) { name_232 = bytes[232]; } if (bytes.isNotEmpty) { name_233 = bytes[233]; } if (bytes.isNotEmpty) { name_234 = bytes[234]; } if (bytes.isNotEmpty) { name_235 = bytes[235]; } if (bytes.isNotEmpty) { name_236 = bytes[236]; } if (bytes.isNotEmpty) { name_237 = bytes[237]; } if (bytes.isNotEmpty) { name_238 = bytes[238]; } if (bytes.isNotEmpty) { name_239 = bytes[239]; } if (bytes.isNotEmpty) { name_240 = bytes[240]; } if (bytes.isNotEmpty) { name_241 = bytes[241]; } if (bytes.isNotEmpty) { name_242 = bytes[242]; } if (bytes.isNotEmpty) { name_243 = bytes[243]; } if (bytes.isNotEmpty) { name_244 = bytes[244]; } if (bytes.isNotEmpty) { name_245 = bytes[245]; } if (bytes.isNotEmpty) { name_246 = bytes[246]; } if (bytes.isNotEmpty) { name_247 = bytes[247]; } if (bytes.isNotEmpty) { name_248 = bytes[248]; } if (bytes.isNotEmpty) { name_249 = bytes[249]; } if (bytes.isNotEmpty) { name_250 = bytes[250]; } if (bytes.isNotEmpty) { name_251 = bytes[251]; } if (bytes.isNotEmpty) { name_252 = bytes[252]; } if (bytes.isNotEmpty) { name_253 = bytes[253]; } if (bytes.isNotEmpty) { name_254 = bytes[254]; } if (bytes.isNotEmpty) { name_255 = bytes[255]; }
  }
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
  @Uint32() int subgroupSize;
}

class VkPipelineExecutableInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkPipeline> pipeline;
  @Uint32() int executableIndex;
}

class VkPipelineExecutableStatisticValueKHR extends Struct {
}

class VkPipelineExecutableStatisticValueKHRB32 extends Struct {
  @Uint32() int b32;
}

class VkPipelineExecutableStatisticValueKHRI64 extends Struct {
  @Int64() int i64;
}

class VkPipelineExecutableStatisticValueKHRU64 extends Struct {
  @Uint64() int u64;
}

class VkPipelineExecutableStatisticValueKHRF64 extends Struct {
  @Double() double f64;
}

class VkPipelineExecutableStatisticKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint8() int name_0; @Uint8() int name_1; @Uint8() int name_2; @Uint8() int name_3; @Uint8() int name_4; @Uint8() int name_5; @Uint8() int name_6; @Uint8() int name_7; @Uint8() int name_8; @Uint8() int name_9; @Uint8() int name_10; @Uint8() int name_11; @Uint8() int name_12; @Uint8() int name_13; @Uint8() int name_14; @Uint8() int name_15; @Uint8() int name_16; @Uint8() int name_17; @Uint8() int name_18; @Uint8() int name_19; @Uint8() int name_20; @Uint8() int name_21; @Uint8() int name_22; @Uint8() int name_23; @Uint8() int name_24; @Uint8() int name_25; @Uint8() int name_26; @Uint8() int name_27; @Uint8() int name_28; @Uint8() int name_29; @Uint8() int name_30; @Uint8() int name_31; @Uint8() int name_32; @Uint8() int name_33; @Uint8() int name_34; @Uint8() int name_35; @Uint8() int name_36; @Uint8() int name_37; @Uint8() int name_38; @Uint8() int name_39; @Uint8() int name_40; @Uint8() int name_41; @Uint8() int name_42; @Uint8() int name_43; @Uint8() int name_44; @Uint8() int name_45; @Uint8() int name_46; @Uint8() int name_47; @Uint8() int name_48; @Uint8() int name_49; @Uint8() int name_50; @Uint8() int name_51; @Uint8() int name_52; @Uint8() int name_53; @Uint8() int name_54; @Uint8() int name_55; @Uint8() int name_56; @Uint8() int name_57; @Uint8() int name_58; @Uint8() int name_59; @Uint8() int name_60; @Uint8() int name_61; @Uint8() int name_62; @Uint8() int name_63; @Uint8() int name_64; @Uint8() int name_65; @Uint8() int name_66; @Uint8() int name_67; @Uint8() int name_68; @Uint8() int name_69; @Uint8() int name_70; @Uint8() int name_71; @Uint8() int name_72; @Uint8() int name_73; @Uint8() int name_74; @Uint8() int name_75; @Uint8() int name_76; @Uint8() int name_77; @Uint8() int name_78; @Uint8() int name_79; @Uint8() int name_80; @Uint8() int name_81; @Uint8() int name_82; @Uint8() int name_83; @Uint8() int name_84; @Uint8() int name_85; @Uint8() int name_86; @Uint8() int name_87; @Uint8() int name_88; @Uint8() int name_89; @Uint8() int name_90; @Uint8() int name_91; @Uint8() int name_92; @Uint8() int name_93; @Uint8() int name_94; @Uint8() int name_95; @Uint8() int name_96; @Uint8() int name_97; @Uint8() int name_98; @Uint8() int name_99; @Uint8() int name_100; @Uint8() int name_101; @Uint8() int name_102; @Uint8() int name_103; @Uint8() int name_104; @Uint8() int name_105; @Uint8() int name_106; @Uint8() int name_107; @Uint8() int name_108; @Uint8() int name_109; @Uint8() int name_110; @Uint8() int name_111; @Uint8() int name_112; @Uint8() int name_113; @Uint8() int name_114; @Uint8() int name_115; @Uint8() int name_116; @Uint8() int name_117; @Uint8() int name_118; @Uint8() int name_119; @Uint8() int name_120; @Uint8() int name_121; @Uint8() int name_122; @Uint8() int name_123; @Uint8() int name_124; @Uint8() int name_125; @Uint8() int name_126; @Uint8() int name_127; @Uint8() int name_128; @Uint8() int name_129; @Uint8() int name_130; @Uint8() int name_131; @Uint8() int name_132; @Uint8() int name_133; @Uint8() int name_134; @Uint8() int name_135; @Uint8() int name_136; @Uint8() int name_137; @Uint8() int name_138; @Uint8() int name_139; @Uint8() int name_140; @Uint8() int name_141; @Uint8() int name_142; @Uint8() int name_143; @Uint8() int name_144; @Uint8() int name_145; @Uint8() int name_146; @Uint8() int name_147; @Uint8() int name_148; @Uint8() int name_149; @Uint8() int name_150; @Uint8() int name_151; @Uint8() int name_152; @Uint8() int name_153; @Uint8() int name_154; @Uint8() int name_155; @Uint8() int name_156; @Uint8() int name_157; @Uint8() int name_158; @Uint8() int name_159; @Uint8() int name_160; @Uint8() int name_161; @Uint8() int name_162; @Uint8() int name_163; @Uint8() int name_164; @Uint8() int name_165; @Uint8() int name_166; @Uint8() int name_167; @Uint8() int name_168; @Uint8() int name_169; @Uint8() int name_170; @Uint8() int name_171; @Uint8() int name_172; @Uint8() int name_173; @Uint8() int name_174; @Uint8() int name_175; @Uint8() int name_176; @Uint8() int name_177; @Uint8() int name_178; @Uint8() int name_179; @Uint8() int name_180; @Uint8() int name_181; @Uint8() int name_182; @Uint8() int name_183; @Uint8() int name_184; @Uint8() int name_185; @Uint8() int name_186; @Uint8() int name_187; @Uint8() int name_188; @Uint8() int name_189; @Uint8() int name_190; @Uint8() int name_191; @Uint8() int name_192; @Uint8() int name_193; @Uint8() int name_194; @Uint8() int name_195; @Uint8() int name_196; @Uint8() int name_197; @Uint8() int name_198; @Uint8() int name_199; @Uint8() int name_200; @Uint8() int name_201; @Uint8() int name_202; @Uint8() int name_203; @Uint8() int name_204; @Uint8() int name_205; @Uint8() int name_206; @Uint8() int name_207; @Uint8() int name_208; @Uint8() int name_209; @Uint8() int name_210; @Uint8() int name_211; @Uint8() int name_212; @Uint8() int name_213; @Uint8() int name_214; @Uint8() int name_215; @Uint8() int name_216; @Uint8() int name_217; @Uint8() int name_218; @Uint8() int name_219; @Uint8() int name_220; @Uint8() int name_221; @Uint8() int name_222; @Uint8() int name_223; @Uint8() int name_224; @Uint8() int name_225; @Uint8() int name_226; @Uint8() int name_227; @Uint8() int name_228; @Uint8() int name_229; @Uint8() int name_230; @Uint8() int name_231; @Uint8() int name_232; @Uint8() int name_233; @Uint8() int name_234; @Uint8() int name_235; @Uint8() int name_236; @Uint8() int name_237; @Uint8() int name_238; @Uint8() int name_239; @Uint8() int name_240; @Uint8() int name_241; @Uint8() int name_242; @Uint8() int name_243; @Uint8() int name_244; @Uint8() int name_245; @Uint8() int name_246; @Uint8() int name_247; @Uint8() int name_248; @Uint8() int name_249; @Uint8() int name_250; @Uint8() int name_251; @Uint8() int name_252; @Uint8() int name_253; @Uint8() int name_254; @Uint8() int name_255;
  String get name {
    var bytes = [name_0, name_1, name_2, name_3, name_4, name_5, name_6, name_7, name_8, name_9, name_10, name_11, name_12, name_13, name_14, name_15, name_16, name_17, name_18, name_19, name_20, name_21, name_22, name_23, name_24, name_25, name_26, name_27, name_28, name_29, name_30, name_31, name_32, name_33, name_34, name_35, name_36, name_37, name_38, name_39, name_40, name_41, name_42, name_43, name_44, name_45, name_46, name_47, name_48, name_49, name_50, name_51, name_52, name_53, name_54, name_55, name_56, name_57, name_58, name_59, name_60, name_61, name_62, name_63, name_64, name_65, name_66, name_67, name_68, name_69, name_70, name_71, name_72, name_73, name_74, name_75, name_76, name_77, name_78, name_79, name_80, name_81, name_82, name_83, name_84, name_85, name_86, name_87, name_88, name_89, name_90, name_91, name_92, name_93, name_94, name_95, name_96, name_97, name_98, name_99, name_100, name_101, name_102, name_103, name_104, name_105, name_106, name_107, name_108, name_109, name_110, name_111, name_112, name_113, name_114, name_115, name_116, name_117, name_118, name_119, name_120, name_121, name_122, name_123, name_124, name_125, name_126, name_127, name_128, name_129, name_130, name_131, name_132, name_133, name_134, name_135, name_136, name_137, name_138, name_139, name_140, name_141, name_142, name_143, name_144, name_145, name_146, name_147, name_148, name_149, name_150, name_151, name_152, name_153, name_154, name_155, name_156, name_157, name_158, name_159, name_160, name_161, name_162, name_163, name_164, name_165, name_166, name_167, name_168, name_169, name_170, name_171, name_172, name_173, name_174, name_175, name_176, name_177, name_178, name_179, name_180, name_181, name_182, name_183, name_184, name_185, name_186, name_187, name_188, name_189, name_190, name_191, name_192, name_193, name_194, name_195, name_196, name_197, name_198, name_199, name_200, name_201, name_202, name_203, name_204, name_205, name_206, name_207, name_208, name_209, name_210, name_211, name_212, name_213, name_214, name_215, name_216, name_217, name_218, name_219, name_220, name_221, name_222, name_223, name_224, name_225, name_226, name_227, name_228, name_229, name_230, name_231, name_232, name_233, name_234, name_235, name_236, name_237, name_238, name_239, name_240, name_241, name_242, name_243, name_244, name_245, name_246, name_247, name_248, name_249, name_250, name_251, name_252, name_253, name_254, name_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set name(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { name_0 = bytes[0]; } if (bytes.isNotEmpty) { name_1 = bytes[1]; } if (bytes.isNotEmpty) { name_2 = bytes[2]; } if (bytes.isNotEmpty) { name_3 = bytes[3]; } if (bytes.isNotEmpty) { name_4 = bytes[4]; } if (bytes.isNotEmpty) { name_5 = bytes[5]; } if (bytes.isNotEmpty) { name_6 = bytes[6]; } if (bytes.isNotEmpty) { name_7 = bytes[7]; } if (bytes.isNotEmpty) { name_8 = bytes[8]; } if (bytes.isNotEmpty) { name_9 = bytes[9]; } if (bytes.isNotEmpty) { name_10 = bytes[10]; } if (bytes.isNotEmpty) { name_11 = bytes[11]; } if (bytes.isNotEmpty) { name_12 = bytes[12]; } if (bytes.isNotEmpty) { name_13 = bytes[13]; } if (bytes.isNotEmpty) { name_14 = bytes[14]; } if (bytes.isNotEmpty) { name_15 = bytes[15]; } if (bytes.isNotEmpty) { name_16 = bytes[16]; } if (bytes.isNotEmpty) { name_17 = bytes[17]; } if (bytes.isNotEmpty) { name_18 = bytes[18]; } if (bytes.isNotEmpty) { name_19 = bytes[19]; } if (bytes.isNotEmpty) { name_20 = bytes[20]; } if (bytes.isNotEmpty) { name_21 = bytes[21]; } if (bytes.isNotEmpty) { name_22 = bytes[22]; } if (bytes.isNotEmpty) { name_23 = bytes[23]; } if (bytes.isNotEmpty) { name_24 = bytes[24]; } if (bytes.isNotEmpty) { name_25 = bytes[25]; } if (bytes.isNotEmpty) { name_26 = bytes[26]; } if (bytes.isNotEmpty) { name_27 = bytes[27]; } if (bytes.isNotEmpty) { name_28 = bytes[28]; } if (bytes.isNotEmpty) { name_29 = bytes[29]; } if (bytes.isNotEmpty) { name_30 = bytes[30]; } if (bytes.isNotEmpty) { name_31 = bytes[31]; } if (bytes.isNotEmpty) { name_32 = bytes[32]; } if (bytes.isNotEmpty) { name_33 = bytes[33]; } if (bytes.isNotEmpty) { name_34 = bytes[34]; } if (bytes.isNotEmpty) { name_35 = bytes[35]; } if (bytes.isNotEmpty) { name_36 = bytes[36]; } if (bytes.isNotEmpty) { name_37 = bytes[37]; } if (bytes.isNotEmpty) { name_38 = bytes[38]; } if (bytes.isNotEmpty) { name_39 = bytes[39]; } if (bytes.isNotEmpty) { name_40 = bytes[40]; } if (bytes.isNotEmpty) { name_41 = bytes[41]; } if (bytes.isNotEmpty) { name_42 = bytes[42]; } if (bytes.isNotEmpty) { name_43 = bytes[43]; } if (bytes.isNotEmpty) { name_44 = bytes[44]; } if (bytes.isNotEmpty) { name_45 = bytes[45]; } if (bytes.isNotEmpty) { name_46 = bytes[46]; } if (bytes.isNotEmpty) { name_47 = bytes[47]; } if (bytes.isNotEmpty) { name_48 = bytes[48]; } if (bytes.isNotEmpty) { name_49 = bytes[49]; } if (bytes.isNotEmpty) { name_50 = bytes[50]; } if (bytes.isNotEmpty) { name_51 = bytes[51]; } if (bytes.isNotEmpty) { name_52 = bytes[52]; } if (bytes.isNotEmpty) { name_53 = bytes[53]; } if (bytes.isNotEmpty) { name_54 = bytes[54]; } if (bytes.isNotEmpty) { name_55 = bytes[55]; } if (bytes.isNotEmpty) { name_56 = bytes[56]; } if (bytes.isNotEmpty) { name_57 = bytes[57]; } if (bytes.isNotEmpty) { name_58 = bytes[58]; } if (bytes.isNotEmpty) { name_59 = bytes[59]; } if (bytes.isNotEmpty) { name_60 = bytes[60]; } if (bytes.isNotEmpty) { name_61 = bytes[61]; } if (bytes.isNotEmpty) { name_62 = bytes[62]; } if (bytes.isNotEmpty) { name_63 = bytes[63]; } if (bytes.isNotEmpty) { name_64 = bytes[64]; } if (bytes.isNotEmpty) { name_65 = bytes[65]; } if (bytes.isNotEmpty) { name_66 = bytes[66]; } if (bytes.isNotEmpty) { name_67 = bytes[67]; } if (bytes.isNotEmpty) { name_68 = bytes[68]; } if (bytes.isNotEmpty) { name_69 = bytes[69]; } if (bytes.isNotEmpty) { name_70 = bytes[70]; } if (bytes.isNotEmpty) { name_71 = bytes[71]; } if (bytes.isNotEmpty) { name_72 = bytes[72]; } if (bytes.isNotEmpty) { name_73 = bytes[73]; } if (bytes.isNotEmpty) { name_74 = bytes[74]; } if (bytes.isNotEmpty) { name_75 = bytes[75]; } if (bytes.isNotEmpty) { name_76 = bytes[76]; } if (bytes.isNotEmpty) { name_77 = bytes[77]; } if (bytes.isNotEmpty) { name_78 = bytes[78]; } if (bytes.isNotEmpty) { name_79 = bytes[79]; } if (bytes.isNotEmpty) { name_80 = bytes[80]; } if (bytes.isNotEmpty) { name_81 = bytes[81]; } if (bytes.isNotEmpty) { name_82 = bytes[82]; } if (bytes.isNotEmpty) { name_83 = bytes[83]; } if (bytes.isNotEmpty) { name_84 = bytes[84]; } if (bytes.isNotEmpty) { name_85 = bytes[85]; } if (bytes.isNotEmpty) { name_86 = bytes[86]; } if (bytes.isNotEmpty) { name_87 = bytes[87]; } if (bytes.isNotEmpty) { name_88 = bytes[88]; } if (bytes.isNotEmpty) { name_89 = bytes[89]; } if (bytes.isNotEmpty) { name_90 = bytes[90]; } if (bytes.isNotEmpty) { name_91 = bytes[91]; } if (bytes.isNotEmpty) { name_92 = bytes[92]; } if (bytes.isNotEmpty) { name_93 = bytes[93]; } if (bytes.isNotEmpty) { name_94 = bytes[94]; } if (bytes.isNotEmpty) { name_95 = bytes[95]; } if (bytes.isNotEmpty) { name_96 = bytes[96]; } if (bytes.isNotEmpty) { name_97 = bytes[97]; } if (bytes.isNotEmpty) { name_98 = bytes[98]; } if (bytes.isNotEmpty) { name_99 = bytes[99]; } if (bytes.isNotEmpty) { name_100 = bytes[100]; } if (bytes.isNotEmpty) { name_101 = bytes[101]; } if (bytes.isNotEmpty) { name_102 = bytes[102]; } if (bytes.isNotEmpty) { name_103 = bytes[103]; } if (bytes.isNotEmpty) { name_104 = bytes[104]; } if (bytes.isNotEmpty) { name_105 = bytes[105]; } if (bytes.isNotEmpty) { name_106 = bytes[106]; } if (bytes.isNotEmpty) { name_107 = bytes[107]; } if (bytes.isNotEmpty) { name_108 = bytes[108]; } if (bytes.isNotEmpty) { name_109 = bytes[109]; } if (bytes.isNotEmpty) { name_110 = bytes[110]; } if (bytes.isNotEmpty) { name_111 = bytes[111]; } if (bytes.isNotEmpty) { name_112 = bytes[112]; } if (bytes.isNotEmpty) { name_113 = bytes[113]; } if (bytes.isNotEmpty) { name_114 = bytes[114]; } if (bytes.isNotEmpty) { name_115 = bytes[115]; } if (bytes.isNotEmpty) { name_116 = bytes[116]; } if (bytes.isNotEmpty) { name_117 = bytes[117]; } if (bytes.isNotEmpty) { name_118 = bytes[118]; } if (bytes.isNotEmpty) { name_119 = bytes[119]; } if (bytes.isNotEmpty) { name_120 = bytes[120]; } if (bytes.isNotEmpty) { name_121 = bytes[121]; } if (bytes.isNotEmpty) { name_122 = bytes[122]; } if (bytes.isNotEmpty) { name_123 = bytes[123]; } if (bytes.isNotEmpty) { name_124 = bytes[124]; } if (bytes.isNotEmpty) { name_125 = bytes[125]; } if (bytes.isNotEmpty) { name_126 = bytes[126]; } if (bytes.isNotEmpty) { name_127 = bytes[127]; } if (bytes.isNotEmpty) { name_128 = bytes[128]; } if (bytes.isNotEmpty) { name_129 = bytes[129]; } if (bytes.isNotEmpty) { name_130 = bytes[130]; } if (bytes.isNotEmpty) { name_131 = bytes[131]; } if (bytes.isNotEmpty) { name_132 = bytes[132]; } if (bytes.isNotEmpty) { name_133 = bytes[133]; } if (bytes.isNotEmpty) { name_134 = bytes[134]; } if (bytes.isNotEmpty) { name_135 = bytes[135]; } if (bytes.isNotEmpty) { name_136 = bytes[136]; } if (bytes.isNotEmpty) { name_137 = bytes[137]; } if (bytes.isNotEmpty) { name_138 = bytes[138]; } if (bytes.isNotEmpty) { name_139 = bytes[139]; } if (bytes.isNotEmpty) { name_140 = bytes[140]; } if (bytes.isNotEmpty) { name_141 = bytes[141]; } if (bytes.isNotEmpty) { name_142 = bytes[142]; } if (bytes.isNotEmpty) { name_143 = bytes[143]; } if (bytes.isNotEmpty) { name_144 = bytes[144]; } if (bytes.isNotEmpty) { name_145 = bytes[145]; } if (bytes.isNotEmpty) { name_146 = bytes[146]; } if (bytes.isNotEmpty) { name_147 = bytes[147]; } if (bytes.isNotEmpty) { name_148 = bytes[148]; } if (bytes.isNotEmpty) { name_149 = bytes[149]; } if (bytes.isNotEmpty) { name_150 = bytes[150]; } if (bytes.isNotEmpty) { name_151 = bytes[151]; } if (bytes.isNotEmpty) { name_152 = bytes[152]; } if (bytes.isNotEmpty) { name_153 = bytes[153]; } if (bytes.isNotEmpty) { name_154 = bytes[154]; } if (bytes.isNotEmpty) { name_155 = bytes[155]; } if (bytes.isNotEmpty) { name_156 = bytes[156]; } if (bytes.isNotEmpty) { name_157 = bytes[157]; } if (bytes.isNotEmpty) { name_158 = bytes[158]; } if (bytes.isNotEmpty) { name_159 = bytes[159]; } if (bytes.isNotEmpty) { name_160 = bytes[160]; } if (bytes.isNotEmpty) { name_161 = bytes[161]; } if (bytes.isNotEmpty) { name_162 = bytes[162]; } if (bytes.isNotEmpty) { name_163 = bytes[163]; } if (bytes.isNotEmpty) { name_164 = bytes[164]; } if (bytes.isNotEmpty) { name_165 = bytes[165]; } if (bytes.isNotEmpty) { name_166 = bytes[166]; } if (bytes.isNotEmpty) { name_167 = bytes[167]; } if (bytes.isNotEmpty) { name_168 = bytes[168]; } if (bytes.isNotEmpty) { name_169 = bytes[169]; } if (bytes.isNotEmpty) { name_170 = bytes[170]; } if (bytes.isNotEmpty) { name_171 = bytes[171]; } if (bytes.isNotEmpty) { name_172 = bytes[172]; } if (bytes.isNotEmpty) { name_173 = bytes[173]; } if (bytes.isNotEmpty) { name_174 = bytes[174]; } if (bytes.isNotEmpty) { name_175 = bytes[175]; } if (bytes.isNotEmpty) { name_176 = bytes[176]; } if (bytes.isNotEmpty) { name_177 = bytes[177]; } if (bytes.isNotEmpty) { name_178 = bytes[178]; } if (bytes.isNotEmpty) { name_179 = bytes[179]; } if (bytes.isNotEmpty) { name_180 = bytes[180]; } if (bytes.isNotEmpty) { name_181 = bytes[181]; } if (bytes.isNotEmpty) { name_182 = bytes[182]; } if (bytes.isNotEmpty) { name_183 = bytes[183]; } if (bytes.isNotEmpty) { name_184 = bytes[184]; } if (bytes.isNotEmpty) { name_185 = bytes[185]; } if (bytes.isNotEmpty) { name_186 = bytes[186]; } if (bytes.isNotEmpty) { name_187 = bytes[187]; } if (bytes.isNotEmpty) { name_188 = bytes[188]; } if (bytes.isNotEmpty) { name_189 = bytes[189]; } if (bytes.isNotEmpty) { name_190 = bytes[190]; } if (bytes.isNotEmpty) { name_191 = bytes[191]; } if (bytes.isNotEmpty) { name_192 = bytes[192]; } if (bytes.isNotEmpty) { name_193 = bytes[193]; } if (bytes.isNotEmpty) { name_194 = bytes[194]; } if (bytes.isNotEmpty) { name_195 = bytes[195]; } if (bytes.isNotEmpty) { name_196 = bytes[196]; } if (bytes.isNotEmpty) { name_197 = bytes[197]; } if (bytes.isNotEmpty) { name_198 = bytes[198]; } if (bytes.isNotEmpty) { name_199 = bytes[199]; } if (bytes.isNotEmpty) { name_200 = bytes[200]; } if (bytes.isNotEmpty) { name_201 = bytes[201]; } if (bytes.isNotEmpty) { name_202 = bytes[202]; } if (bytes.isNotEmpty) { name_203 = bytes[203]; } if (bytes.isNotEmpty) { name_204 = bytes[204]; } if (bytes.isNotEmpty) { name_205 = bytes[205]; } if (bytes.isNotEmpty) { name_206 = bytes[206]; } if (bytes.isNotEmpty) { name_207 = bytes[207]; } if (bytes.isNotEmpty) { name_208 = bytes[208]; } if (bytes.isNotEmpty) { name_209 = bytes[209]; } if (bytes.isNotEmpty) { name_210 = bytes[210]; } if (bytes.isNotEmpty) { name_211 = bytes[211]; } if (bytes.isNotEmpty) { name_212 = bytes[212]; } if (bytes.isNotEmpty) { name_213 = bytes[213]; } if (bytes.isNotEmpty) { name_214 = bytes[214]; } if (bytes.isNotEmpty) { name_215 = bytes[215]; } if (bytes.isNotEmpty) { name_216 = bytes[216]; } if (bytes.isNotEmpty) { name_217 = bytes[217]; } if (bytes.isNotEmpty) { name_218 = bytes[218]; } if (bytes.isNotEmpty) { name_219 = bytes[219]; } if (bytes.isNotEmpty) { name_220 = bytes[220]; } if (bytes.isNotEmpty) { name_221 = bytes[221]; } if (bytes.isNotEmpty) { name_222 = bytes[222]; } if (bytes.isNotEmpty) { name_223 = bytes[223]; } if (bytes.isNotEmpty) { name_224 = bytes[224]; } if (bytes.isNotEmpty) { name_225 = bytes[225]; } if (bytes.isNotEmpty) { name_226 = bytes[226]; } if (bytes.isNotEmpty) { name_227 = bytes[227]; } if (bytes.isNotEmpty) { name_228 = bytes[228]; } if (bytes.isNotEmpty) { name_229 = bytes[229]; } if (bytes.isNotEmpty) { name_230 = bytes[230]; } if (bytes.isNotEmpty) { name_231 = bytes[231]; } if (bytes.isNotEmpty) { name_232 = bytes[232]; } if (bytes.isNotEmpty) { name_233 = bytes[233]; } if (bytes.isNotEmpty) { name_234 = bytes[234]; } if (bytes.isNotEmpty) { name_235 = bytes[235]; } if (bytes.isNotEmpty) { name_236 = bytes[236]; } if (bytes.isNotEmpty) { name_237 = bytes[237]; } if (bytes.isNotEmpty) { name_238 = bytes[238]; } if (bytes.isNotEmpty) { name_239 = bytes[239]; } if (bytes.isNotEmpty) { name_240 = bytes[240]; } if (bytes.isNotEmpty) { name_241 = bytes[241]; } if (bytes.isNotEmpty) { name_242 = bytes[242]; } if (bytes.isNotEmpty) { name_243 = bytes[243]; } if (bytes.isNotEmpty) { name_244 = bytes[244]; } if (bytes.isNotEmpty) { name_245 = bytes[245]; } if (bytes.isNotEmpty) { name_246 = bytes[246]; } if (bytes.isNotEmpty) { name_247 = bytes[247]; } if (bytes.isNotEmpty) { name_248 = bytes[248]; } if (bytes.isNotEmpty) { name_249 = bytes[249]; } if (bytes.isNotEmpty) { name_250 = bytes[250]; } if (bytes.isNotEmpty) { name_251 = bytes[251]; } if (bytes.isNotEmpty) { name_252 = bytes[252]; } if (bytes.isNotEmpty) { name_253 = bytes[253]; } if (bytes.isNotEmpty) { name_254 = bytes[254]; } if (bytes.isNotEmpty) { name_255 = bytes[255]; }
  }
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
  @Int32() int format;
}

class VkPipelineExecutableInternalRepresentationKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint8() int name_0; @Uint8() int name_1; @Uint8() int name_2; @Uint8() int name_3; @Uint8() int name_4; @Uint8() int name_5; @Uint8() int name_6; @Uint8() int name_7; @Uint8() int name_8; @Uint8() int name_9; @Uint8() int name_10; @Uint8() int name_11; @Uint8() int name_12; @Uint8() int name_13; @Uint8() int name_14; @Uint8() int name_15; @Uint8() int name_16; @Uint8() int name_17; @Uint8() int name_18; @Uint8() int name_19; @Uint8() int name_20; @Uint8() int name_21; @Uint8() int name_22; @Uint8() int name_23; @Uint8() int name_24; @Uint8() int name_25; @Uint8() int name_26; @Uint8() int name_27; @Uint8() int name_28; @Uint8() int name_29; @Uint8() int name_30; @Uint8() int name_31; @Uint8() int name_32; @Uint8() int name_33; @Uint8() int name_34; @Uint8() int name_35; @Uint8() int name_36; @Uint8() int name_37; @Uint8() int name_38; @Uint8() int name_39; @Uint8() int name_40; @Uint8() int name_41; @Uint8() int name_42; @Uint8() int name_43; @Uint8() int name_44; @Uint8() int name_45; @Uint8() int name_46; @Uint8() int name_47; @Uint8() int name_48; @Uint8() int name_49; @Uint8() int name_50; @Uint8() int name_51; @Uint8() int name_52; @Uint8() int name_53; @Uint8() int name_54; @Uint8() int name_55; @Uint8() int name_56; @Uint8() int name_57; @Uint8() int name_58; @Uint8() int name_59; @Uint8() int name_60; @Uint8() int name_61; @Uint8() int name_62; @Uint8() int name_63; @Uint8() int name_64; @Uint8() int name_65; @Uint8() int name_66; @Uint8() int name_67; @Uint8() int name_68; @Uint8() int name_69; @Uint8() int name_70; @Uint8() int name_71; @Uint8() int name_72; @Uint8() int name_73; @Uint8() int name_74; @Uint8() int name_75; @Uint8() int name_76; @Uint8() int name_77; @Uint8() int name_78; @Uint8() int name_79; @Uint8() int name_80; @Uint8() int name_81; @Uint8() int name_82; @Uint8() int name_83; @Uint8() int name_84; @Uint8() int name_85; @Uint8() int name_86; @Uint8() int name_87; @Uint8() int name_88; @Uint8() int name_89; @Uint8() int name_90; @Uint8() int name_91; @Uint8() int name_92; @Uint8() int name_93; @Uint8() int name_94; @Uint8() int name_95; @Uint8() int name_96; @Uint8() int name_97; @Uint8() int name_98; @Uint8() int name_99; @Uint8() int name_100; @Uint8() int name_101; @Uint8() int name_102; @Uint8() int name_103; @Uint8() int name_104; @Uint8() int name_105; @Uint8() int name_106; @Uint8() int name_107; @Uint8() int name_108; @Uint8() int name_109; @Uint8() int name_110; @Uint8() int name_111; @Uint8() int name_112; @Uint8() int name_113; @Uint8() int name_114; @Uint8() int name_115; @Uint8() int name_116; @Uint8() int name_117; @Uint8() int name_118; @Uint8() int name_119; @Uint8() int name_120; @Uint8() int name_121; @Uint8() int name_122; @Uint8() int name_123; @Uint8() int name_124; @Uint8() int name_125; @Uint8() int name_126; @Uint8() int name_127; @Uint8() int name_128; @Uint8() int name_129; @Uint8() int name_130; @Uint8() int name_131; @Uint8() int name_132; @Uint8() int name_133; @Uint8() int name_134; @Uint8() int name_135; @Uint8() int name_136; @Uint8() int name_137; @Uint8() int name_138; @Uint8() int name_139; @Uint8() int name_140; @Uint8() int name_141; @Uint8() int name_142; @Uint8() int name_143; @Uint8() int name_144; @Uint8() int name_145; @Uint8() int name_146; @Uint8() int name_147; @Uint8() int name_148; @Uint8() int name_149; @Uint8() int name_150; @Uint8() int name_151; @Uint8() int name_152; @Uint8() int name_153; @Uint8() int name_154; @Uint8() int name_155; @Uint8() int name_156; @Uint8() int name_157; @Uint8() int name_158; @Uint8() int name_159; @Uint8() int name_160; @Uint8() int name_161; @Uint8() int name_162; @Uint8() int name_163; @Uint8() int name_164; @Uint8() int name_165; @Uint8() int name_166; @Uint8() int name_167; @Uint8() int name_168; @Uint8() int name_169; @Uint8() int name_170; @Uint8() int name_171; @Uint8() int name_172; @Uint8() int name_173; @Uint8() int name_174; @Uint8() int name_175; @Uint8() int name_176; @Uint8() int name_177; @Uint8() int name_178; @Uint8() int name_179; @Uint8() int name_180; @Uint8() int name_181; @Uint8() int name_182; @Uint8() int name_183; @Uint8() int name_184; @Uint8() int name_185; @Uint8() int name_186; @Uint8() int name_187; @Uint8() int name_188; @Uint8() int name_189; @Uint8() int name_190; @Uint8() int name_191; @Uint8() int name_192; @Uint8() int name_193; @Uint8() int name_194; @Uint8() int name_195; @Uint8() int name_196; @Uint8() int name_197; @Uint8() int name_198; @Uint8() int name_199; @Uint8() int name_200; @Uint8() int name_201; @Uint8() int name_202; @Uint8() int name_203; @Uint8() int name_204; @Uint8() int name_205; @Uint8() int name_206; @Uint8() int name_207; @Uint8() int name_208; @Uint8() int name_209; @Uint8() int name_210; @Uint8() int name_211; @Uint8() int name_212; @Uint8() int name_213; @Uint8() int name_214; @Uint8() int name_215; @Uint8() int name_216; @Uint8() int name_217; @Uint8() int name_218; @Uint8() int name_219; @Uint8() int name_220; @Uint8() int name_221; @Uint8() int name_222; @Uint8() int name_223; @Uint8() int name_224; @Uint8() int name_225; @Uint8() int name_226; @Uint8() int name_227; @Uint8() int name_228; @Uint8() int name_229; @Uint8() int name_230; @Uint8() int name_231; @Uint8() int name_232; @Uint8() int name_233; @Uint8() int name_234; @Uint8() int name_235; @Uint8() int name_236; @Uint8() int name_237; @Uint8() int name_238; @Uint8() int name_239; @Uint8() int name_240; @Uint8() int name_241; @Uint8() int name_242; @Uint8() int name_243; @Uint8() int name_244; @Uint8() int name_245; @Uint8() int name_246; @Uint8() int name_247; @Uint8() int name_248; @Uint8() int name_249; @Uint8() int name_250; @Uint8() int name_251; @Uint8() int name_252; @Uint8() int name_253; @Uint8() int name_254; @Uint8() int name_255;
  String get name {
    var bytes = [name_0, name_1, name_2, name_3, name_4, name_5, name_6, name_7, name_8, name_9, name_10, name_11, name_12, name_13, name_14, name_15, name_16, name_17, name_18, name_19, name_20, name_21, name_22, name_23, name_24, name_25, name_26, name_27, name_28, name_29, name_30, name_31, name_32, name_33, name_34, name_35, name_36, name_37, name_38, name_39, name_40, name_41, name_42, name_43, name_44, name_45, name_46, name_47, name_48, name_49, name_50, name_51, name_52, name_53, name_54, name_55, name_56, name_57, name_58, name_59, name_60, name_61, name_62, name_63, name_64, name_65, name_66, name_67, name_68, name_69, name_70, name_71, name_72, name_73, name_74, name_75, name_76, name_77, name_78, name_79, name_80, name_81, name_82, name_83, name_84, name_85, name_86, name_87, name_88, name_89, name_90, name_91, name_92, name_93, name_94, name_95, name_96, name_97, name_98, name_99, name_100, name_101, name_102, name_103, name_104, name_105, name_106, name_107, name_108, name_109, name_110, name_111, name_112, name_113, name_114, name_115, name_116, name_117, name_118, name_119, name_120, name_121, name_122, name_123, name_124, name_125, name_126, name_127, name_128, name_129, name_130, name_131, name_132, name_133, name_134, name_135, name_136, name_137, name_138, name_139, name_140, name_141, name_142, name_143, name_144, name_145, name_146, name_147, name_148, name_149, name_150, name_151, name_152, name_153, name_154, name_155, name_156, name_157, name_158, name_159, name_160, name_161, name_162, name_163, name_164, name_165, name_166, name_167, name_168, name_169, name_170, name_171, name_172, name_173, name_174, name_175, name_176, name_177, name_178, name_179, name_180, name_181, name_182, name_183, name_184, name_185, name_186, name_187, name_188, name_189, name_190, name_191, name_192, name_193, name_194, name_195, name_196, name_197, name_198, name_199, name_200, name_201, name_202, name_203, name_204, name_205, name_206, name_207, name_208, name_209, name_210, name_211, name_212, name_213, name_214, name_215, name_216, name_217, name_218, name_219, name_220, name_221, name_222, name_223, name_224, name_225, name_226, name_227, name_228, name_229, name_230, name_231, name_232, name_233, name_234, name_235, name_236, name_237, name_238, name_239, name_240, name_241, name_242, name_243, name_244, name_245, name_246, name_247, name_248, name_249, name_250, name_251, name_252, name_253, name_254, name_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set name(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { name_0 = bytes[0]; } if (bytes.isNotEmpty) { name_1 = bytes[1]; } if (bytes.isNotEmpty) { name_2 = bytes[2]; } if (bytes.isNotEmpty) { name_3 = bytes[3]; } if (bytes.isNotEmpty) { name_4 = bytes[4]; } if (bytes.isNotEmpty) { name_5 = bytes[5]; } if (bytes.isNotEmpty) { name_6 = bytes[6]; } if (bytes.isNotEmpty) { name_7 = bytes[7]; } if (bytes.isNotEmpty) { name_8 = bytes[8]; } if (bytes.isNotEmpty) { name_9 = bytes[9]; } if (bytes.isNotEmpty) { name_10 = bytes[10]; } if (bytes.isNotEmpty) { name_11 = bytes[11]; } if (bytes.isNotEmpty) { name_12 = bytes[12]; } if (bytes.isNotEmpty) { name_13 = bytes[13]; } if (bytes.isNotEmpty) { name_14 = bytes[14]; } if (bytes.isNotEmpty) { name_15 = bytes[15]; } if (bytes.isNotEmpty) { name_16 = bytes[16]; } if (bytes.isNotEmpty) { name_17 = bytes[17]; } if (bytes.isNotEmpty) { name_18 = bytes[18]; } if (bytes.isNotEmpty) { name_19 = bytes[19]; } if (bytes.isNotEmpty) { name_20 = bytes[20]; } if (bytes.isNotEmpty) { name_21 = bytes[21]; } if (bytes.isNotEmpty) { name_22 = bytes[22]; } if (bytes.isNotEmpty) { name_23 = bytes[23]; } if (bytes.isNotEmpty) { name_24 = bytes[24]; } if (bytes.isNotEmpty) { name_25 = bytes[25]; } if (bytes.isNotEmpty) { name_26 = bytes[26]; } if (bytes.isNotEmpty) { name_27 = bytes[27]; } if (bytes.isNotEmpty) { name_28 = bytes[28]; } if (bytes.isNotEmpty) { name_29 = bytes[29]; } if (bytes.isNotEmpty) { name_30 = bytes[30]; } if (bytes.isNotEmpty) { name_31 = bytes[31]; } if (bytes.isNotEmpty) { name_32 = bytes[32]; } if (bytes.isNotEmpty) { name_33 = bytes[33]; } if (bytes.isNotEmpty) { name_34 = bytes[34]; } if (bytes.isNotEmpty) { name_35 = bytes[35]; } if (bytes.isNotEmpty) { name_36 = bytes[36]; } if (bytes.isNotEmpty) { name_37 = bytes[37]; } if (bytes.isNotEmpty) { name_38 = bytes[38]; } if (bytes.isNotEmpty) { name_39 = bytes[39]; } if (bytes.isNotEmpty) { name_40 = bytes[40]; } if (bytes.isNotEmpty) { name_41 = bytes[41]; } if (bytes.isNotEmpty) { name_42 = bytes[42]; } if (bytes.isNotEmpty) { name_43 = bytes[43]; } if (bytes.isNotEmpty) { name_44 = bytes[44]; } if (bytes.isNotEmpty) { name_45 = bytes[45]; } if (bytes.isNotEmpty) { name_46 = bytes[46]; } if (bytes.isNotEmpty) { name_47 = bytes[47]; } if (bytes.isNotEmpty) { name_48 = bytes[48]; } if (bytes.isNotEmpty) { name_49 = bytes[49]; } if (bytes.isNotEmpty) { name_50 = bytes[50]; } if (bytes.isNotEmpty) { name_51 = bytes[51]; } if (bytes.isNotEmpty) { name_52 = bytes[52]; } if (bytes.isNotEmpty) { name_53 = bytes[53]; } if (bytes.isNotEmpty) { name_54 = bytes[54]; } if (bytes.isNotEmpty) { name_55 = bytes[55]; } if (bytes.isNotEmpty) { name_56 = bytes[56]; } if (bytes.isNotEmpty) { name_57 = bytes[57]; } if (bytes.isNotEmpty) { name_58 = bytes[58]; } if (bytes.isNotEmpty) { name_59 = bytes[59]; } if (bytes.isNotEmpty) { name_60 = bytes[60]; } if (bytes.isNotEmpty) { name_61 = bytes[61]; } if (bytes.isNotEmpty) { name_62 = bytes[62]; } if (bytes.isNotEmpty) { name_63 = bytes[63]; } if (bytes.isNotEmpty) { name_64 = bytes[64]; } if (bytes.isNotEmpty) { name_65 = bytes[65]; } if (bytes.isNotEmpty) { name_66 = bytes[66]; } if (bytes.isNotEmpty) { name_67 = bytes[67]; } if (bytes.isNotEmpty) { name_68 = bytes[68]; } if (bytes.isNotEmpty) { name_69 = bytes[69]; } if (bytes.isNotEmpty) { name_70 = bytes[70]; } if (bytes.isNotEmpty) { name_71 = bytes[71]; } if (bytes.isNotEmpty) { name_72 = bytes[72]; } if (bytes.isNotEmpty) { name_73 = bytes[73]; } if (bytes.isNotEmpty) { name_74 = bytes[74]; } if (bytes.isNotEmpty) { name_75 = bytes[75]; } if (bytes.isNotEmpty) { name_76 = bytes[76]; } if (bytes.isNotEmpty) { name_77 = bytes[77]; } if (bytes.isNotEmpty) { name_78 = bytes[78]; } if (bytes.isNotEmpty) { name_79 = bytes[79]; } if (bytes.isNotEmpty) { name_80 = bytes[80]; } if (bytes.isNotEmpty) { name_81 = bytes[81]; } if (bytes.isNotEmpty) { name_82 = bytes[82]; } if (bytes.isNotEmpty) { name_83 = bytes[83]; } if (bytes.isNotEmpty) { name_84 = bytes[84]; } if (bytes.isNotEmpty) { name_85 = bytes[85]; } if (bytes.isNotEmpty) { name_86 = bytes[86]; } if (bytes.isNotEmpty) { name_87 = bytes[87]; } if (bytes.isNotEmpty) { name_88 = bytes[88]; } if (bytes.isNotEmpty) { name_89 = bytes[89]; } if (bytes.isNotEmpty) { name_90 = bytes[90]; } if (bytes.isNotEmpty) { name_91 = bytes[91]; } if (bytes.isNotEmpty) { name_92 = bytes[92]; } if (bytes.isNotEmpty) { name_93 = bytes[93]; } if (bytes.isNotEmpty) { name_94 = bytes[94]; } if (bytes.isNotEmpty) { name_95 = bytes[95]; } if (bytes.isNotEmpty) { name_96 = bytes[96]; } if (bytes.isNotEmpty) { name_97 = bytes[97]; } if (bytes.isNotEmpty) { name_98 = bytes[98]; } if (bytes.isNotEmpty) { name_99 = bytes[99]; } if (bytes.isNotEmpty) { name_100 = bytes[100]; } if (bytes.isNotEmpty) { name_101 = bytes[101]; } if (bytes.isNotEmpty) { name_102 = bytes[102]; } if (bytes.isNotEmpty) { name_103 = bytes[103]; } if (bytes.isNotEmpty) { name_104 = bytes[104]; } if (bytes.isNotEmpty) { name_105 = bytes[105]; } if (bytes.isNotEmpty) { name_106 = bytes[106]; } if (bytes.isNotEmpty) { name_107 = bytes[107]; } if (bytes.isNotEmpty) { name_108 = bytes[108]; } if (bytes.isNotEmpty) { name_109 = bytes[109]; } if (bytes.isNotEmpty) { name_110 = bytes[110]; } if (bytes.isNotEmpty) { name_111 = bytes[111]; } if (bytes.isNotEmpty) { name_112 = bytes[112]; } if (bytes.isNotEmpty) { name_113 = bytes[113]; } if (bytes.isNotEmpty) { name_114 = bytes[114]; } if (bytes.isNotEmpty) { name_115 = bytes[115]; } if (bytes.isNotEmpty) { name_116 = bytes[116]; } if (bytes.isNotEmpty) { name_117 = bytes[117]; } if (bytes.isNotEmpty) { name_118 = bytes[118]; } if (bytes.isNotEmpty) { name_119 = bytes[119]; } if (bytes.isNotEmpty) { name_120 = bytes[120]; } if (bytes.isNotEmpty) { name_121 = bytes[121]; } if (bytes.isNotEmpty) { name_122 = bytes[122]; } if (bytes.isNotEmpty) { name_123 = bytes[123]; } if (bytes.isNotEmpty) { name_124 = bytes[124]; } if (bytes.isNotEmpty) { name_125 = bytes[125]; } if (bytes.isNotEmpty) { name_126 = bytes[126]; } if (bytes.isNotEmpty) { name_127 = bytes[127]; } if (bytes.isNotEmpty) { name_128 = bytes[128]; } if (bytes.isNotEmpty) { name_129 = bytes[129]; } if (bytes.isNotEmpty) { name_130 = bytes[130]; } if (bytes.isNotEmpty) { name_131 = bytes[131]; } if (bytes.isNotEmpty) { name_132 = bytes[132]; } if (bytes.isNotEmpty) { name_133 = bytes[133]; } if (bytes.isNotEmpty) { name_134 = bytes[134]; } if (bytes.isNotEmpty) { name_135 = bytes[135]; } if (bytes.isNotEmpty) { name_136 = bytes[136]; } if (bytes.isNotEmpty) { name_137 = bytes[137]; } if (bytes.isNotEmpty) { name_138 = bytes[138]; } if (bytes.isNotEmpty) { name_139 = bytes[139]; } if (bytes.isNotEmpty) { name_140 = bytes[140]; } if (bytes.isNotEmpty) { name_141 = bytes[141]; } if (bytes.isNotEmpty) { name_142 = bytes[142]; } if (bytes.isNotEmpty) { name_143 = bytes[143]; } if (bytes.isNotEmpty) { name_144 = bytes[144]; } if (bytes.isNotEmpty) { name_145 = bytes[145]; } if (bytes.isNotEmpty) { name_146 = bytes[146]; } if (bytes.isNotEmpty) { name_147 = bytes[147]; } if (bytes.isNotEmpty) { name_148 = bytes[148]; } if (bytes.isNotEmpty) { name_149 = bytes[149]; } if (bytes.isNotEmpty) { name_150 = bytes[150]; } if (bytes.isNotEmpty) { name_151 = bytes[151]; } if (bytes.isNotEmpty) { name_152 = bytes[152]; } if (bytes.isNotEmpty) { name_153 = bytes[153]; } if (bytes.isNotEmpty) { name_154 = bytes[154]; } if (bytes.isNotEmpty) { name_155 = bytes[155]; } if (bytes.isNotEmpty) { name_156 = bytes[156]; } if (bytes.isNotEmpty) { name_157 = bytes[157]; } if (bytes.isNotEmpty) { name_158 = bytes[158]; } if (bytes.isNotEmpty) { name_159 = bytes[159]; } if (bytes.isNotEmpty) { name_160 = bytes[160]; } if (bytes.isNotEmpty) { name_161 = bytes[161]; } if (bytes.isNotEmpty) { name_162 = bytes[162]; } if (bytes.isNotEmpty) { name_163 = bytes[163]; } if (bytes.isNotEmpty) { name_164 = bytes[164]; } if (bytes.isNotEmpty) { name_165 = bytes[165]; } if (bytes.isNotEmpty) { name_166 = bytes[166]; } if (bytes.isNotEmpty) { name_167 = bytes[167]; } if (bytes.isNotEmpty) { name_168 = bytes[168]; } if (bytes.isNotEmpty) { name_169 = bytes[169]; } if (bytes.isNotEmpty) { name_170 = bytes[170]; } if (bytes.isNotEmpty) { name_171 = bytes[171]; } if (bytes.isNotEmpty) { name_172 = bytes[172]; } if (bytes.isNotEmpty) { name_173 = bytes[173]; } if (bytes.isNotEmpty) { name_174 = bytes[174]; } if (bytes.isNotEmpty) { name_175 = bytes[175]; } if (bytes.isNotEmpty) { name_176 = bytes[176]; } if (bytes.isNotEmpty) { name_177 = bytes[177]; } if (bytes.isNotEmpty) { name_178 = bytes[178]; } if (bytes.isNotEmpty) { name_179 = bytes[179]; } if (bytes.isNotEmpty) { name_180 = bytes[180]; } if (bytes.isNotEmpty) { name_181 = bytes[181]; } if (bytes.isNotEmpty) { name_182 = bytes[182]; } if (bytes.isNotEmpty) { name_183 = bytes[183]; } if (bytes.isNotEmpty) { name_184 = bytes[184]; } if (bytes.isNotEmpty) { name_185 = bytes[185]; } if (bytes.isNotEmpty) { name_186 = bytes[186]; } if (bytes.isNotEmpty) { name_187 = bytes[187]; } if (bytes.isNotEmpty) { name_188 = bytes[188]; } if (bytes.isNotEmpty) { name_189 = bytes[189]; } if (bytes.isNotEmpty) { name_190 = bytes[190]; } if (bytes.isNotEmpty) { name_191 = bytes[191]; } if (bytes.isNotEmpty) { name_192 = bytes[192]; } if (bytes.isNotEmpty) { name_193 = bytes[193]; } if (bytes.isNotEmpty) { name_194 = bytes[194]; } if (bytes.isNotEmpty) { name_195 = bytes[195]; } if (bytes.isNotEmpty) { name_196 = bytes[196]; } if (bytes.isNotEmpty) { name_197 = bytes[197]; } if (bytes.isNotEmpty) { name_198 = bytes[198]; } if (bytes.isNotEmpty) { name_199 = bytes[199]; } if (bytes.isNotEmpty) { name_200 = bytes[200]; } if (bytes.isNotEmpty) { name_201 = bytes[201]; } if (bytes.isNotEmpty) { name_202 = bytes[202]; } if (bytes.isNotEmpty) { name_203 = bytes[203]; } if (bytes.isNotEmpty) { name_204 = bytes[204]; } if (bytes.isNotEmpty) { name_205 = bytes[205]; } if (bytes.isNotEmpty) { name_206 = bytes[206]; } if (bytes.isNotEmpty) { name_207 = bytes[207]; } if (bytes.isNotEmpty) { name_208 = bytes[208]; } if (bytes.isNotEmpty) { name_209 = bytes[209]; } if (bytes.isNotEmpty) { name_210 = bytes[210]; } if (bytes.isNotEmpty) { name_211 = bytes[211]; } if (bytes.isNotEmpty) { name_212 = bytes[212]; } if (bytes.isNotEmpty) { name_213 = bytes[213]; } if (bytes.isNotEmpty) { name_214 = bytes[214]; } if (bytes.isNotEmpty) { name_215 = bytes[215]; } if (bytes.isNotEmpty) { name_216 = bytes[216]; } if (bytes.isNotEmpty) { name_217 = bytes[217]; } if (bytes.isNotEmpty) { name_218 = bytes[218]; } if (bytes.isNotEmpty) { name_219 = bytes[219]; } if (bytes.isNotEmpty) { name_220 = bytes[220]; } if (bytes.isNotEmpty) { name_221 = bytes[221]; } if (bytes.isNotEmpty) { name_222 = bytes[222]; } if (bytes.isNotEmpty) { name_223 = bytes[223]; } if (bytes.isNotEmpty) { name_224 = bytes[224]; } if (bytes.isNotEmpty) { name_225 = bytes[225]; } if (bytes.isNotEmpty) { name_226 = bytes[226]; } if (bytes.isNotEmpty) { name_227 = bytes[227]; } if (bytes.isNotEmpty) { name_228 = bytes[228]; } if (bytes.isNotEmpty) { name_229 = bytes[229]; } if (bytes.isNotEmpty) { name_230 = bytes[230]; } if (bytes.isNotEmpty) { name_231 = bytes[231]; } if (bytes.isNotEmpty) { name_232 = bytes[232]; } if (bytes.isNotEmpty) { name_233 = bytes[233]; } if (bytes.isNotEmpty) { name_234 = bytes[234]; } if (bytes.isNotEmpty) { name_235 = bytes[235]; } if (bytes.isNotEmpty) { name_236 = bytes[236]; } if (bytes.isNotEmpty) { name_237 = bytes[237]; } if (bytes.isNotEmpty) { name_238 = bytes[238]; } if (bytes.isNotEmpty) { name_239 = bytes[239]; } if (bytes.isNotEmpty) { name_240 = bytes[240]; } if (bytes.isNotEmpty) { name_241 = bytes[241]; } if (bytes.isNotEmpty) { name_242 = bytes[242]; } if (bytes.isNotEmpty) { name_243 = bytes[243]; } if (bytes.isNotEmpty) { name_244 = bytes[244]; } if (bytes.isNotEmpty) { name_245 = bytes[245]; } if (bytes.isNotEmpty) { name_246 = bytes[246]; } if (bytes.isNotEmpty) { name_247 = bytes[247]; } if (bytes.isNotEmpty) { name_248 = bytes[248]; } if (bytes.isNotEmpty) { name_249 = bytes[249]; } if (bytes.isNotEmpty) { name_250 = bytes[250]; } if (bytes.isNotEmpty) { name_251 = bytes[251]; } if (bytes.isNotEmpty) { name_252 = bytes[252]; } if (bytes.isNotEmpty) { name_253 = bytes[253]; } if (bytes.isNotEmpty) { name_254 = bytes[254]; } if (bytes.isNotEmpty) { name_255 = bytes[255]; }
  }
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
  @Uint32() int isText;
  @Uint64() int dataSize;
  Pointer pData;
}

class VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int shaderDemoteToHelperInvocation;
}

class VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int texelBufferAlignment;
}

class VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int storageTexelBufferOffsetAlignmentBytes;
  @Uint32() int storageTexelBufferOffsetSingleTexelAlignment;
  @Uint64() int uniformTexelBufferOffsetAlignmentBytes;
  @Uint32() int uniformTexelBufferOffsetSingleTexelAlignment;
}

class VkPhysicalDeviceSubgroupSizeControlFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int subgroupSizeControl;
  @Uint32() int computeFullSubgroups;
}

class VkPhysicalDeviceSubgroupSizeControlPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int minSubgroupSize;
  @Uint32() int maxSubgroupSize;
  @Uint32() int maxComputeWorkgroupSubgroups;
  @Uint32() int requiredSubgroupSizeStages;
}

class VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int requiredSubgroupSize;
}

class VkMemoryOpaqueCaptureAddressAllocateInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int opaqueCaptureAddress;
}

class VkMemoryOpaqueCaptureAddressAllocateInfoKHR extends Struct {
}

class VkDeviceMemoryOpaqueCaptureAddressInfo extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeviceMemory> memory;
}

class VkDeviceMemoryOpaqueCaptureAddressInfoKHR extends Struct {
}

class VkPhysicalDeviceLineRasterizationFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int rectangularLines;
  @Uint32() int bresenhamLines;
  @Uint32() int smoothLines;
  @Uint32() int stippledRectangularLines;
  @Uint32() int stippledBresenhamLines;
  @Uint32() int stippledSmoothLines;
}

class VkPhysicalDeviceLineRasterizationPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int lineSubPixelPrecisionBits;
}

class VkPipelineRasterizationLineStateCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int lineRasterizationMode;
  @Uint32() int stippledLineEnable;
  @Uint32() int lineStippleFactor;
  @Uint16() int lineStipplePattern;
}

class VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int pipelineCreationCacheControl;
}

class VkPhysicalDeviceVulkan11Features extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int storageBuffer16BitAccess;
  @Uint32() int uniformAndStorageBuffer16BitAccess;
  @Uint32() int storagePushConstant16;
  @Uint32() int storageInputOutput16;
  @Uint32() int multiview;
  @Uint32() int multiviewGeometryShader;
  @Uint32() int multiviewTessellationShader;
  @Uint32() int variablePointersStorageBuffer;
  @Uint32() int variablePointers;
  @Uint32() int protectedMemory;
  @Uint32() int samplerYcbcrConversion;
  @Uint32() int shaderDrawParameters;
}

class VkPhysicalDeviceVulkan11Properties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint8() int deviceUUID_0; @Uint8() int deviceUUID_1; @Uint8() int deviceUUID_2; @Uint8() int deviceUUID_3; @Uint8() int deviceUUID_4; @Uint8() int deviceUUID_5; @Uint8() int deviceUUID_6; @Uint8() int deviceUUID_7; @Uint8() int deviceUUID_8; @Uint8() int deviceUUID_9; @Uint8() int deviceUUID_10; @Uint8() int deviceUUID_11; @Uint8() int deviceUUID_12; @Uint8() int deviceUUID_13; @Uint8() int deviceUUID_14; @Uint8() int deviceUUID_15;
  String get deviceUUID {
    var bytes = [deviceUUID_0, deviceUUID_1, deviceUUID_2, deviceUUID_3, deviceUUID_4, deviceUUID_5, deviceUUID_6, deviceUUID_7, deviceUUID_8, deviceUUID_9, deviceUUID_10, deviceUUID_11, deviceUUID_12, deviceUUID_13, deviceUUID_14, deviceUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set deviceUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { deviceUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { deviceUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { deviceUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { deviceUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { deviceUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { deviceUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { deviceUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { deviceUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { deviceUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { deviceUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { deviceUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { deviceUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { deviceUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { deviceUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { deviceUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { deviceUUID_15 = bytes[15]; }
  }
  @Uint8() int driverUUID_0; @Uint8() int driverUUID_1; @Uint8() int driverUUID_2; @Uint8() int driverUUID_3; @Uint8() int driverUUID_4; @Uint8() int driverUUID_5; @Uint8() int driverUUID_6; @Uint8() int driverUUID_7; @Uint8() int driverUUID_8; @Uint8() int driverUUID_9; @Uint8() int driverUUID_10; @Uint8() int driverUUID_11; @Uint8() int driverUUID_12; @Uint8() int driverUUID_13; @Uint8() int driverUUID_14; @Uint8() int driverUUID_15;
  String get driverUUID {
    var bytes = [driverUUID_0, driverUUID_1, driverUUID_2, driverUUID_3, driverUUID_4, driverUUID_5, driverUUID_6, driverUUID_7, driverUUID_8, driverUUID_9, driverUUID_10, driverUUID_11, driverUUID_12, driverUUID_13, driverUUID_14, driverUUID_15].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverUUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverUUID_0 = bytes[0]; } if (bytes.isNotEmpty) { driverUUID_1 = bytes[1]; } if (bytes.isNotEmpty) { driverUUID_2 = bytes[2]; } if (bytes.isNotEmpty) { driverUUID_3 = bytes[3]; } if (bytes.isNotEmpty) { driverUUID_4 = bytes[4]; } if (bytes.isNotEmpty) { driverUUID_5 = bytes[5]; } if (bytes.isNotEmpty) { driverUUID_6 = bytes[6]; } if (bytes.isNotEmpty) { driverUUID_7 = bytes[7]; } if (bytes.isNotEmpty) { driverUUID_8 = bytes[8]; } if (bytes.isNotEmpty) { driverUUID_9 = bytes[9]; } if (bytes.isNotEmpty) { driverUUID_10 = bytes[10]; } if (bytes.isNotEmpty) { driverUUID_11 = bytes[11]; } if (bytes.isNotEmpty) { driverUUID_12 = bytes[12]; } if (bytes.isNotEmpty) { driverUUID_13 = bytes[13]; } if (bytes.isNotEmpty) { driverUUID_14 = bytes[14]; } if (bytes.isNotEmpty) { driverUUID_15 = bytes[15]; }
  }
  @Uint8() int deviceLUID_0; @Uint8() int deviceLUID_1; @Uint8() int deviceLUID_2; @Uint8() int deviceLUID_3; @Uint8() int deviceLUID_4; @Uint8() int deviceLUID_5; @Uint8() int deviceLUID_6; @Uint8() int deviceLUID_7;
  String get deviceLUID {
    var bytes = [deviceLUID_0, deviceLUID_1, deviceLUID_2, deviceLUID_3, deviceLUID_4, deviceLUID_5, deviceLUID_6, deviceLUID_7].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set deviceLUID(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { deviceLUID_0 = bytes[0]; } if (bytes.isNotEmpty) { deviceLUID_1 = bytes[1]; } if (bytes.isNotEmpty) { deviceLUID_2 = bytes[2]; } if (bytes.isNotEmpty) { deviceLUID_3 = bytes[3]; } if (bytes.isNotEmpty) { deviceLUID_4 = bytes[4]; } if (bytes.isNotEmpty) { deviceLUID_5 = bytes[5]; } if (bytes.isNotEmpty) { deviceLUID_6 = bytes[6]; } if (bytes.isNotEmpty) { deviceLUID_7 = bytes[7]; }
  }
  @Uint32() int deviceNodeMask;
  @Uint32() int deviceLUIDValid;
  @Uint32() int subgroupSize;
  @Uint32() int subgroupSupportedStages;
  @Uint32() int subgroupSupportedOperations;
  @Uint32() int subgroupQuadOperationsInAllStages;
  @Int32() int pointClippingBehavior;
  @Uint32() int maxMultiviewViewCount;
  @Uint32() int maxMultiviewInstanceIndex;
  @Uint32() int protectedNoFault;
  @Uint32() int maxPerSetDescriptors;
  @Uint64() int maxMemoryAllocationSize;
}

class VkPhysicalDeviceVulkan12Features extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int samplerMirrorClampToEdge;
  @Uint32() int drawIndirectCount;
  @Uint32() int storageBuffer8BitAccess;
  @Uint32() int uniformAndStorageBuffer8BitAccess;
  @Uint32() int storagePushConstant8;
  @Uint32() int shaderBufferInt64Atomics;
  @Uint32() int shaderSharedInt64Atomics;
  @Uint32() int shaderFloat16;
  @Uint32() int shaderInt8;
  @Uint32() int descriptorIndexing;
  @Uint32() int shaderInputAttachmentArrayDynamicIndexing;
  @Uint32() int shaderUniformTexelBufferArrayDynamicIndexing;
  @Uint32() int shaderStorageTexelBufferArrayDynamicIndexing;
  @Uint32() int shaderUniformBufferArrayNonUniformIndexing;
  @Uint32() int shaderSampledImageArrayNonUniformIndexing;
  @Uint32() int shaderStorageBufferArrayNonUniformIndexing;
  @Uint32() int shaderStorageImageArrayNonUniformIndexing;
  @Uint32() int shaderInputAttachmentArrayNonUniformIndexing;
  @Uint32() int shaderUniformTexelBufferArrayNonUniformIndexing;
  @Uint32() int shaderStorageTexelBufferArrayNonUniformIndexing;
  @Uint32() int descriptorBindingUniformBufferUpdateAfterBind;
  @Uint32() int descriptorBindingSampledImageUpdateAfterBind;
  @Uint32() int descriptorBindingStorageImageUpdateAfterBind;
  @Uint32() int descriptorBindingStorageBufferUpdateAfterBind;
  @Uint32() int descriptorBindingUniformTexelBufferUpdateAfterBind;
  @Uint32() int descriptorBindingStorageTexelBufferUpdateAfterBind;
  @Uint32() int descriptorBindingUpdateUnusedWhilePending;
  @Uint32() int descriptorBindingPartiallyBound;
  @Uint32() int descriptorBindingVariableDescriptorCount;
  @Uint32() int runtimeDescriptorArray;
  @Uint32() int samplerFilterMinmax;
  @Uint32() int scalarBlockLayout;
  @Uint32() int imagelessFramebuffer;
  @Uint32() int uniformBufferStandardLayout;
  @Uint32() int shaderSubgroupExtendedTypes;
  @Uint32() int separateDepthStencilLayouts;
  @Uint32() int hostQueryReset;
  @Uint32() int timelineSemaphore;
  @Uint32() int bufferDeviceAddress;
  @Uint32() int bufferDeviceAddressCaptureReplay;
  @Uint32() int bufferDeviceAddressMultiDevice;
  @Uint32() int vulkanMemoryModel;
  @Uint32() int vulkanMemoryModelDeviceScope;
  @Uint32() int vulkanMemoryModelAvailabilityVisibilityChains;
  @Uint32() int shaderOutputViewportIndex;
  @Uint32() int shaderOutputLayer;
  @Uint32() int subgroupBroadcastDynamicId;
}

class VkPhysicalDeviceVulkan12Properties extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int driverID;
  @Uint8() int driverName_0; @Uint8() int driverName_1; @Uint8() int driverName_2; @Uint8() int driverName_3; @Uint8() int driverName_4; @Uint8() int driverName_5; @Uint8() int driverName_6; @Uint8() int driverName_7; @Uint8() int driverName_8; @Uint8() int driverName_9; @Uint8() int driverName_10; @Uint8() int driverName_11; @Uint8() int driverName_12; @Uint8() int driverName_13; @Uint8() int driverName_14; @Uint8() int driverName_15; @Uint8() int driverName_16; @Uint8() int driverName_17; @Uint8() int driverName_18; @Uint8() int driverName_19; @Uint8() int driverName_20; @Uint8() int driverName_21; @Uint8() int driverName_22; @Uint8() int driverName_23; @Uint8() int driverName_24; @Uint8() int driverName_25; @Uint8() int driverName_26; @Uint8() int driverName_27; @Uint8() int driverName_28; @Uint8() int driverName_29; @Uint8() int driverName_30; @Uint8() int driverName_31; @Uint8() int driverName_32; @Uint8() int driverName_33; @Uint8() int driverName_34; @Uint8() int driverName_35; @Uint8() int driverName_36; @Uint8() int driverName_37; @Uint8() int driverName_38; @Uint8() int driverName_39; @Uint8() int driverName_40; @Uint8() int driverName_41; @Uint8() int driverName_42; @Uint8() int driverName_43; @Uint8() int driverName_44; @Uint8() int driverName_45; @Uint8() int driverName_46; @Uint8() int driverName_47; @Uint8() int driverName_48; @Uint8() int driverName_49; @Uint8() int driverName_50; @Uint8() int driverName_51; @Uint8() int driverName_52; @Uint8() int driverName_53; @Uint8() int driverName_54; @Uint8() int driverName_55; @Uint8() int driverName_56; @Uint8() int driverName_57; @Uint8() int driverName_58; @Uint8() int driverName_59; @Uint8() int driverName_60; @Uint8() int driverName_61; @Uint8() int driverName_62; @Uint8() int driverName_63; @Uint8() int driverName_64; @Uint8() int driverName_65; @Uint8() int driverName_66; @Uint8() int driverName_67; @Uint8() int driverName_68; @Uint8() int driverName_69; @Uint8() int driverName_70; @Uint8() int driverName_71; @Uint8() int driverName_72; @Uint8() int driverName_73; @Uint8() int driverName_74; @Uint8() int driverName_75; @Uint8() int driverName_76; @Uint8() int driverName_77; @Uint8() int driverName_78; @Uint8() int driverName_79; @Uint8() int driverName_80; @Uint8() int driverName_81; @Uint8() int driverName_82; @Uint8() int driverName_83; @Uint8() int driverName_84; @Uint8() int driverName_85; @Uint8() int driverName_86; @Uint8() int driverName_87; @Uint8() int driverName_88; @Uint8() int driverName_89; @Uint8() int driverName_90; @Uint8() int driverName_91; @Uint8() int driverName_92; @Uint8() int driverName_93; @Uint8() int driverName_94; @Uint8() int driverName_95; @Uint8() int driverName_96; @Uint8() int driverName_97; @Uint8() int driverName_98; @Uint8() int driverName_99; @Uint8() int driverName_100; @Uint8() int driverName_101; @Uint8() int driverName_102; @Uint8() int driverName_103; @Uint8() int driverName_104; @Uint8() int driverName_105; @Uint8() int driverName_106; @Uint8() int driverName_107; @Uint8() int driverName_108; @Uint8() int driverName_109; @Uint8() int driverName_110; @Uint8() int driverName_111; @Uint8() int driverName_112; @Uint8() int driverName_113; @Uint8() int driverName_114; @Uint8() int driverName_115; @Uint8() int driverName_116; @Uint8() int driverName_117; @Uint8() int driverName_118; @Uint8() int driverName_119; @Uint8() int driverName_120; @Uint8() int driverName_121; @Uint8() int driverName_122; @Uint8() int driverName_123; @Uint8() int driverName_124; @Uint8() int driverName_125; @Uint8() int driverName_126; @Uint8() int driverName_127; @Uint8() int driverName_128; @Uint8() int driverName_129; @Uint8() int driverName_130; @Uint8() int driverName_131; @Uint8() int driverName_132; @Uint8() int driverName_133; @Uint8() int driverName_134; @Uint8() int driverName_135; @Uint8() int driverName_136; @Uint8() int driverName_137; @Uint8() int driverName_138; @Uint8() int driverName_139; @Uint8() int driverName_140; @Uint8() int driverName_141; @Uint8() int driverName_142; @Uint8() int driverName_143; @Uint8() int driverName_144; @Uint8() int driverName_145; @Uint8() int driverName_146; @Uint8() int driverName_147; @Uint8() int driverName_148; @Uint8() int driverName_149; @Uint8() int driverName_150; @Uint8() int driverName_151; @Uint8() int driverName_152; @Uint8() int driverName_153; @Uint8() int driverName_154; @Uint8() int driverName_155; @Uint8() int driverName_156; @Uint8() int driverName_157; @Uint8() int driverName_158; @Uint8() int driverName_159; @Uint8() int driverName_160; @Uint8() int driverName_161; @Uint8() int driverName_162; @Uint8() int driverName_163; @Uint8() int driverName_164; @Uint8() int driverName_165; @Uint8() int driverName_166; @Uint8() int driverName_167; @Uint8() int driverName_168; @Uint8() int driverName_169; @Uint8() int driverName_170; @Uint8() int driverName_171; @Uint8() int driverName_172; @Uint8() int driverName_173; @Uint8() int driverName_174; @Uint8() int driverName_175; @Uint8() int driverName_176; @Uint8() int driverName_177; @Uint8() int driverName_178; @Uint8() int driverName_179; @Uint8() int driverName_180; @Uint8() int driverName_181; @Uint8() int driverName_182; @Uint8() int driverName_183; @Uint8() int driverName_184; @Uint8() int driverName_185; @Uint8() int driverName_186; @Uint8() int driverName_187; @Uint8() int driverName_188; @Uint8() int driverName_189; @Uint8() int driverName_190; @Uint8() int driverName_191; @Uint8() int driverName_192; @Uint8() int driverName_193; @Uint8() int driverName_194; @Uint8() int driverName_195; @Uint8() int driverName_196; @Uint8() int driverName_197; @Uint8() int driverName_198; @Uint8() int driverName_199; @Uint8() int driverName_200; @Uint8() int driverName_201; @Uint8() int driverName_202; @Uint8() int driverName_203; @Uint8() int driverName_204; @Uint8() int driverName_205; @Uint8() int driverName_206; @Uint8() int driverName_207; @Uint8() int driverName_208; @Uint8() int driverName_209; @Uint8() int driverName_210; @Uint8() int driverName_211; @Uint8() int driverName_212; @Uint8() int driverName_213; @Uint8() int driverName_214; @Uint8() int driverName_215; @Uint8() int driverName_216; @Uint8() int driverName_217; @Uint8() int driverName_218; @Uint8() int driverName_219; @Uint8() int driverName_220; @Uint8() int driverName_221; @Uint8() int driverName_222; @Uint8() int driverName_223; @Uint8() int driverName_224; @Uint8() int driverName_225; @Uint8() int driverName_226; @Uint8() int driverName_227; @Uint8() int driverName_228; @Uint8() int driverName_229; @Uint8() int driverName_230; @Uint8() int driverName_231; @Uint8() int driverName_232; @Uint8() int driverName_233; @Uint8() int driverName_234; @Uint8() int driverName_235; @Uint8() int driverName_236; @Uint8() int driverName_237; @Uint8() int driverName_238; @Uint8() int driverName_239; @Uint8() int driverName_240; @Uint8() int driverName_241; @Uint8() int driverName_242; @Uint8() int driverName_243; @Uint8() int driverName_244; @Uint8() int driverName_245; @Uint8() int driverName_246; @Uint8() int driverName_247; @Uint8() int driverName_248; @Uint8() int driverName_249; @Uint8() int driverName_250; @Uint8() int driverName_251; @Uint8() int driverName_252; @Uint8() int driverName_253; @Uint8() int driverName_254; @Uint8() int driverName_255;
  String get driverName {
    var bytes = [driverName_0, driverName_1, driverName_2, driverName_3, driverName_4, driverName_5, driverName_6, driverName_7, driverName_8, driverName_9, driverName_10, driverName_11, driverName_12, driverName_13, driverName_14, driverName_15, driverName_16, driverName_17, driverName_18, driverName_19, driverName_20, driverName_21, driverName_22, driverName_23, driverName_24, driverName_25, driverName_26, driverName_27, driverName_28, driverName_29, driverName_30, driverName_31, driverName_32, driverName_33, driverName_34, driverName_35, driverName_36, driverName_37, driverName_38, driverName_39, driverName_40, driverName_41, driverName_42, driverName_43, driverName_44, driverName_45, driverName_46, driverName_47, driverName_48, driverName_49, driverName_50, driverName_51, driverName_52, driverName_53, driverName_54, driverName_55, driverName_56, driverName_57, driverName_58, driverName_59, driverName_60, driverName_61, driverName_62, driverName_63, driverName_64, driverName_65, driverName_66, driverName_67, driverName_68, driverName_69, driverName_70, driverName_71, driverName_72, driverName_73, driverName_74, driverName_75, driverName_76, driverName_77, driverName_78, driverName_79, driverName_80, driverName_81, driverName_82, driverName_83, driverName_84, driverName_85, driverName_86, driverName_87, driverName_88, driverName_89, driverName_90, driverName_91, driverName_92, driverName_93, driverName_94, driverName_95, driverName_96, driverName_97, driverName_98, driverName_99, driverName_100, driverName_101, driverName_102, driverName_103, driverName_104, driverName_105, driverName_106, driverName_107, driverName_108, driverName_109, driverName_110, driverName_111, driverName_112, driverName_113, driverName_114, driverName_115, driverName_116, driverName_117, driverName_118, driverName_119, driverName_120, driverName_121, driverName_122, driverName_123, driverName_124, driverName_125, driverName_126, driverName_127, driverName_128, driverName_129, driverName_130, driverName_131, driverName_132, driverName_133, driverName_134, driverName_135, driverName_136, driverName_137, driverName_138, driverName_139, driverName_140, driverName_141, driverName_142, driverName_143, driverName_144, driverName_145, driverName_146, driverName_147, driverName_148, driverName_149, driverName_150, driverName_151, driverName_152, driverName_153, driverName_154, driverName_155, driverName_156, driverName_157, driverName_158, driverName_159, driverName_160, driverName_161, driverName_162, driverName_163, driverName_164, driverName_165, driverName_166, driverName_167, driverName_168, driverName_169, driverName_170, driverName_171, driverName_172, driverName_173, driverName_174, driverName_175, driverName_176, driverName_177, driverName_178, driverName_179, driverName_180, driverName_181, driverName_182, driverName_183, driverName_184, driverName_185, driverName_186, driverName_187, driverName_188, driverName_189, driverName_190, driverName_191, driverName_192, driverName_193, driverName_194, driverName_195, driverName_196, driverName_197, driverName_198, driverName_199, driverName_200, driverName_201, driverName_202, driverName_203, driverName_204, driverName_205, driverName_206, driverName_207, driverName_208, driverName_209, driverName_210, driverName_211, driverName_212, driverName_213, driverName_214, driverName_215, driverName_216, driverName_217, driverName_218, driverName_219, driverName_220, driverName_221, driverName_222, driverName_223, driverName_224, driverName_225, driverName_226, driverName_227, driverName_228, driverName_229, driverName_230, driverName_231, driverName_232, driverName_233, driverName_234, driverName_235, driverName_236, driverName_237, driverName_238, driverName_239, driverName_240, driverName_241, driverName_242, driverName_243, driverName_244, driverName_245, driverName_246, driverName_247, driverName_248, driverName_249, driverName_250, driverName_251, driverName_252, driverName_253, driverName_254, driverName_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverName(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverName_0 = bytes[0]; } if (bytes.isNotEmpty) { driverName_1 = bytes[1]; } if (bytes.isNotEmpty) { driverName_2 = bytes[2]; } if (bytes.isNotEmpty) { driverName_3 = bytes[3]; } if (bytes.isNotEmpty) { driverName_4 = bytes[4]; } if (bytes.isNotEmpty) { driverName_5 = bytes[5]; } if (bytes.isNotEmpty) { driverName_6 = bytes[6]; } if (bytes.isNotEmpty) { driverName_7 = bytes[7]; } if (bytes.isNotEmpty) { driverName_8 = bytes[8]; } if (bytes.isNotEmpty) { driverName_9 = bytes[9]; } if (bytes.isNotEmpty) { driverName_10 = bytes[10]; } if (bytes.isNotEmpty) { driverName_11 = bytes[11]; } if (bytes.isNotEmpty) { driverName_12 = bytes[12]; } if (bytes.isNotEmpty) { driverName_13 = bytes[13]; } if (bytes.isNotEmpty) { driverName_14 = bytes[14]; } if (bytes.isNotEmpty) { driverName_15 = bytes[15]; } if (bytes.isNotEmpty) { driverName_16 = bytes[16]; } if (bytes.isNotEmpty) { driverName_17 = bytes[17]; } if (bytes.isNotEmpty) { driverName_18 = bytes[18]; } if (bytes.isNotEmpty) { driverName_19 = bytes[19]; } if (bytes.isNotEmpty) { driverName_20 = bytes[20]; } if (bytes.isNotEmpty) { driverName_21 = bytes[21]; } if (bytes.isNotEmpty) { driverName_22 = bytes[22]; } if (bytes.isNotEmpty) { driverName_23 = bytes[23]; } if (bytes.isNotEmpty) { driverName_24 = bytes[24]; } if (bytes.isNotEmpty) { driverName_25 = bytes[25]; } if (bytes.isNotEmpty) { driverName_26 = bytes[26]; } if (bytes.isNotEmpty) { driverName_27 = bytes[27]; } if (bytes.isNotEmpty) { driverName_28 = bytes[28]; } if (bytes.isNotEmpty) { driverName_29 = bytes[29]; } if (bytes.isNotEmpty) { driverName_30 = bytes[30]; } if (bytes.isNotEmpty) { driverName_31 = bytes[31]; } if (bytes.isNotEmpty) { driverName_32 = bytes[32]; } if (bytes.isNotEmpty) { driverName_33 = bytes[33]; } if (bytes.isNotEmpty) { driverName_34 = bytes[34]; } if (bytes.isNotEmpty) { driverName_35 = bytes[35]; } if (bytes.isNotEmpty) { driverName_36 = bytes[36]; } if (bytes.isNotEmpty) { driverName_37 = bytes[37]; } if (bytes.isNotEmpty) { driverName_38 = bytes[38]; } if (bytes.isNotEmpty) { driverName_39 = bytes[39]; } if (bytes.isNotEmpty) { driverName_40 = bytes[40]; } if (bytes.isNotEmpty) { driverName_41 = bytes[41]; } if (bytes.isNotEmpty) { driverName_42 = bytes[42]; } if (bytes.isNotEmpty) { driverName_43 = bytes[43]; } if (bytes.isNotEmpty) { driverName_44 = bytes[44]; } if (bytes.isNotEmpty) { driverName_45 = bytes[45]; } if (bytes.isNotEmpty) { driverName_46 = bytes[46]; } if (bytes.isNotEmpty) { driverName_47 = bytes[47]; } if (bytes.isNotEmpty) { driverName_48 = bytes[48]; } if (bytes.isNotEmpty) { driverName_49 = bytes[49]; } if (bytes.isNotEmpty) { driverName_50 = bytes[50]; } if (bytes.isNotEmpty) { driverName_51 = bytes[51]; } if (bytes.isNotEmpty) { driverName_52 = bytes[52]; } if (bytes.isNotEmpty) { driverName_53 = bytes[53]; } if (bytes.isNotEmpty) { driverName_54 = bytes[54]; } if (bytes.isNotEmpty) { driverName_55 = bytes[55]; } if (bytes.isNotEmpty) { driverName_56 = bytes[56]; } if (bytes.isNotEmpty) { driverName_57 = bytes[57]; } if (bytes.isNotEmpty) { driverName_58 = bytes[58]; } if (bytes.isNotEmpty) { driverName_59 = bytes[59]; } if (bytes.isNotEmpty) { driverName_60 = bytes[60]; } if (bytes.isNotEmpty) { driverName_61 = bytes[61]; } if (bytes.isNotEmpty) { driverName_62 = bytes[62]; } if (bytes.isNotEmpty) { driverName_63 = bytes[63]; } if (bytes.isNotEmpty) { driverName_64 = bytes[64]; } if (bytes.isNotEmpty) { driverName_65 = bytes[65]; } if (bytes.isNotEmpty) { driverName_66 = bytes[66]; } if (bytes.isNotEmpty) { driverName_67 = bytes[67]; } if (bytes.isNotEmpty) { driverName_68 = bytes[68]; } if (bytes.isNotEmpty) { driverName_69 = bytes[69]; } if (bytes.isNotEmpty) { driverName_70 = bytes[70]; } if (bytes.isNotEmpty) { driverName_71 = bytes[71]; } if (bytes.isNotEmpty) { driverName_72 = bytes[72]; } if (bytes.isNotEmpty) { driverName_73 = bytes[73]; } if (bytes.isNotEmpty) { driverName_74 = bytes[74]; } if (bytes.isNotEmpty) { driverName_75 = bytes[75]; } if (bytes.isNotEmpty) { driverName_76 = bytes[76]; } if (bytes.isNotEmpty) { driverName_77 = bytes[77]; } if (bytes.isNotEmpty) { driverName_78 = bytes[78]; } if (bytes.isNotEmpty) { driverName_79 = bytes[79]; } if (bytes.isNotEmpty) { driverName_80 = bytes[80]; } if (bytes.isNotEmpty) { driverName_81 = bytes[81]; } if (bytes.isNotEmpty) { driverName_82 = bytes[82]; } if (bytes.isNotEmpty) { driverName_83 = bytes[83]; } if (bytes.isNotEmpty) { driverName_84 = bytes[84]; } if (bytes.isNotEmpty) { driverName_85 = bytes[85]; } if (bytes.isNotEmpty) { driverName_86 = bytes[86]; } if (bytes.isNotEmpty) { driverName_87 = bytes[87]; } if (bytes.isNotEmpty) { driverName_88 = bytes[88]; } if (bytes.isNotEmpty) { driverName_89 = bytes[89]; } if (bytes.isNotEmpty) { driverName_90 = bytes[90]; } if (bytes.isNotEmpty) { driverName_91 = bytes[91]; } if (bytes.isNotEmpty) { driverName_92 = bytes[92]; } if (bytes.isNotEmpty) { driverName_93 = bytes[93]; } if (bytes.isNotEmpty) { driverName_94 = bytes[94]; } if (bytes.isNotEmpty) { driverName_95 = bytes[95]; } if (bytes.isNotEmpty) { driverName_96 = bytes[96]; } if (bytes.isNotEmpty) { driverName_97 = bytes[97]; } if (bytes.isNotEmpty) { driverName_98 = bytes[98]; } if (bytes.isNotEmpty) { driverName_99 = bytes[99]; } if (bytes.isNotEmpty) { driverName_100 = bytes[100]; } if (bytes.isNotEmpty) { driverName_101 = bytes[101]; } if (bytes.isNotEmpty) { driverName_102 = bytes[102]; } if (bytes.isNotEmpty) { driverName_103 = bytes[103]; } if (bytes.isNotEmpty) { driverName_104 = bytes[104]; } if (bytes.isNotEmpty) { driverName_105 = bytes[105]; } if (bytes.isNotEmpty) { driverName_106 = bytes[106]; } if (bytes.isNotEmpty) { driverName_107 = bytes[107]; } if (bytes.isNotEmpty) { driverName_108 = bytes[108]; } if (bytes.isNotEmpty) { driverName_109 = bytes[109]; } if (bytes.isNotEmpty) { driverName_110 = bytes[110]; } if (bytes.isNotEmpty) { driverName_111 = bytes[111]; } if (bytes.isNotEmpty) { driverName_112 = bytes[112]; } if (bytes.isNotEmpty) { driverName_113 = bytes[113]; } if (bytes.isNotEmpty) { driverName_114 = bytes[114]; } if (bytes.isNotEmpty) { driverName_115 = bytes[115]; } if (bytes.isNotEmpty) { driverName_116 = bytes[116]; } if (bytes.isNotEmpty) { driverName_117 = bytes[117]; } if (bytes.isNotEmpty) { driverName_118 = bytes[118]; } if (bytes.isNotEmpty) { driverName_119 = bytes[119]; } if (bytes.isNotEmpty) { driverName_120 = bytes[120]; } if (bytes.isNotEmpty) { driverName_121 = bytes[121]; } if (bytes.isNotEmpty) { driverName_122 = bytes[122]; } if (bytes.isNotEmpty) { driverName_123 = bytes[123]; } if (bytes.isNotEmpty) { driverName_124 = bytes[124]; } if (bytes.isNotEmpty) { driverName_125 = bytes[125]; } if (bytes.isNotEmpty) { driverName_126 = bytes[126]; } if (bytes.isNotEmpty) { driverName_127 = bytes[127]; } if (bytes.isNotEmpty) { driverName_128 = bytes[128]; } if (bytes.isNotEmpty) { driverName_129 = bytes[129]; } if (bytes.isNotEmpty) { driverName_130 = bytes[130]; } if (bytes.isNotEmpty) { driverName_131 = bytes[131]; } if (bytes.isNotEmpty) { driverName_132 = bytes[132]; } if (bytes.isNotEmpty) { driverName_133 = bytes[133]; } if (bytes.isNotEmpty) { driverName_134 = bytes[134]; } if (bytes.isNotEmpty) { driverName_135 = bytes[135]; } if (bytes.isNotEmpty) { driverName_136 = bytes[136]; } if (bytes.isNotEmpty) { driverName_137 = bytes[137]; } if (bytes.isNotEmpty) { driverName_138 = bytes[138]; } if (bytes.isNotEmpty) { driverName_139 = bytes[139]; } if (bytes.isNotEmpty) { driverName_140 = bytes[140]; } if (bytes.isNotEmpty) { driverName_141 = bytes[141]; } if (bytes.isNotEmpty) { driverName_142 = bytes[142]; } if (bytes.isNotEmpty) { driverName_143 = bytes[143]; } if (bytes.isNotEmpty) { driverName_144 = bytes[144]; } if (bytes.isNotEmpty) { driverName_145 = bytes[145]; } if (bytes.isNotEmpty) { driverName_146 = bytes[146]; } if (bytes.isNotEmpty) { driverName_147 = bytes[147]; } if (bytes.isNotEmpty) { driverName_148 = bytes[148]; } if (bytes.isNotEmpty) { driverName_149 = bytes[149]; } if (bytes.isNotEmpty) { driverName_150 = bytes[150]; } if (bytes.isNotEmpty) { driverName_151 = bytes[151]; } if (bytes.isNotEmpty) { driverName_152 = bytes[152]; } if (bytes.isNotEmpty) { driverName_153 = bytes[153]; } if (bytes.isNotEmpty) { driverName_154 = bytes[154]; } if (bytes.isNotEmpty) { driverName_155 = bytes[155]; } if (bytes.isNotEmpty) { driverName_156 = bytes[156]; } if (bytes.isNotEmpty) { driverName_157 = bytes[157]; } if (bytes.isNotEmpty) { driverName_158 = bytes[158]; } if (bytes.isNotEmpty) { driverName_159 = bytes[159]; } if (bytes.isNotEmpty) { driverName_160 = bytes[160]; } if (bytes.isNotEmpty) { driverName_161 = bytes[161]; } if (bytes.isNotEmpty) { driverName_162 = bytes[162]; } if (bytes.isNotEmpty) { driverName_163 = bytes[163]; } if (bytes.isNotEmpty) { driverName_164 = bytes[164]; } if (bytes.isNotEmpty) { driverName_165 = bytes[165]; } if (bytes.isNotEmpty) { driverName_166 = bytes[166]; } if (bytes.isNotEmpty) { driverName_167 = bytes[167]; } if (bytes.isNotEmpty) { driverName_168 = bytes[168]; } if (bytes.isNotEmpty) { driverName_169 = bytes[169]; } if (bytes.isNotEmpty) { driverName_170 = bytes[170]; } if (bytes.isNotEmpty) { driverName_171 = bytes[171]; } if (bytes.isNotEmpty) { driverName_172 = bytes[172]; } if (bytes.isNotEmpty) { driverName_173 = bytes[173]; } if (bytes.isNotEmpty) { driverName_174 = bytes[174]; } if (bytes.isNotEmpty) { driverName_175 = bytes[175]; } if (bytes.isNotEmpty) { driverName_176 = bytes[176]; } if (bytes.isNotEmpty) { driverName_177 = bytes[177]; } if (bytes.isNotEmpty) { driverName_178 = bytes[178]; } if (bytes.isNotEmpty) { driverName_179 = bytes[179]; } if (bytes.isNotEmpty) { driverName_180 = bytes[180]; } if (bytes.isNotEmpty) { driverName_181 = bytes[181]; } if (bytes.isNotEmpty) { driverName_182 = bytes[182]; } if (bytes.isNotEmpty) { driverName_183 = bytes[183]; } if (bytes.isNotEmpty) { driverName_184 = bytes[184]; } if (bytes.isNotEmpty) { driverName_185 = bytes[185]; } if (bytes.isNotEmpty) { driverName_186 = bytes[186]; } if (bytes.isNotEmpty) { driverName_187 = bytes[187]; } if (bytes.isNotEmpty) { driverName_188 = bytes[188]; } if (bytes.isNotEmpty) { driverName_189 = bytes[189]; } if (bytes.isNotEmpty) { driverName_190 = bytes[190]; } if (bytes.isNotEmpty) { driverName_191 = bytes[191]; } if (bytes.isNotEmpty) { driverName_192 = bytes[192]; } if (bytes.isNotEmpty) { driverName_193 = bytes[193]; } if (bytes.isNotEmpty) { driverName_194 = bytes[194]; } if (bytes.isNotEmpty) { driverName_195 = bytes[195]; } if (bytes.isNotEmpty) { driverName_196 = bytes[196]; } if (bytes.isNotEmpty) { driverName_197 = bytes[197]; } if (bytes.isNotEmpty) { driverName_198 = bytes[198]; } if (bytes.isNotEmpty) { driverName_199 = bytes[199]; } if (bytes.isNotEmpty) { driverName_200 = bytes[200]; } if (bytes.isNotEmpty) { driverName_201 = bytes[201]; } if (bytes.isNotEmpty) { driverName_202 = bytes[202]; } if (bytes.isNotEmpty) { driverName_203 = bytes[203]; } if (bytes.isNotEmpty) { driverName_204 = bytes[204]; } if (bytes.isNotEmpty) { driverName_205 = bytes[205]; } if (bytes.isNotEmpty) { driverName_206 = bytes[206]; } if (bytes.isNotEmpty) { driverName_207 = bytes[207]; } if (bytes.isNotEmpty) { driverName_208 = bytes[208]; } if (bytes.isNotEmpty) { driverName_209 = bytes[209]; } if (bytes.isNotEmpty) { driverName_210 = bytes[210]; } if (bytes.isNotEmpty) { driverName_211 = bytes[211]; } if (bytes.isNotEmpty) { driverName_212 = bytes[212]; } if (bytes.isNotEmpty) { driverName_213 = bytes[213]; } if (bytes.isNotEmpty) { driverName_214 = bytes[214]; } if (bytes.isNotEmpty) { driverName_215 = bytes[215]; } if (bytes.isNotEmpty) { driverName_216 = bytes[216]; } if (bytes.isNotEmpty) { driverName_217 = bytes[217]; } if (bytes.isNotEmpty) { driverName_218 = bytes[218]; } if (bytes.isNotEmpty) { driverName_219 = bytes[219]; } if (bytes.isNotEmpty) { driverName_220 = bytes[220]; } if (bytes.isNotEmpty) { driverName_221 = bytes[221]; } if (bytes.isNotEmpty) { driverName_222 = bytes[222]; } if (bytes.isNotEmpty) { driverName_223 = bytes[223]; } if (bytes.isNotEmpty) { driverName_224 = bytes[224]; } if (bytes.isNotEmpty) { driverName_225 = bytes[225]; } if (bytes.isNotEmpty) { driverName_226 = bytes[226]; } if (bytes.isNotEmpty) { driverName_227 = bytes[227]; } if (bytes.isNotEmpty) { driverName_228 = bytes[228]; } if (bytes.isNotEmpty) { driverName_229 = bytes[229]; } if (bytes.isNotEmpty) { driverName_230 = bytes[230]; } if (bytes.isNotEmpty) { driverName_231 = bytes[231]; } if (bytes.isNotEmpty) { driverName_232 = bytes[232]; } if (bytes.isNotEmpty) { driverName_233 = bytes[233]; } if (bytes.isNotEmpty) { driverName_234 = bytes[234]; } if (bytes.isNotEmpty) { driverName_235 = bytes[235]; } if (bytes.isNotEmpty) { driverName_236 = bytes[236]; } if (bytes.isNotEmpty) { driverName_237 = bytes[237]; } if (bytes.isNotEmpty) { driverName_238 = bytes[238]; } if (bytes.isNotEmpty) { driverName_239 = bytes[239]; } if (bytes.isNotEmpty) { driverName_240 = bytes[240]; } if (bytes.isNotEmpty) { driverName_241 = bytes[241]; } if (bytes.isNotEmpty) { driverName_242 = bytes[242]; } if (bytes.isNotEmpty) { driverName_243 = bytes[243]; } if (bytes.isNotEmpty) { driverName_244 = bytes[244]; } if (bytes.isNotEmpty) { driverName_245 = bytes[245]; } if (bytes.isNotEmpty) { driverName_246 = bytes[246]; } if (bytes.isNotEmpty) { driverName_247 = bytes[247]; } if (bytes.isNotEmpty) { driverName_248 = bytes[248]; } if (bytes.isNotEmpty) { driverName_249 = bytes[249]; } if (bytes.isNotEmpty) { driverName_250 = bytes[250]; } if (bytes.isNotEmpty) { driverName_251 = bytes[251]; } if (bytes.isNotEmpty) { driverName_252 = bytes[252]; } if (bytes.isNotEmpty) { driverName_253 = bytes[253]; } if (bytes.isNotEmpty) { driverName_254 = bytes[254]; } if (bytes.isNotEmpty) { driverName_255 = bytes[255]; }
  }
  @Uint8() int driverInfo_0; @Uint8() int driverInfo_1; @Uint8() int driverInfo_2; @Uint8() int driverInfo_3; @Uint8() int driverInfo_4; @Uint8() int driverInfo_5; @Uint8() int driverInfo_6; @Uint8() int driverInfo_7; @Uint8() int driverInfo_8; @Uint8() int driverInfo_9; @Uint8() int driverInfo_10; @Uint8() int driverInfo_11; @Uint8() int driverInfo_12; @Uint8() int driverInfo_13; @Uint8() int driverInfo_14; @Uint8() int driverInfo_15; @Uint8() int driverInfo_16; @Uint8() int driverInfo_17; @Uint8() int driverInfo_18; @Uint8() int driverInfo_19; @Uint8() int driverInfo_20; @Uint8() int driverInfo_21; @Uint8() int driverInfo_22; @Uint8() int driverInfo_23; @Uint8() int driverInfo_24; @Uint8() int driverInfo_25; @Uint8() int driverInfo_26; @Uint8() int driverInfo_27; @Uint8() int driverInfo_28; @Uint8() int driverInfo_29; @Uint8() int driverInfo_30; @Uint8() int driverInfo_31; @Uint8() int driverInfo_32; @Uint8() int driverInfo_33; @Uint8() int driverInfo_34; @Uint8() int driverInfo_35; @Uint8() int driverInfo_36; @Uint8() int driverInfo_37; @Uint8() int driverInfo_38; @Uint8() int driverInfo_39; @Uint8() int driverInfo_40; @Uint8() int driverInfo_41; @Uint8() int driverInfo_42; @Uint8() int driverInfo_43; @Uint8() int driverInfo_44; @Uint8() int driverInfo_45; @Uint8() int driverInfo_46; @Uint8() int driverInfo_47; @Uint8() int driverInfo_48; @Uint8() int driverInfo_49; @Uint8() int driverInfo_50; @Uint8() int driverInfo_51; @Uint8() int driverInfo_52; @Uint8() int driverInfo_53; @Uint8() int driverInfo_54; @Uint8() int driverInfo_55; @Uint8() int driverInfo_56; @Uint8() int driverInfo_57; @Uint8() int driverInfo_58; @Uint8() int driverInfo_59; @Uint8() int driverInfo_60; @Uint8() int driverInfo_61; @Uint8() int driverInfo_62; @Uint8() int driverInfo_63; @Uint8() int driverInfo_64; @Uint8() int driverInfo_65; @Uint8() int driverInfo_66; @Uint8() int driverInfo_67; @Uint8() int driverInfo_68; @Uint8() int driverInfo_69; @Uint8() int driverInfo_70; @Uint8() int driverInfo_71; @Uint8() int driverInfo_72; @Uint8() int driverInfo_73; @Uint8() int driverInfo_74; @Uint8() int driverInfo_75; @Uint8() int driverInfo_76; @Uint8() int driverInfo_77; @Uint8() int driverInfo_78; @Uint8() int driverInfo_79; @Uint8() int driverInfo_80; @Uint8() int driverInfo_81; @Uint8() int driverInfo_82; @Uint8() int driverInfo_83; @Uint8() int driverInfo_84; @Uint8() int driverInfo_85; @Uint8() int driverInfo_86; @Uint8() int driverInfo_87; @Uint8() int driverInfo_88; @Uint8() int driverInfo_89; @Uint8() int driverInfo_90; @Uint8() int driverInfo_91; @Uint8() int driverInfo_92; @Uint8() int driverInfo_93; @Uint8() int driverInfo_94; @Uint8() int driverInfo_95; @Uint8() int driverInfo_96; @Uint8() int driverInfo_97; @Uint8() int driverInfo_98; @Uint8() int driverInfo_99; @Uint8() int driverInfo_100; @Uint8() int driverInfo_101; @Uint8() int driverInfo_102; @Uint8() int driverInfo_103; @Uint8() int driverInfo_104; @Uint8() int driverInfo_105; @Uint8() int driverInfo_106; @Uint8() int driverInfo_107; @Uint8() int driverInfo_108; @Uint8() int driverInfo_109; @Uint8() int driverInfo_110; @Uint8() int driverInfo_111; @Uint8() int driverInfo_112; @Uint8() int driverInfo_113; @Uint8() int driverInfo_114; @Uint8() int driverInfo_115; @Uint8() int driverInfo_116; @Uint8() int driverInfo_117; @Uint8() int driverInfo_118; @Uint8() int driverInfo_119; @Uint8() int driverInfo_120; @Uint8() int driverInfo_121; @Uint8() int driverInfo_122; @Uint8() int driverInfo_123; @Uint8() int driverInfo_124; @Uint8() int driverInfo_125; @Uint8() int driverInfo_126; @Uint8() int driverInfo_127; @Uint8() int driverInfo_128; @Uint8() int driverInfo_129; @Uint8() int driverInfo_130; @Uint8() int driverInfo_131; @Uint8() int driverInfo_132; @Uint8() int driverInfo_133; @Uint8() int driverInfo_134; @Uint8() int driverInfo_135; @Uint8() int driverInfo_136; @Uint8() int driverInfo_137; @Uint8() int driverInfo_138; @Uint8() int driverInfo_139; @Uint8() int driverInfo_140; @Uint8() int driverInfo_141; @Uint8() int driverInfo_142; @Uint8() int driverInfo_143; @Uint8() int driverInfo_144; @Uint8() int driverInfo_145; @Uint8() int driverInfo_146; @Uint8() int driverInfo_147; @Uint8() int driverInfo_148; @Uint8() int driverInfo_149; @Uint8() int driverInfo_150; @Uint8() int driverInfo_151; @Uint8() int driverInfo_152; @Uint8() int driverInfo_153; @Uint8() int driverInfo_154; @Uint8() int driverInfo_155; @Uint8() int driverInfo_156; @Uint8() int driverInfo_157; @Uint8() int driverInfo_158; @Uint8() int driverInfo_159; @Uint8() int driverInfo_160; @Uint8() int driverInfo_161; @Uint8() int driverInfo_162; @Uint8() int driverInfo_163; @Uint8() int driverInfo_164; @Uint8() int driverInfo_165; @Uint8() int driverInfo_166; @Uint8() int driverInfo_167; @Uint8() int driverInfo_168; @Uint8() int driverInfo_169; @Uint8() int driverInfo_170; @Uint8() int driverInfo_171; @Uint8() int driverInfo_172; @Uint8() int driverInfo_173; @Uint8() int driverInfo_174; @Uint8() int driverInfo_175; @Uint8() int driverInfo_176; @Uint8() int driverInfo_177; @Uint8() int driverInfo_178; @Uint8() int driverInfo_179; @Uint8() int driverInfo_180; @Uint8() int driverInfo_181; @Uint8() int driverInfo_182; @Uint8() int driverInfo_183; @Uint8() int driverInfo_184; @Uint8() int driverInfo_185; @Uint8() int driverInfo_186; @Uint8() int driverInfo_187; @Uint8() int driverInfo_188; @Uint8() int driverInfo_189; @Uint8() int driverInfo_190; @Uint8() int driverInfo_191; @Uint8() int driverInfo_192; @Uint8() int driverInfo_193; @Uint8() int driverInfo_194; @Uint8() int driverInfo_195; @Uint8() int driverInfo_196; @Uint8() int driverInfo_197; @Uint8() int driverInfo_198; @Uint8() int driverInfo_199; @Uint8() int driverInfo_200; @Uint8() int driverInfo_201; @Uint8() int driverInfo_202; @Uint8() int driverInfo_203; @Uint8() int driverInfo_204; @Uint8() int driverInfo_205; @Uint8() int driverInfo_206; @Uint8() int driverInfo_207; @Uint8() int driverInfo_208; @Uint8() int driverInfo_209; @Uint8() int driverInfo_210; @Uint8() int driverInfo_211; @Uint8() int driverInfo_212; @Uint8() int driverInfo_213; @Uint8() int driverInfo_214; @Uint8() int driverInfo_215; @Uint8() int driverInfo_216; @Uint8() int driverInfo_217; @Uint8() int driverInfo_218; @Uint8() int driverInfo_219; @Uint8() int driverInfo_220; @Uint8() int driverInfo_221; @Uint8() int driverInfo_222; @Uint8() int driverInfo_223; @Uint8() int driverInfo_224; @Uint8() int driverInfo_225; @Uint8() int driverInfo_226; @Uint8() int driverInfo_227; @Uint8() int driverInfo_228; @Uint8() int driverInfo_229; @Uint8() int driverInfo_230; @Uint8() int driverInfo_231; @Uint8() int driverInfo_232; @Uint8() int driverInfo_233; @Uint8() int driverInfo_234; @Uint8() int driverInfo_235; @Uint8() int driverInfo_236; @Uint8() int driverInfo_237; @Uint8() int driverInfo_238; @Uint8() int driverInfo_239; @Uint8() int driverInfo_240; @Uint8() int driverInfo_241; @Uint8() int driverInfo_242; @Uint8() int driverInfo_243; @Uint8() int driverInfo_244; @Uint8() int driverInfo_245; @Uint8() int driverInfo_246; @Uint8() int driverInfo_247; @Uint8() int driverInfo_248; @Uint8() int driverInfo_249; @Uint8() int driverInfo_250; @Uint8() int driverInfo_251; @Uint8() int driverInfo_252; @Uint8() int driverInfo_253; @Uint8() int driverInfo_254; @Uint8() int driverInfo_255;
  String get driverInfo {
    var bytes = [driverInfo_0, driverInfo_1, driverInfo_2, driverInfo_3, driverInfo_4, driverInfo_5, driverInfo_6, driverInfo_7, driverInfo_8, driverInfo_9, driverInfo_10, driverInfo_11, driverInfo_12, driverInfo_13, driverInfo_14, driverInfo_15, driverInfo_16, driverInfo_17, driverInfo_18, driverInfo_19, driverInfo_20, driverInfo_21, driverInfo_22, driverInfo_23, driverInfo_24, driverInfo_25, driverInfo_26, driverInfo_27, driverInfo_28, driverInfo_29, driverInfo_30, driverInfo_31, driverInfo_32, driverInfo_33, driverInfo_34, driverInfo_35, driverInfo_36, driverInfo_37, driverInfo_38, driverInfo_39, driverInfo_40, driverInfo_41, driverInfo_42, driverInfo_43, driverInfo_44, driverInfo_45, driverInfo_46, driverInfo_47, driverInfo_48, driverInfo_49, driverInfo_50, driverInfo_51, driverInfo_52, driverInfo_53, driverInfo_54, driverInfo_55, driverInfo_56, driverInfo_57, driverInfo_58, driverInfo_59, driverInfo_60, driverInfo_61, driverInfo_62, driverInfo_63, driverInfo_64, driverInfo_65, driverInfo_66, driverInfo_67, driverInfo_68, driverInfo_69, driverInfo_70, driverInfo_71, driverInfo_72, driverInfo_73, driverInfo_74, driverInfo_75, driverInfo_76, driverInfo_77, driverInfo_78, driverInfo_79, driverInfo_80, driverInfo_81, driverInfo_82, driverInfo_83, driverInfo_84, driverInfo_85, driverInfo_86, driverInfo_87, driverInfo_88, driverInfo_89, driverInfo_90, driverInfo_91, driverInfo_92, driverInfo_93, driverInfo_94, driverInfo_95, driverInfo_96, driverInfo_97, driverInfo_98, driverInfo_99, driverInfo_100, driverInfo_101, driverInfo_102, driverInfo_103, driverInfo_104, driverInfo_105, driverInfo_106, driverInfo_107, driverInfo_108, driverInfo_109, driverInfo_110, driverInfo_111, driverInfo_112, driverInfo_113, driverInfo_114, driverInfo_115, driverInfo_116, driverInfo_117, driverInfo_118, driverInfo_119, driverInfo_120, driverInfo_121, driverInfo_122, driverInfo_123, driverInfo_124, driverInfo_125, driverInfo_126, driverInfo_127, driverInfo_128, driverInfo_129, driverInfo_130, driverInfo_131, driverInfo_132, driverInfo_133, driverInfo_134, driverInfo_135, driverInfo_136, driverInfo_137, driverInfo_138, driverInfo_139, driverInfo_140, driverInfo_141, driverInfo_142, driverInfo_143, driverInfo_144, driverInfo_145, driverInfo_146, driverInfo_147, driverInfo_148, driverInfo_149, driverInfo_150, driverInfo_151, driverInfo_152, driverInfo_153, driverInfo_154, driverInfo_155, driverInfo_156, driverInfo_157, driverInfo_158, driverInfo_159, driverInfo_160, driverInfo_161, driverInfo_162, driverInfo_163, driverInfo_164, driverInfo_165, driverInfo_166, driverInfo_167, driverInfo_168, driverInfo_169, driverInfo_170, driverInfo_171, driverInfo_172, driverInfo_173, driverInfo_174, driverInfo_175, driverInfo_176, driverInfo_177, driverInfo_178, driverInfo_179, driverInfo_180, driverInfo_181, driverInfo_182, driverInfo_183, driverInfo_184, driverInfo_185, driverInfo_186, driverInfo_187, driverInfo_188, driverInfo_189, driverInfo_190, driverInfo_191, driverInfo_192, driverInfo_193, driverInfo_194, driverInfo_195, driverInfo_196, driverInfo_197, driverInfo_198, driverInfo_199, driverInfo_200, driverInfo_201, driverInfo_202, driverInfo_203, driverInfo_204, driverInfo_205, driverInfo_206, driverInfo_207, driverInfo_208, driverInfo_209, driverInfo_210, driverInfo_211, driverInfo_212, driverInfo_213, driverInfo_214, driverInfo_215, driverInfo_216, driverInfo_217, driverInfo_218, driverInfo_219, driverInfo_220, driverInfo_221, driverInfo_222, driverInfo_223, driverInfo_224, driverInfo_225, driverInfo_226, driverInfo_227, driverInfo_228, driverInfo_229, driverInfo_230, driverInfo_231, driverInfo_232, driverInfo_233, driverInfo_234, driverInfo_235, driverInfo_236, driverInfo_237, driverInfo_238, driverInfo_239, driverInfo_240, driverInfo_241, driverInfo_242, driverInfo_243, driverInfo_244, driverInfo_245, driverInfo_246, driverInfo_247, driverInfo_248, driverInfo_249, driverInfo_250, driverInfo_251, driverInfo_252, driverInfo_253, driverInfo_254, driverInfo_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set driverInfo(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { driverInfo_0 = bytes[0]; } if (bytes.isNotEmpty) { driverInfo_1 = bytes[1]; } if (bytes.isNotEmpty) { driverInfo_2 = bytes[2]; } if (bytes.isNotEmpty) { driverInfo_3 = bytes[3]; } if (bytes.isNotEmpty) { driverInfo_4 = bytes[4]; } if (bytes.isNotEmpty) { driverInfo_5 = bytes[5]; } if (bytes.isNotEmpty) { driverInfo_6 = bytes[6]; } if (bytes.isNotEmpty) { driverInfo_7 = bytes[7]; } if (bytes.isNotEmpty) { driverInfo_8 = bytes[8]; } if (bytes.isNotEmpty) { driverInfo_9 = bytes[9]; } if (bytes.isNotEmpty) { driverInfo_10 = bytes[10]; } if (bytes.isNotEmpty) { driverInfo_11 = bytes[11]; } if (bytes.isNotEmpty) { driverInfo_12 = bytes[12]; } if (bytes.isNotEmpty) { driverInfo_13 = bytes[13]; } if (bytes.isNotEmpty) { driverInfo_14 = bytes[14]; } if (bytes.isNotEmpty) { driverInfo_15 = bytes[15]; } if (bytes.isNotEmpty) { driverInfo_16 = bytes[16]; } if (bytes.isNotEmpty) { driverInfo_17 = bytes[17]; } if (bytes.isNotEmpty) { driverInfo_18 = bytes[18]; } if (bytes.isNotEmpty) { driverInfo_19 = bytes[19]; } if (bytes.isNotEmpty) { driverInfo_20 = bytes[20]; } if (bytes.isNotEmpty) { driverInfo_21 = bytes[21]; } if (bytes.isNotEmpty) { driverInfo_22 = bytes[22]; } if (bytes.isNotEmpty) { driverInfo_23 = bytes[23]; } if (bytes.isNotEmpty) { driverInfo_24 = bytes[24]; } if (bytes.isNotEmpty) { driverInfo_25 = bytes[25]; } if (bytes.isNotEmpty) { driverInfo_26 = bytes[26]; } if (bytes.isNotEmpty) { driverInfo_27 = bytes[27]; } if (bytes.isNotEmpty) { driverInfo_28 = bytes[28]; } if (bytes.isNotEmpty) { driverInfo_29 = bytes[29]; } if (bytes.isNotEmpty) { driverInfo_30 = bytes[30]; } if (bytes.isNotEmpty) { driverInfo_31 = bytes[31]; } if (bytes.isNotEmpty) { driverInfo_32 = bytes[32]; } if (bytes.isNotEmpty) { driverInfo_33 = bytes[33]; } if (bytes.isNotEmpty) { driverInfo_34 = bytes[34]; } if (bytes.isNotEmpty) { driverInfo_35 = bytes[35]; } if (bytes.isNotEmpty) { driverInfo_36 = bytes[36]; } if (bytes.isNotEmpty) { driverInfo_37 = bytes[37]; } if (bytes.isNotEmpty) { driverInfo_38 = bytes[38]; } if (bytes.isNotEmpty) { driverInfo_39 = bytes[39]; } if (bytes.isNotEmpty) { driverInfo_40 = bytes[40]; } if (bytes.isNotEmpty) { driverInfo_41 = bytes[41]; } if (bytes.isNotEmpty) { driverInfo_42 = bytes[42]; } if (bytes.isNotEmpty) { driverInfo_43 = bytes[43]; } if (bytes.isNotEmpty) { driverInfo_44 = bytes[44]; } if (bytes.isNotEmpty) { driverInfo_45 = bytes[45]; } if (bytes.isNotEmpty) { driverInfo_46 = bytes[46]; } if (bytes.isNotEmpty) { driverInfo_47 = bytes[47]; } if (bytes.isNotEmpty) { driverInfo_48 = bytes[48]; } if (bytes.isNotEmpty) { driverInfo_49 = bytes[49]; } if (bytes.isNotEmpty) { driverInfo_50 = bytes[50]; } if (bytes.isNotEmpty) { driverInfo_51 = bytes[51]; } if (bytes.isNotEmpty) { driverInfo_52 = bytes[52]; } if (bytes.isNotEmpty) { driverInfo_53 = bytes[53]; } if (bytes.isNotEmpty) { driverInfo_54 = bytes[54]; } if (bytes.isNotEmpty) { driverInfo_55 = bytes[55]; } if (bytes.isNotEmpty) { driverInfo_56 = bytes[56]; } if (bytes.isNotEmpty) { driverInfo_57 = bytes[57]; } if (bytes.isNotEmpty) { driverInfo_58 = bytes[58]; } if (bytes.isNotEmpty) { driverInfo_59 = bytes[59]; } if (bytes.isNotEmpty) { driverInfo_60 = bytes[60]; } if (bytes.isNotEmpty) { driverInfo_61 = bytes[61]; } if (bytes.isNotEmpty) { driverInfo_62 = bytes[62]; } if (bytes.isNotEmpty) { driverInfo_63 = bytes[63]; } if (bytes.isNotEmpty) { driverInfo_64 = bytes[64]; } if (bytes.isNotEmpty) { driverInfo_65 = bytes[65]; } if (bytes.isNotEmpty) { driverInfo_66 = bytes[66]; } if (bytes.isNotEmpty) { driverInfo_67 = bytes[67]; } if (bytes.isNotEmpty) { driverInfo_68 = bytes[68]; } if (bytes.isNotEmpty) { driverInfo_69 = bytes[69]; } if (bytes.isNotEmpty) { driverInfo_70 = bytes[70]; } if (bytes.isNotEmpty) { driverInfo_71 = bytes[71]; } if (bytes.isNotEmpty) { driverInfo_72 = bytes[72]; } if (bytes.isNotEmpty) { driverInfo_73 = bytes[73]; } if (bytes.isNotEmpty) { driverInfo_74 = bytes[74]; } if (bytes.isNotEmpty) { driverInfo_75 = bytes[75]; } if (bytes.isNotEmpty) { driverInfo_76 = bytes[76]; } if (bytes.isNotEmpty) { driverInfo_77 = bytes[77]; } if (bytes.isNotEmpty) { driverInfo_78 = bytes[78]; } if (bytes.isNotEmpty) { driverInfo_79 = bytes[79]; } if (bytes.isNotEmpty) { driverInfo_80 = bytes[80]; } if (bytes.isNotEmpty) { driverInfo_81 = bytes[81]; } if (bytes.isNotEmpty) { driverInfo_82 = bytes[82]; } if (bytes.isNotEmpty) { driverInfo_83 = bytes[83]; } if (bytes.isNotEmpty) { driverInfo_84 = bytes[84]; } if (bytes.isNotEmpty) { driverInfo_85 = bytes[85]; } if (bytes.isNotEmpty) { driverInfo_86 = bytes[86]; } if (bytes.isNotEmpty) { driverInfo_87 = bytes[87]; } if (bytes.isNotEmpty) { driverInfo_88 = bytes[88]; } if (bytes.isNotEmpty) { driverInfo_89 = bytes[89]; } if (bytes.isNotEmpty) { driverInfo_90 = bytes[90]; } if (bytes.isNotEmpty) { driverInfo_91 = bytes[91]; } if (bytes.isNotEmpty) { driverInfo_92 = bytes[92]; } if (bytes.isNotEmpty) { driverInfo_93 = bytes[93]; } if (bytes.isNotEmpty) { driverInfo_94 = bytes[94]; } if (bytes.isNotEmpty) { driverInfo_95 = bytes[95]; } if (bytes.isNotEmpty) { driverInfo_96 = bytes[96]; } if (bytes.isNotEmpty) { driverInfo_97 = bytes[97]; } if (bytes.isNotEmpty) { driverInfo_98 = bytes[98]; } if (bytes.isNotEmpty) { driverInfo_99 = bytes[99]; } if (bytes.isNotEmpty) { driverInfo_100 = bytes[100]; } if (bytes.isNotEmpty) { driverInfo_101 = bytes[101]; } if (bytes.isNotEmpty) { driverInfo_102 = bytes[102]; } if (bytes.isNotEmpty) { driverInfo_103 = bytes[103]; } if (bytes.isNotEmpty) { driverInfo_104 = bytes[104]; } if (bytes.isNotEmpty) { driverInfo_105 = bytes[105]; } if (bytes.isNotEmpty) { driverInfo_106 = bytes[106]; } if (bytes.isNotEmpty) { driverInfo_107 = bytes[107]; } if (bytes.isNotEmpty) { driverInfo_108 = bytes[108]; } if (bytes.isNotEmpty) { driverInfo_109 = bytes[109]; } if (bytes.isNotEmpty) { driverInfo_110 = bytes[110]; } if (bytes.isNotEmpty) { driverInfo_111 = bytes[111]; } if (bytes.isNotEmpty) { driverInfo_112 = bytes[112]; } if (bytes.isNotEmpty) { driverInfo_113 = bytes[113]; } if (bytes.isNotEmpty) { driverInfo_114 = bytes[114]; } if (bytes.isNotEmpty) { driverInfo_115 = bytes[115]; } if (bytes.isNotEmpty) { driverInfo_116 = bytes[116]; } if (bytes.isNotEmpty) { driverInfo_117 = bytes[117]; } if (bytes.isNotEmpty) { driverInfo_118 = bytes[118]; } if (bytes.isNotEmpty) { driverInfo_119 = bytes[119]; } if (bytes.isNotEmpty) { driverInfo_120 = bytes[120]; } if (bytes.isNotEmpty) { driverInfo_121 = bytes[121]; } if (bytes.isNotEmpty) { driverInfo_122 = bytes[122]; } if (bytes.isNotEmpty) { driverInfo_123 = bytes[123]; } if (bytes.isNotEmpty) { driverInfo_124 = bytes[124]; } if (bytes.isNotEmpty) { driverInfo_125 = bytes[125]; } if (bytes.isNotEmpty) { driverInfo_126 = bytes[126]; } if (bytes.isNotEmpty) { driverInfo_127 = bytes[127]; } if (bytes.isNotEmpty) { driverInfo_128 = bytes[128]; } if (bytes.isNotEmpty) { driverInfo_129 = bytes[129]; } if (bytes.isNotEmpty) { driverInfo_130 = bytes[130]; } if (bytes.isNotEmpty) { driverInfo_131 = bytes[131]; } if (bytes.isNotEmpty) { driverInfo_132 = bytes[132]; } if (bytes.isNotEmpty) { driverInfo_133 = bytes[133]; } if (bytes.isNotEmpty) { driverInfo_134 = bytes[134]; } if (bytes.isNotEmpty) { driverInfo_135 = bytes[135]; } if (bytes.isNotEmpty) { driverInfo_136 = bytes[136]; } if (bytes.isNotEmpty) { driverInfo_137 = bytes[137]; } if (bytes.isNotEmpty) { driverInfo_138 = bytes[138]; } if (bytes.isNotEmpty) { driverInfo_139 = bytes[139]; } if (bytes.isNotEmpty) { driverInfo_140 = bytes[140]; } if (bytes.isNotEmpty) { driverInfo_141 = bytes[141]; } if (bytes.isNotEmpty) { driverInfo_142 = bytes[142]; } if (bytes.isNotEmpty) { driverInfo_143 = bytes[143]; } if (bytes.isNotEmpty) { driverInfo_144 = bytes[144]; } if (bytes.isNotEmpty) { driverInfo_145 = bytes[145]; } if (bytes.isNotEmpty) { driverInfo_146 = bytes[146]; } if (bytes.isNotEmpty) { driverInfo_147 = bytes[147]; } if (bytes.isNotEmpty) { driverInfo_148 = bytes[148]; } if (bytes.isNotEmpty) { driverInfo_149 = bytes[149]; } if (bytes.isNotEmpty) { driverInfo_150 = bytes[150]; } if (bytes.isNotEmpty) { driverInfo_151 = bytes[151]; } if (bytes.isNotEmpty) { driverInfo_152 = bytes[152]; } if (bytes.isNotEmpty) { driverInfo_153 = bytes[153]; } if (bytes.isNotEmpty) { driverInfo_154 = bytes[154]; } if (bytes.isNotEmpty) { driverInfo_155 = bytes[155]; } if (bytes.isNotEmpty) { driverInfo_156 = bytes[156]; } if (bytes.isNotEmpty) { driverInfo_157 = bytes[157]; } if (bytes.isNotEmpty) { driverInfo_158 = bytes[158]; } if (bytes.isNotEmpty) { driverInfo_159 = bytes[159]; } if (bytes.isNotEmpty) { driverInfo_160 = bytes[160]; } if (bytes.isNotEmpty) { driverInfo_161 = bytes[161]; } if (bytes.isNotEmpty) { driverInfo_162 = bytes[162]; } if (bytes.isNotEmpty) { driverInfo_163 = bytes[163]; } if (bytes.isNotEmpty) { driverInfo_164 = bytes[164]; } if (bytes.isNotEmpty) { driverInfo_165 = bytes[165]; } if (bytes.isNotEmpty) { driverInfo_166 = bytes[166]; } if (bytes.isNotEmpty) { driverInfo_167 = bytes[167]; } if (bytes.isNotEmpty) { driverInfo_168 = bytes[168]; } if (bytes.isNotEmpty) { driverInfo_169 = bytes[169]; } if (bytes.isNotEmpty) { driverInfo_170 = bytes[170]; } if (bytes.isNotEmpty) { driverInfo_171 = bytes[171]; } if (bytes.isNotEmpty) { driverInfo_172 = bytes[172]; } if (bytes.isNotEmpty) { driverInfo_173 = bytes[173]; } if (bytes.isNotEmpty) { driverInfo_174 = bytes[174]; } if (bytes.isNotEmpty) { driverInfo_175 = bytes[175]; } if (bytes.isNotEmpty) { driverInfo_176 = bytes[176]; } if (bytes.isNotEmpty) { driverInfo_177 = bytes[177]; } if (bytes.isNotEmpty) { driverInfo_178 = bytes[178]; } if (bytes.isNotEmpty) { driverInfo_179 = bytes[179]; } if (bytes.isNotEmpty) { driverInfo_180 = bytes[180]; } if (bytes.isNotEmpty) { driverInfo_181 = bytes[181]; } if (bytes.isNotEmpty) { driverInfo_182 = bytes[182]; } if (bytes.isNotEmpty) { driverInfo_183 = bytes[183]; } if (bytes.isNotEmpty) { driverInfo_184 = bytes[184]; } if (bytes.isNotEmpty) { driverInfo_185 = bytes[185]; } if (bytes.isNotEmpty) { driverInfo_186 = bytes[186]; } if (bytes.isNotEmpty) { driverInfo_187 = bytes[187]; } if (bytes.isNotEmpty) { driverInfo_188 = bytes[188]; } if (bytes.isNotEmpty) { driverInfo_189 = bytes[189]; } if (bytes.isNotEmpty) { driverInfo_190 = bytes[190]; } if (bytes.isNotEmpty) { driverInfo_191 = bytes[191]; } if (bytes.isNotEmpty) { driverInfo_192 = bytes[192]; } if (bytes.isNotEmpty) { driverInfo_193 = bytes[193]; } if (bytes.isNotEmpty) { driverInfo_194 = bytes[194]; } if (bytes.isNotEmpty) { driverInfo_195 = bytes[195]; } if (bytes.isNotEmpty) { driverInfo_196 = bytes[196]; } if (bytes.isNotEmpty) { driverInfo_197 = bytes[197]; } if (bytes.isNotEmpty) { driverInfo_198 = bytes[198]; } if (bytes.isNotEmpty) { driverInfo_199 = bytes[199]; } if (bytes.isNotEmpty) { driverInfo_200 = bytes[200]; } if (bytes.isNotEmpty) { driverInfo_201 = bytes[201]; } if (bytes.isNotEmpty) { driverInfo_202 = bytes[202]; } if (bytes.isNotEmpty) { driverInfo_203 = bytes[203]; } if (bytes.isNotEmpty) { driverInfo_204 = bytes[204]; } if (bytes.isNotEmpty) { driverInfo_205 = bytes[205]; } if (bytes.isNotEmpty) { driverInfo_206 = bytes[206]; } if (bytes.isNotEmpty) { driverInfo_207 = bytes[207]; } if (bytes.isNotEmpty) { driverInfo_208 = bytes[208]; } if (bytes.isNotEmpty) { driverInfo_209 = bytes[209]; } if (bytes.isNotEmpty) { driverInfo_210 = bytes[210]; } if (bytes.isNotEmpty) { driverInfo_211 = bytes[211]; } if (bytes.isNotEmpty) { driverInfo_212 = bytes[212]; } if (bytes.isNotEmpty) { driverInfo_213 = bytes[213]; } if (bytes.isNotEmpty) { driverInfo_214 = bytes[214]; } if (bytes.isNotEmpty) { driverInfo_215 = bytes[215]; } if (bytes.isNotEmpty) { driverInfo_216 = bytes[216]; } if (bytes.isNotEmpty) { driverInfo_217 = bytes[217]; } if (bytes.isNotEmpty) { driverInfo_218 = bytes[218]; } if (bytes.isNotEmpty) { driverInfo_219 = bytes[219]; } if (bytes.isNotEmpty) { driverInfo_220 = bytes[220]; } if (bytes.isNotEmpty) { driverInfo_221 = bytes[221]; } if (bytes.isNotEmpty) { driverInfo_222 = bytes[222]; } if (bytes.isNotEmpty) { driverInfo_223 = bytes[223]; } if (bytes.isNotEmpty) { driverInfo_224 = bytes[224]; } if (bytes.isNotEmpty) { driverInfo_225 = bytes[225]; } if (bytes.isNotEmpty) { driverInfo_226 = bytes[226]; } if (bytes.isNotEmpty) { driverInfo_227 = bytes[227]; } if (bytes.isNotEmpty) { driverInfo_228 = bytes[228]; } if (bytes.isNotEmpty) { driverInfo_229 = bytes[229]; } if (bytes.isNotEmpty) { driverInfo_230 = bytes[230]; } if (bytes.isNotEmpty) { driverInfo_231 = bytes[231]; } if (bytes.isNotEmpty) { driverInfo_232 = bytes[232]; } if (bytes.isNotEmpty) { driverInfo_233 = bytes[233]; } if (bytes.isNotEmpty) { driverInfo_234 = bytes[234]; } if (bytes.isNotEmpty) { driverInfo_235 = bytes[235]; } if (bytes.isNotEmpty) { driverInfo_236 = bytes[236]; } if (bytes.isNotEmpty) { driverInfo_237 = bytes[237]; } if (bytes.isNotEmpty) { driverInfo_238 = bytes[238]; } if (bytes.isNotEmpty) { driverInfo_239 = bytes[239]; } if (bytes.isNotEmpty) { driverInfo_240 = bytes[240]; } if (bytes.isNotEmpty) { driverInfo_241 = bytes[241]; } if (bytes.isNotEmpty) { driverInfo_242 = bytes[242]; } if (bytes.isNotEmpty) { driverInfo_243 = bytes[243]; } if (bytes.isNotEmpty) { driverInfo_244 = bytes[244]; } if (bytes.isNotEmpty) { driverInfo_245 = bytes[245]; } if (bytes.isNotEmpty) { driverInfo_246 = bytes[246]; } if (bytes.isNotEmpty) { driverInfo_247 = bytes[247]; } if (bytes.isNotEmpty) { driverInfo_248 = bytes[248]; } if (bytes.isNotEmpty) { driverInfo_249 = bytes[249]; } if (bytes.isNotEmpty) { driverInfo_250 = bytes[250]; } if (bytes.isNotEmpty) { driverInfo_251 = bytes[251]; } if (bytes.isNotEmpty) { driverInfo_252 = bytes[252]; } if (bytes.isNotEmpty) { driverInfo_253 = bytes[253]; } if (bytes.isNotEmpty) { driverInfo_254 = bytes[254]; } if (bytes.isNotEmpty) { driverInfo_255 = bytes[255]; }
  }
  @Uint8() int conformanceVersion_major;
  @Uint8() int conformanceVersion_minor;
  @Uint8() int conformanceVersion_subminor;
  @Uint8() int conformanceVersion_patch;
  @Int32() int denormBehaviorIndependence;
  @Int32() int roundingModeIndependence;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat16;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat32;
  @Uint32() int shaderSignedZeroInfNanPreserveFloat64;
  @Uint32() int shaderDenormPreserveFloat16;
  @Uint32() int shaderDenormPreserveFloat32;
  @Uint32() int shaderDenormPreserveFloat64;
  @Uint32() int shaderDenormFlushToZeroFloat16;
  @Uint32() int shaderDenormFlushToZeroFloat32;
  @Uint32() int shaderDenormFlushToZeroFloat64;
  @Uint32() int shaderRoundingModeRTEFloat16;
  @Uint32() int shaderRoundingModeRTEFloat32;
  @Uint32() int shaderRoundingModeRTEFloat64;
  @Uint32() int shaderRoundingModeRTZFloat16;
  @Uint32() int shaderRoundingModeRTZFloat32;
  @Uint32() int shaderRoundingModeRTZFloat64;
  @Uint32() int maxUpdateAfterBindDescriptorsInAllPools;
  @Uint32() int shaderUniformBufferArrayNonUniformIndexingNative;
  @Uint32() int shaderSampledImageArrayNonUniformIndexingNative;
  @Uint32() int shaderStorageBufferArrayNonUniformIndexingNative;
  @Uint32() int shaderStorageImageArrayNonUniformIndexingNative;
  @Uint32() int shaderInputAttachmentArrayNonUniformIndexingNative;
  @Uint32() int robustBufferAccessUpdateAfterBind;
  @Uint32() int quadDivergentImplicitLod;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindSamplers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindUniformBuffers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindStorageBuffers;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindSampledImages;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindStorageImages;
  @Uint32() int maxPerStageDescriptorUpdateAfterBindInputAttachments;
  @Uint32() int maxPerStageUpdateAfterBindResources;
  @Uint32() int maxDescriptorSetUpdateAfterBindSamplers;
  @Uint32() int maxDescriptorSetUpdateAfterBindUniformBuffers;
  @Uint32() int maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageBuffers;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
  @Uint32() int maxDescriptorSetUpdateAfterBindSampledImages;
  @Uint32() int maxDescriptorSetUpdateAfterBindStorageImages;
  @Uint32() int maxDescriptorSetUpdateAfterBindInputAttachments;
  @Uint32() int supportedDepthResolveModes;
  @Uint32() int supportedStencilResolveModes;
  @Uint32() int independentResolveNone;
  @Uint32() int independentResolve;
  @Uint32() int filterMinmaxSingleComponentFormats;
  @Uint32() int filterMinmaxImageComponentMapping;
  @Uint64() int maxTimelineSemaphoreValueDifference;
  @Uint32() int framebufferIntegerColorSampleCounts;
}

class VkPipelineCompilerControlCreateInfoAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int compilerControlFlags;
}

class VkPhysicalDeviceCoherentMemoryFeaturesAMD extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int deviceCoherentMemory;
}

class VkPhysicalDeviceToolPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint8() int name_0; @Uint8() int name_1; @Uint8() int name_2; @Uint8() int name_3; @Uint8() int name_4; @Uint8() int name_5; @Uint8() int name_6; @Uint8() int name_7; @Uint8() int name_8; @Uint8() int name_9; @Uint8() int name_10; @Uint8() int name_11; @Uint8() int name_12; @Uint8() int name_13; @Uint8() int name_14; @Uint8() int name_15; @Uint8() int name_16; @Uint8() int name_17; @Uint8() int name_18; @Uint8() int name_19; @Uint8() int name_20; @Uint8() int name_21; @Uint8() int name_22; @Uint8() int name_23; @Uint8() int name_24; @Uint8() int name_25; @Uint8() int name_26; @Uint8() int name_27; @Uint8() int name_28; @Uint8() int name_29; @Uint8() int name_30; @Uint8() int name_31; @Uint8() int name_32; @Uint8() int name_33; @Uint8() int name_34; @Uint8() int name_35; @Uint8() int name_36; @Uint8() int name_37; @Uint8() int name_38; @Uint8() int name_39; @Uint8() int name_40; @Uint8() int name_41; @Uint8() int name_42; @Uint8() int name_43; @Uint8() int name_44; @Uint8() int name_45; @Uint8() int name_46; @Uint8() int name_47; @Uint8() int name_48; @Uint8() int name_49; @Uint8() int name_50; @Uint8() int name_51; @Uint8() int name_52; @Uint8() int name_53; @Uint8() int name_54; @Uint8() int name_55; @Uint8() int name_56; @Uint8() int name_57; @Uint8() int name_58; @Uint8() int name_59; @Uint8() int name_60; @Uint8() int name_61; @Uint8() int name_62; @Uint8() int name_63; @Uint8() int name_64; @Uint8() int name_65; @Uint8() int name_66; @Uint8() int name_67; @Uint8() int name_68; @Uint8() int name_69; @Uint8() int name_70; @Uint8() int name_71; @Uint8() int name_72; @Uint8() int name_73; @Uint8() int name_74; @Uint8() int name_75; @Uint8() int name_76; @Uint8() int name_77; @Uint8() int name_78; @Uint8() int name_79; @Uint8() int name_80; @Uint8() int name_81; @Uint8() int name_82; @Uint8() int name_83; @Uint8() int name_84; @Uint8() int name_85; @Uint8() int name_86; @Uint8() int name_87; @Uint8() int name_88; @Uint8() int name_89; @Uint8() int name_90; @Uint8() int name_91; @Uint8() int name_92; @Uint8() int name_93; @Uint8() int name_94; @Uint8() int name_95; @Uint8() int name_96; @Uint8() int name_97; @Uint8() int name_98; @Uint8() int name_99; @Uint8() int name_100; @Uint8() int name_101; @Uint8() int name_102; @Uint8() int name_103; @Uint8() int name_104; @Uint8() int name_105; @Uint8() int name_106; @Uint8() int name_107; @Uint8() int name_108; @Uint8() int name_109; @Uint8() int name_110; @Uint8() int name_111; @Uint8() int name_112; @Uint8() int name_113; @Uint8() int name_114; @Uint8() int name_115; @Uint8() int name_116; @Uint8() int name_117; @Uint8() int name_118; @Uint8() int name_119; @Uint8() int name_120; @Uint8() int name_121; @Uint8() int name_122; @Uint8() int name_123; @Uint8() int name_124; @Uint8() int name_125; @Uint8() int name_126; @Uint8() int name_127; @Uint8() int name_128; @Uint8() int name_129; @Uint8() int name_130; @Uint8() int name_131; @Uint8() int name_132; @Uint8() int name_133; @Uint8() int name_134; @Uint8() int name_135; @Uint8() int name_136; @Uint8() int name_137; @Uint8() int name_138; @Uint8() int name_139; @Uint8() int name_140; @Uint8() int name_141; @Uint8() int name_142; @Uint8() int name_143; @Uint8() int name_144; @Uint8() int name_145; @Uint8() int name_146; @Uint8() int name_147; @Uint8() int name_148; @Uint8() int name_149; @Uint8() int name_150; @Uint8() int name_151; @Uint8() int name_152; @Uint8() int name_153; @Uint8() int name_154; @Uint8() int name_155; @Uint8() int name_156; @Uint8() int name_157; @Uint8() int name_158; @Uint8() int name_159; @Uint8() int name_160; @Uint8() int name_161; @Uint8() int name_162; @Uint8() int name_163; @Uint8() int name_164; @Uint8() int name_165; @Uint8() int name_166; @Uint8() int name_167; @Uint8() int name_168; @Uint8() int name_169; @Uint8() int name_170; @Uint8() int name_171; @Uint8() int name_172; @Uint8() int name_173; @Uint8() int name_174; @Uint8() int name_175; @Uint8() int name_176; @Uint8() int name_177; @Uint8() int name_178; @Uint8() int name_179; @Uint8() int name_180; @Uint8() int name_181; @Uint8() int name_182; @Uint8() int name_183; @Uint8() int name_184; @Uint8() int name_185; @Uint8() int name_186; @Uint8() int name_187; @Uint8() int name_188; @Uint8() int name_189; @Uint8() int name_190; @Uint8() int name_191; @Uint8() int name_192; @Uint8() int name_193; @Uint8() int name_194; @Uint8() int name_195; @Uint8() int name_196; @Uint8() int name_197; @Uint8() int name_198; @Uint8() int name_199; @Uint8() int name_200; @Uint8() int name_201; @Uint8() int name_202; @Uint8() int name_203; @Uint8() int name_204; @Uint8() int name_205; @Uint8() int name_206; @Uint8() int name_207; @Uint8() int name_208; @Uint8() int name_209; @Uint8() int name_210; @Uint8() int name_211; @Uint8() int name_212; @Uint8() int name_213; @Uint8() int name_214; @Uint8() int name_215; @Uint8() int name_216; @Uint8() int name_217; @Uint8() int name_218; @Uint8() int name_219; @Uint8() int name_220; @Uint8() int name_221; @Uint8() int name_222; @Uint8() int name_223; @Uint8() int name_224; @Uint8() int name_225; @Uint8() int name_226; @Uint8() int name_227; @Uint8() int name_228; @Uint8() int name_229; @Uint8() int name_230; @Uint8() int name_231; @Uint8() int name_232; @Uint8() int name_233; @Uint8() int name_234; @Uint8() int name_235; @Uint8() int name_236; @Uint8() int name_237; @Uint8() int name_238; @Uint8() int name_239; @Uint8() int name_240; @Uint8() int name_241; @Uint8() int name_242; @Uint8() int name_243; @Uint8() int name_244; @Uint8() int name_245; @Uint8() int name_246; @Uint8() int name_247; @Uint8() int name_248; @Uint8() int name_249; @Uint8() int name_250; @Uint8() int name_251; @Uint8() int name_252; @Uint8() int name_253; @Uint8() int name_254; @Uint8() int name_255;
  String get name {
    var bytes = [name_0, name_1, name_2, name_3, name_4, name_5, name_6, name_7, name_8, name_9, name_10, name_11, name_12, name_13, name_14, name_15, name_16, name_17, name_18, name_19, name_20, name_21, name_22, name_23, name_24, name_25, name_26, name_27, name_28, name_29, name_30, name_31, name_32, name_33, name_34, name_35, name_36, name_37, name_38, name_39, name_40, name_41, name_42, name_43, name_44, name_45, name_46, name_47, name_48, name_49, name_50, name_51, name_52, name_53, name_54, name_55, name_56, name_57, name_58, name_59, name_60, name_61, name_62, name_63, name_64, name_65, name_66, name_67, name_68, name_69, name_70, name_71, name_72, name_73, name_74, name_75, name_76, name_77, name_78, name_79, name_80, name_81, name_82, name_83, name_84, name_85, name_86, name_87, name_88, name_89, name_90, name_91, name_92, name_93, name_94, name_95, name_96, name_97, name_98, name_99, name_100, name_101, name_102, name_103, name_104, name_105, name_106, name_107, name_108, name_109, name_110, name_111, name_112, name_113, name_114, name_115, name_116, name_117, name_118, name_119, name_120, name_121, name_122, name_123, name_124, name_125, name_126, name_127, name_128, name_129, name_130, name_131, name_132, name_133, name_134, name_135, name_136, name_137, name_138, name_139, name_140, name_141, name_142, name_143, name_144, name_145, name_146, name_147, name_148, name_149, name_150, name_151, name_152, name_153, name_154, name_155, name_156, name_157, name_158, name_159, name_160, name_161, name_162, name_163, name_164, name_165, name_166, name_167, name_168, name_169, name_170, name_171, name_172, name_173, name_174, name_175, name_176, name_177, name_178, name_179, name_180, name_181, name_182, name_183, name_184, name_185, name_186, name_187, name_188, name_189, name_190, name_191, name_192, name_193, name_194, name_195, name_196, name_197, name_198, name_199, name_200, name_201, name_202, name_203, name_204, name_205, name_206, name_207, name_208, name_209, name_210, name_211, name_212, name_213, name_214, name_215, name_216, name_217, name_218, name_219, name_220, name_221, name_222, name_223, name_224, name_225, name_226, name_227, name_228, name_229, name_230, name_231, name_232, name_233, name_234, name_235, name_236, name_237, name_238, name_239, name_240, name_241, name_242, name_243, name_244, name_245, name_246, name_247, name_248, name_249, name_250, name_251, name_252, name_253, name_254, name_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set name(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { name_0 = bytes[0]; } if (bytes.isNotEmpty) { name_1 = bytes[1]; } if (bytes.isNotEmpty) { name_2 = bytes[2]; } if (bytes.isNotEmpty) { name_3 = bytes[3]; } if (bytes.isNotEmpty) { name_4 = bytes[4]; } if (bytes.isNotEmpty) { name_5 = bytes[5]; } if (bytes.isNotEmpty) { name_6 = bytes[6]; } if (bytes.isNotEmpty) { name_7 = bytes[7]; } if (bytes.isNotEmpty) { name_8 = bytes[8]; } if (bytes.isNotEmpty) { name_9 = bytes[9]; } if (bytes.isNotEmpty) { name_10 = bytes[10]; } if (bytes.isNotEmpty) { name_11 = bytes[11]; } if (bytes.isNotEmpty) { name_12 = bytes[12]; } if (bytes.isNotEmpty) { name_13 = bytes[13]; } if (bytes.isNotEmpty) { name_14 = bytes[14]; } if (bytes.isNotEmpty) { name_15 = bytes[15]; } if (bytes.isNotEmpty) { name_16 = bytes[16]; } if (bytes.isNotEmpty) { name_17 = bytes[17]; } if (bytes.isNotEmpty) { name_18 = bytes[18]; } if (bytes.isNotEmpty) { name_19 = bytes[19]; } if (bytes.isNotEmpty) { name_20 = bytes[20]; } if (bytes.isNotEmpty) { name_21 = bytes[21]; } if (bytes.isNotEmpty) { name_22 = bytes[22]; } if (bytes.isNotEmpty) { name_23 = bytes[23]; } if (bytes.isNotEmpty) { name_24 = bytes[24]; } if (bytes.isNotEmpty) { name_25 = bytes[25]; } if (bytes.isNotEmpty) { name_26 = bytes[26]; } if (bytes.isNotEmpty) { name_27 = bytes[27]; } if (bytes.isNotEmpty) { name_28 = bytes[28]; } if (bytes.isNotEmpty) { name_29 = bytes[29]; } if (bytes.isNotEmpty) { name_30 = bytes[30]; } if (bytes.isNotEmpty) { name_31 = bytes[31]; } if (bytes.isNotEmpty) { name_32 = bytes[32]; } if (bytes.isNotEmpty) { name_33 = bytes[33]; } if (bytes.isNotEmpty) { name_34 = bytes[34]; } if (bytes.isNotEmpty) { name_35 = bytes[35]; } if (bytes.isNotEmpty) { name_36 = bytes[36]; } if (bytes.isNotEmpty) { name_37 = bytes[37]; } if (bytes.isNotEmpty) { name_38 = bytes[38]; } if (bytes.isNotEmpty) { name_39 = bytes[39]; } if (bytes.isNotEmpty) { name_40 = bytes[40]; } if (bytes.isNotEmpty) { name_41 = bytes[41]; } if (bytes.isNotEmpty) { name_42 = bytes[42]; } if (bytes.isNotEmpty) { name_43 = bytes[43]; } if (bytes.isNotEmpty) { name_44 = bytes[44]; } if (bytes.isNotEmpty) { name_45 = bytes[45]; } if (bytes.isNotEmpty) { name_46 = bytes[46]; } if (bytes.isNotEmpty) { name_47 = bytes[47]; } if (bytes.isNotEmpty) { name_48 = bytes[48]; } if (bytes.isNotEmpty) { name_49 = bytes[49]; } if (bytes.isNotEmpty) { name_50 = bytes[50]; } if (bytes.isNotEmpty) { name_51 = bytes[51]; } if (bytes.isNotEmpty) { name_52 = bytes[52]; } if (bytes.isNotEmpty) { name_53 = bytes[53]; } if (bytes.isNotEmpty) { name_54 = bytes[54]; } if (bytes.isNotEmpty) { name_55 = bytes[55]; } if (bytes.isNotEmpty) { name_56 = bytes[56]; } if (bytes.isNotEmpty) { name_57 = bytes[57]; } if (bytes.isNotEmpty) { name_58 = bytes[58]; } if (bytes.isNotEmpty) { name_59 = bytes[59]; } if (bytes.isNotEmpty) { name_60 = bytes[60]; } if (bytes.isNotEmpty) { name_61 = bytes[61]; } if (bytes.isNotEmpty) { name_62 = bytes[62]; } if (bytes.isNotEmpty) { name_63 = bytes[63]; } if (bytes.isNotEmpty) { name_64 = bytes[64]; } if (bytes.isNotEmpty) { name_65 = bytes[65]; } if (bytes.isNotEmpty) { name_66 = bytes[66]; } if (bytes.isNotEmpty) { name_67 = bytes[67]; } if (bytes.isNotEmpty) { name_68 = bytes[68]; } if (bytes.isNotEmpty) { name_69 = bytes[69]; } if (bytes.isNotEmpty) { name_70 = bytes[70]; } if (bytes.isNotEmpty) { name_71 = bytes[71]; } if (bytes.isNotEmpty) { name_72 = bytes[72]; } if (bytes.isNotEmpty) { name_73 = bytes[73]; } if (bytes.isNotEmpty) { name_74 = bytes[74]; } if (bytes.isNotEmpty) { name_75 = bytes[75]; } if (bytes.isNotEmpty) { name_76 = bytes[76]; } if (bytes.isNotEmpty) { name_77 = bytes[77]; } if (bytes.isNotEmpty) { name_78 = bytes[78]; } if (bytes.isNotEmpty) { name_79 = bytes[79]; } if (bytes.isNotEmpty) { name_80 = bytes[80]; } if (bytes.isNotEmpty) { name_81 = bytes[81]; } if (bytes.isNotEmpty) { name_82 = bytes[82]; } if (bytes.isNotEmpty) { name_83 = bytes[83]; } if (bytes.isNotEmpty) { name_84 = bytes[84]; } if (bytes.isNotEmpty) { name_85 = bytes[85]; } if (bytes.isNotEmpty) { name_86 = bytes[86]; } if (bytes.isNotEmpty) { name_87 = bytes[87]; } if (bytes.isNotEmpty) { name_88 = bytes[88]; } if (bytes.isNotEmpty) { name_89 = bytes[89]; } if (bytes.isNotEmpty) { name_90 = bytes[90]; } if (bytes.isNotEmpty) { name_91 = bytes[91]; } if (bytes.isNotEmpty) { name_92 = bytes[92]; } if (bytes.isNotEmpty) { name_93 = bytes[93]; } if (bytes.isNotEmpty) { name_94 = bytes[94]; } if (bytes.isNotEmpty) { name_95 = bytes[95]; } if (bytes.isNotEmpty) { name_96 = bytes[96]; } if (bytes.isNotEmpty) { name_97 = bytes[97]; } if (bytes.isNotEmpty) { name_98 = bytes[98]; } if (bytes.isNotEmpty) { name_99 = bytes[99]; } if (bytes.isNotEmpty) { name_100 = bytes[100]; } if (bytes.isNotEmpty) { name_101 = bytes[101]; } if (bytes.isNotEmpty) { name_102 = bytes[102]; } if (bytes.isNotEmpty) { name_103 = bytes[103]; } if (bytes.isNotEmpty) { name_104 = bytes[104]; } if (bytes.isNotEmpty) { name_105 = bytes[105]; } if (bytes.isNotEmpty) { name_106 = bytes[106]; } if (bytes.isNotEmpty) { name_107 = bytes[107]; } if (bytes.isNotEmpty) { name_108 = bytes[108]; } if (bytes.isNotEmpty) { name_109 = bytes[109]; } if (bytes.isNotEmpty) { name_110 = bytes[110]; } if (bytes.isNotEmpty) { name_111 = bytes[111]; } if (bytes.isNotEmpty) { name_112 = bytes[112]; } if (bytes.isNotEmpty) { name_113 = bytes[113]; } if (bytes.isNotEmpty) { name_114 = bytes[114]; } if (bytes.isNotEmpty) { name_115 = bytes[115]; } if (bytes.isNotEmpty) { name_116 = bytes[116]; } if (bytes.isNotEmpty) { name_117 = bytes[117]; } if (bytes.isNotEmpty) { name_118 = bytes[118]; } if (bytes.isNotEmpty) { name_119 = bytes[119]; } if (bytes.isNotEmpty) { name_120 = bytes[120]; } if (bytes.isNotEmpty) { name_121 = bytes[121]; } if (bytes.isNotEmpty) { name_122 = bytes[122]; } if (bytes.isNotEmpty) { name_123 = bytes[123]; } if (bytes.isNotEmpty) { name_124 = bytes[124]; } if (bytes.isNotEmpty) { name_125 = bytes[125]; } if (bytes.isNotEmpty) { name_126 = bytes[126]; } if (bytes.isNotEmpty) { name_127 = bytes[127]; } if (bytes.isNotEmpty) { name_128 = bytes[128]; } if (bytes.isNotEmpty) { name_129 = bytes[129]; } if (bytes.isNotEmpty) { name_130 = bytes[130]; } if (bytes.isNotEmpty) { name_131 = bytes[131]; } if (bytes.isNotEmpty) { name_132 = bytes[132]; } if (bytes.isNotEmpty) { name_133 = bytes[133]; } if (bytes.isNotEmpty) { name_134 = bytes[134]; } if (bytes.isNotEmpty) { name_135 = bytes[135]; } if (bytes.isNotEmpty) { name_136 = bytes[136]; } if (bytes.isNotEmpty) { name_137 = bytes[137]; } if (bytes.isNotEmpty) { name_138 = bytes[138]; } if (bytes.isNotEmpty) { name_139 = bytes[139]; } if (bytes.isNotEmpty) { name_140 = bytes[140]; } if (bytes.isNotEmpty) { name_141 = bytes[141]; } if (bytes.isNotEmpty) { name_142 = bytes[142]; } if (bytes.isNotEmpty) { name_143 = bytes[143]; } if (bytes.isNotEmpty) { name_144 = bytes[144]; } if (bytes.isNotEmpty) { name_145 = bytes[145]; } if (bytes.isNotEmpty) { name_146 = bytes[146]; } if (bytes.isNotEmpty) { name_147 = bytes[147]; } if (bytes.isNotEmpty) { name_148 = bytes[148]; } if (bytes.isNotEmpty) { name_149 = bytes[149]; } if (bytes.isNotEmpty) { name_150 = bytes[150]; } if (bytes.isNotEmpty) { name_151 = bytes[151]; } if (bytes.isNotEmpty) { name_152 = bytes[152]; } if (bytes.isNotEmpty) { name_153 = bytes[153]; } if (bytes.isNotEmpty) { name_154 = bytes[154]; } if (bytes.isNotEmpty) { name_155 = bytes[155]; } if (bytes.isNotEmpty) { name_156 = bytes[156]; } if (bytes.isNotEmpty) { name_157 = bytes[157]; } if (bytes.isNotEmpty) { name_158 = bytes[158]; } if (bytes.isNotEmpty) { name_159 = bytes[159]; } if (bytes.isNotEmpty) { name_160 = bytes[160]; } if (bytes.isNotEmpty) { name_161 = bytes[161]; } if (bytes.isNotEmpty) { name_162 = bytes[162]; } if (bytes.isNotEmpty) { name_163 = bytes[163]; } if (bytes.isNotEmpty) { name_164 = bytes[164]; } if (bytes.isNotEmpty) { name_165 = bytes[165]; } if (bytes.isNotEmpty) { name_166 = bytes[166]; } if (bytes.isNotEmpty) { name_167 = bytes[167]; } if (bytes.isNotEmpty) { name_168 = bytes[168]; } if (bytes.isNotEmpty) { name_169 = bytes[169]; } if (bytes.isNotEmpty) { name_170 = bytes[170]; } if (bytes.isNotEmpty) { name_171 = bytes[171]; } if (bytes.isNotEmpty) { name_172 = bytes[172]; } if (bytes.isNotEmpty) { name_173 = bytes[173]; } if (bytes.isNotEmpty) { name_174 = bytes[174]; } if (bytes.isNotEmpty) { name_175 = bytes[175]; } if (bytes.isNotEmpty) { name_176 = bytes[176]; } if (bytes.isNotEmpty) { name_177 = bytes[177]; } if (bytes.isNotEmpty) { name_178 = bytes[178]; } if (bytes.isNotEmpty) { name_179 = bytes[179]; } if (bytes.isNotEmpty) { name_180 = bytes[180]; } if (bytes.isNotEmpty) { name_181 = bytes[181]; } if (bytes.isNotEmpty) { name_182 = bytes[182]; } if (bytes.isNotEmpty) { name_183 = bytes[183]; } if (bytes.isNotEmpty) { name_184 = bytes[184]; } if (bytes.isNotEmpty) { name_185 = bytes[185]; } if (bytes.isNotEmpty) { name_186 = bytes[186]; } if (bytes.isNotEmpty) { name_187 = bytes[187]; } if (bytes.isNotEmpty) { name_188 = bytes[188]; } if (bytes.isNotEmpty) { name_189 = bytes[189]; } if (bytes.isNotEmpty) { name_190 = bytes[190]; } if (bytes.isNotEmpty) { name_191 = bytes[191]; } if (bytes.isNotEmpty) { name_192 = bytes[192]; } if (bytes.isNotEmpty) { name_193 = bytes[193]; } if (bytes.isNotEmpty) { name_194 = bytes[194]; } if (bytes.isNotEmpty) { name_195 = bytes[195]; } if (bytes.isNotEmpty) { name_196 = bytes[196]; } if (bytes.isNotEmpty) { name_197 = bytes[197]; } if (bytes.isNotEmpty) { name_198 = bytes[198]; } if (bytes.isNotEmpty) { name_199 = bytes[199]; } if (bytes.isNotEmpty) { name_200 = bytes[200]; } if (bytes.isNotEmpty) { name_201 = bytes[201]; } if (bytes.isNotEmpty) { name_202 = bytes[202]; } if (bytes.isNotEmpty) { name_203 = bytes[203]; } if (bytes.isNotEmpty) { name_204 = bytes[204]; } if (bytes.isNotEmpty) { name_205 = bytes[205]; } if (bytes.isNotEmpty) { name_206 = bytes[206]; } if (bytes.isNotEmpty) { name_207 = bytes[207]; } if (bytes.isNotEmpty) { name_208 = bytes[208]; } if (bytes.isNotEmpty) { name_209 = bytes[209]; } if (bytes.isNotEmpty) { name_210 = bytes[210]; } if (bytes.isNotEmpty) { name_211 = bytes[211]; } if (bytes.isNotEmpty) { name_212 = bytes[212]; } if (bytes.isNotEmpty) { name_213 = bytes[213]; } if (bytes.isNotEmpty) { name_214 = bytes[214]; } if (bytes.isNotEmpty) { name_215 = bytes[215]; } if (bytes.isNotEmpty) { name_216 = bytes[216]; } if (bytes.isNotEmpty) { name_217 = bytes[217]; } if (bytes.isNotEmpty) { name_218 = bytes[218]; } if (bytes.isNotEmpty) { name_219 = bytes[219]; } if (bytes.isNotEmpty) { name_220 = bytes[220]; } if (bytes.isNotEmpty) { name_221 = bytes[221]; } if (bytes.isNotEmpty) { name_222 = bytes[222]; } if (bytes.isNotEmpty) { name_223 = bytes[223]; } if (bytes.isNotEmpty) { name_224 = bytes[224]; } if (bytes.isNotEmpty) { name_225 = bytes[225]; } if (bytes.isNotEmpty) { name_226 = bytes[226]; } if (bytes.isNotEmpty) { name_227 = bytes[227]; } if (bytes.isNotEmpty) { name_228 = bytes[228]; } if (bytes.isNotEmpty) { name_229 = bytes[229]; } if (bytes.isNotEmpty) { name_230 = bytes[230]; } if (bytes.isNotEmpty) { name_231 = bytes[231]; } if (bytes.isNotEmpty) { name_232 = bytes[232]; } if (bytes.isNotEmpty) { name_233 = bytes[233]; } if (bytes.isNotEmpty) { name_234 = bytes[234]; } if (bytes.isNotEmpty) { name_235 = bytes[235]; } if (bytes.isNotEmpty) { name_236 = bytes[236]; } if (bytes.isNotEmpty) { name_237 = bytes[237]; } if (bytes.isNotEmpty) { name_238 = bytes[238]; } if (bytes.isNotEmpty) { name_239 = bytes[239]; } if (bytes.isNotEmpty) { name_240 = bytes[240]; } if (bytes.isNotEmpty) { name_241 = bytes[241]; } if (bytes.isNotEmpty) { name_242 = bytes[242]; } if (bytes.isNotEmpty) { name_243 = bytes[243]; } if (bytes.isNotEmpty) { name_244 = bytes[244]; } if (bytes.isNotEmpty) { name_245 = bytes[245]; } if (bytes.isNotEmpty) { name_246 = bytes[246]; } if (bytes.isNotEmpty) { name_247 = bytes[247]; } if (bytes.isNotEmpty) { name_248 = bytes[248]; } if (bytes.isNotEmpty) { name_249 = bytes[249]; } if (bytes.isNotEmpty) { name_250 = bytes[250]; } if (bytes.isNotEmpty) { name_251 = bytes[251]; } if (bytes.isNotEmpty) { name_252 = bytes[252]; } if (bytes.isNotEmpty) { name_253 = bytes[253]; } if (bytes.isNotEmpty) { name_254 = bytes[254]; } if (bytes.isNotEmpty) { name_255 = bytes[255]; }
  }
  @Uint8() int version_0; @Uint8() int version_1; @Uint8() int version_2; @Uint8() int version_3; @Uint8() int version_4; @Uint8() int version_5; @Uint8() int version_6; @Uint8() int version_7; @Uint8() int version_8; @Uint8() int version_9; @Uint8() int version_10; @Uint8() int version_11; @Uint8() int version_12; @Uint8() int version_13; @Uint8() int version_14; @Uint8() int version_15; @Uint8() int version_16; @Uint8() int version_17; @Uint8() int version_18; @Uint8() int version_19; @Uint8() int version_20; @Uint8() int version_21; @Uint8() int version_22; @Uint8() int version_23; @Uint8() int version_24; @Uint8() int version_25; @Uint8() int version_26; @Uint8() int version_27; @Uint8() int version_28; @Uint8() int version_29; @Uint8() int version_30; @Uint8() int version_31; @Uint8() int version_32; @Uint8() int version_33; @Uint8() int version_34; @Uint8() int version_35; @Uint8() int version_36; @Uint8() int version_37; @Uint8() int version_38; @Uint8() int version_39; @Uint8() int version_40; @Uint8() int version_41; @Uint8() int version_42; @Uint8() int version_43; @Uint8() int version_44; @Uint8() int version_45; @Uint8() int version_46; @Uint8() int version_47; @Uint8() int version_48; @Uint8() int version_49; @Uint8() int version_50; @Uint8() int version_51; @Uint8() int version_52; @Uint8() int version_53; @Uint8() int version_54; @Uint8() int version_55; @Uint8() int version_56; @Uint8() int version_57; @Uint8() int version_58; @Uint8() int version_59; @Uint8() int version_60; @Uint8() int version_61; @Uint8() int version_62; @Uint8() int version_63; @Uint8() int version_64; @Uint8() int version_65; @Uint8() int version_66; @Uint8() int version_67; @Uint8() int version_68; @Uint8() int version_69; @Uint8() int version_70; @Uint8() int version_71; @Uint8() int version_72; @Uint8() int version_73; @Uint8() int version_74; @Uint8() int version_75; @Uint8() int version_76; @Uint8() int version_77; @Uint8() int version_78; @Uint8() int version_79; @Uint8() int version_80; @Uint8() int version_81; @Uint8() int version_82; @Uint8() int version_83; @Uint8() int version_84; @Uint8() int version_85; @Uint8() int version_86; @Uint8() int version_87; @Uint8() int version_88; @Uint8() int version_89; @Uint8() int version_90; @Uint8() int version_91; @Uint8() int version_92; @Uint8() int version_93; @Uint8() int version_94; @Uint8() int version_95; @Uint8() int version_96; @Uint8() int version_97; @Uint8() int version_98; @Uint8() int version_99; @Uint8() int version_100; @Uint8() int version_101; @Uint8() int version_102; @Uint8() int version_103; @Uint8() int version_104; @Uint8() int version_105; @Uint8() int version_106; @Uint8() int version_107; @Uint8() int version_108; @Uint8() int version_109; @Uint8() int version_110; @Uint8() int version_111; @Uint8() int version_112; @Uint8() int version_113; @Uint8() int version_114; @Uint8() int version_115; @Uint8() int version_116; @Uint8() int version_117; @Uint8() int version_118; @Uint8() int version_119; @Uint8() int version_120; @Uint8() int version_121; @Uint8() int version_122; @Uint8() int version_123; @Uint8() int version_124; @Uint8() int version_125; @Uint8() int version_126; @Uint8() int version_127; @Uint8() int version_128; @Uint8() int version_129; @Uint8() int version_130; @Uint8() int version_131; @Uint8() int version_132; @Uint8() int version_133; @Uint8() int version_134; @Uint8() int version_135; @Uint8() int version_136; @Uint8() int version_137; @Uint8() int version_138; @Uint8() int version_139; @Uint8() int version_140; @Uint8() int version_141; @Uint8() int version_142; @Uint8() int version_143; @Uint8() int version_144; @Uint8() int version_145; @Uint8() int version_146; @Uint8() int version_147; @Uint8() int version_148; @Uint8() int version_149; @Uint8() int version_150; @Uint8() int version_151; @Uint8() int version_152; @Uint8() int version_153; @Uint8() int version_154; @Uint8() int version_155; @Uint8() int version_156; @Uint8() int version_157; @Uint8() int version_158; @Uint8() int version_159; @Uint8() int version_160; @Uint8() int version_161; @Uint8() int version_162; @Uint8() int version_163; @Uint8() int version_164; @Uint8() int version_165; @Uint8() int version_166; @Uint8() int version_167; @Uint8() int version_168; @Uint8() int version_169; @Uint8() int version_170; @Uint8() int version_171; @Uint8() int version_172; @Uint8() int version_173; @Uint8() int version_174; @Uint8() int version_175; @Uint8() int version_176; @Uint8() int version_177; @Uint8() int version_178; @Uint8() int version_179; @Uint8() int version_180; @Uint8() int version_181; @Uint8() int version_182; @Uint8() int version_183; @Uint8() int version_184; @Uint8() int version_185; @Uint8() int version_186; @Uint8() int version_187; @Uint8() int version_188; @Uint8() int version_189; @Uint8() int version_190; @Uint8() int version_191; @Uint8() int version_192; @Uint8() int version_193; @Uint8() int version_194; @Uint8() int version_195; @Uint8() int version_196; @Uint8() int version_197; @Uint8() int version_198; @Uint8() int version_199; @Uint8() int version_200; @Uint8() int version_201; @Uint8() int version_202; @Uint8() int version_203; @Uint8() int version_204; @Uint8() int version_205; @Uint8() int version_206; @Uint8() int version_207; @Uint8() int version_208; @Uint8() int version_209; @Uint8() int version_210; @Uint8() int version_211; @Uint8() int version_212; @Uint8() int version_213; @Uint8() int version_214; @Uint8() int version_215; @Uint8() int version_216; @Uint8() int version_217; @Uint8() int version_218; @Uint8() int version_219; @Uint8() int version_220; @Uint8() int version_221; @Uint8() int version_222; @Uint8() int version_223; @Uint8() int version_224; @Uint8() int version_225; @Uint8() int version_226; @Uint8() int version_227; @Uint8() int version_228; @Uint8() int version_229; @Uint8() int version_230; @Uint8() int version_231; @Uint8() int version_232; @Uint8() int version_233; @Uint8() int version_234; @Uint8() int version_235; @Uint8() int version_236; @Uint8() int version_237; @Uint8() int version_238; @Uint8() int version_239; @Uint8() int version_240; @Uint8() int version_241; @Uint8() int version_242; @Uint8() int version_243; @Uint8() int version_244; @Uint8() int version_245; @Uint8() int version_246; @Uint8() int version_247; @Uint8() int version_248; @Uint8() int version_249; @Uint8() int version_250; @Uint8() int version_251; @Uint8() int version_252; @Uint8() int version_253; @Uint8() int version_254; @Uint8() int version_255;
  String get version {
    var bytes = [version_0, version_1, version_2, version_3, version_4, version_5, version_6, version_7, version_8, version_9, version_10, version_11, version_12, version_13, version_14, version_15, version_16, version_17, version_18, version_19, version_20, version_21, version_22, version_23, version_24, version_25, version_26, version_27, version_28, version_29, version_30, version_31, version_32, version_33, version_34, version_35, version_36, version_37, version_38, version_39, version_40, version_41, version_42, version_43, version_44, version_45, version_46, version_47, version_48, version_49, version_50, version_51, version_52, version_53, version_54, version_55, version_56, version_57, version_58, version_59, version_60, version_61, version_62, version_63, version_64, version_65, version_66, version_67, version_68, version_69, version_70, version_71, version_72, version_73, version_74, version_75, version_76, version_77, version_78, version_79, version_80, version_81, version_82, version_83, version_84, version_85, version_86, version_87, version_88, version_89, version_90, version_91, version_92, version_93, version_94, version_95, version_96, version_97, version_98, version_99, version_100, version_101, version_102, version_103, version_104, version_105, version_106, version_107, version_108, version_109, version_110, version_111, version_112, version_113, version_114, version_115, version_116, version_117, version_118, version_119, version_120, version_121, version_122, version_123, version_124, version_125, version_126, version_127, version_128, version_129, version_130, version_131, version_132, version_133, version_134, version_135, version_136, version_137, version_138, version_139, version_140, version_141, version_142, version_143, version_144, version_145, version_146, version_147, version_148, version_149, version_150, version_151, version_152, version_153, version_154, version_155, version_156, version_157, version_158, version_159, version_160, version_161, version_162, version_163, version_164, version_165, version_166, version_167, version_168, version_169, version_170, version_171, version_172, version_173, version_174, version_175, version_176, version_177, version_178, version_179, version_180, version_181, version_182, version_183, version_184, version_185, version_186, version_187, version_188, version_189, version_190, version_191, version_192, version_193, version_194, version_195, version_196, version_197, version_198, version_199, version_200, version_201, version_202, version_203, version_204, version_205, version_206, version_207, version_208, version_209, version_210, version_211, version_212, version_213, version_214, version_215, version_216, version_217, version_218, version_219, version_220, version_221, version_222, version_223, version_224, version_225, version_226, version_227, version_228, version_229, version_230, version_231, version_232, version_233, version_234, version_235, version_236, version_237, version_238, version_239, version_240, version_241, version_242, version_243, version_244, version_245, version_246, version_247, version_248, version_249, version_250, version_251, version_252, version_253, version_254, version_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set version(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { version_0 = bytes[0]; } if (bytes.isNotEmpty) { version_1 = bytes[1]; } if (bytes.isNotEmpty) { version_2 = bytes[2]; } if (bytes.isNotEmpty) { version_3 = bytes[3]; } if (bytes.isNotEmpty) { version_4 = bytes[4]; } if (bytes.isNotEmpty) { version_5 = bytes[5]; } if (bytes.isNotEmpty) { version_6 = bytes[6]; } if (bytes.isNotEmpty) { version_7 = bytes[7]; } if (bytes.isNotEmpty) { version_8 = bytes[8]; } if (bytes.isNotEmpty) { version_9 = bytes[9]; } if (bytes.isNotEmpty) { version_10 = bytes[10]; } if (bytes.isNotEmpty) { version_11 = bytes[11]; } if (bytes.isNotEmpty) { version_12 = bytes[12]; } if (bytes.isNotEmpty) { version_13 = bytes[13]; } if (bytes.isNotEmpty) { version_14 = bytes[14]; } if (bytes.isNotEmpty) { version_15 = bytes[15]; } if (bytes.isNotEmpty) { version_16 = bytes[16]; } if (bytes.isNotEmpty) { version_17 = bytes[17]; } if (bytes.isNotEmpty) { version_18 = bytes[18]; } if (bytes.isNotEmpty) { version_19 = bytes[19]; } if (bytes.isNotEmpty) { version_20 = bytes[20]; } if (bytes.isNotEmpty) { version_21 = bytes[21]; } if (bytes.isNotEmpty) { version_22 = bytes[22]; } if (bytes.isNotEmpty) { version_23 = bytes[23]; } if (bytes.isNotEmpty) { version_24 = bytes[24]; } if (bytes.isNotEmpty) { version_25 = bytes[25]; } if (bytes.isNotEmpty) { version_26 = bytes[26]; } if (bytes.isNotEmpty) { version_27 = bytes[27]; } if (bytes.isNotEmpty) { version_28 = bytes[28]; } if (bytes.isNotEmpty) { version_29 = bytes[29]; } if (bytes.isNotEmpty) { version_30 = bytes[30]; } if (bytes.isNotEmpty) { version_31 = bytes[31]; } if (bytes.isNotEmpty) { version_32 = bytes[32]; } if (bytes.isNotEmpty) { version_33 = bytes[33]; } if (bytes.isNotEmpty) { version_34 = bytes[34]; } if (bytes.isNotEmpty) { version_35 = bytes[35]; } if (bytes.isNotEmpty) { version_36 = bytes[36]; } if (bytes.isNotEmpty) { version_37 = bytes[37]; } if (bytes.isNotEmpty) { version_38 = bytes[38]; } if (bytes.isNotEmpty) { version_39 = bytes[39]; } if (bytes.isNotEmpty) { version_40 = bytes[40]; } if (bytes.isNotEmpty) { version_41 = bytes[41]; } if (bytes.isNotEmpty) { version_42 = bytes[42]; } if (bytes.isNotEmpty) { version_43 = bytes[43]; } if (bytes.isNotEmpty) { version_44 = bytes[44]; } if (bytes.isNotEmpty) { version_45 = bytes[45]; } if (bytes.isNotEmpty) { version_46 = bytes[46]; } if (bytes.isNotEmpty) { version_47 = bytes[47]; } if (bytes.isNotEmpty) { version_48 = bytes[48]; } if (bytes.isNotEmpty) { version_49 = bytes[49]; } if (bytes.isNotEmpty) { version_50 = bytes[50]; } if (bytes.isNotEmpty) { version_51 = bytes[51]; } if (bytes.isNotEmpty) { version_52 = bytes[52]; } if (bytes.isNotEmpty) { version_53 = bytes[53]; } if (bytes.isNotEmpty) { version_54 = bytes[54]; } if (bytes.isNotEmpty) { version_55 = bytes[55]; } if (bytes.isNotEmpty) { version_56 = bytes[56]; } if (bytes.isNotEmpty) { version_57 = bytes[57]; } if (bytes.isNotEmpty) { version_58 = bytes[58]; } if (bytes.isNotEmpty) { version_59 = bytes[59]; } if (bytes.isNotEmpty) { version_60 = bytes[60]; } if (bytes.isNotEmpty) { version_61 = bytes[61]; } if (bytes.isNotEmpty) { version_62 = bytes[62]; } if (bytes.isNotEmpty) { version_63 = bytes[63]; } if (bytes.isNotEmpty) { version_64 = bytes[64]; } if (bytes.isNotEmpty) { version_65 = bytes[65]; } if (bytes.isNotEmpty) { version_66 = bytes[66]; } if (bytes.isNotEmpty) { version_67 = bytes[67]; } if (bytes.isNotEmpty) { version_68 = bytes[68]; } if (bytes.isNotEmpty) { version_69 = bytes[69]; } if (bytes.isNotEmpty) { version_70 = bytes[70]; } if (bytes.isNotEmpty) { version_71 = bytes[71]; } if (bytes.isNotEmpty) { version_72 = bytes[72]; } if (bytes.isNotEmpty) { version_73 = bytes[73]; } if (bytes.isNotEmpty) { version_74 = bytes[74]; } if (bytes.isNotEmpty) { version_75 = bytes[75]; } if (bytes.isNotEmpty) { version_76 = bytes[76]; } if (bytes.isNotEmpty) { version_77 = bytes[77]; } if (bytes.isNotEmpty) { version_78 = bytes[78]; } if (bytes.isNotEmpty) { version_79 = bytes[79]; } if (bytes.isNotEmpty) { version_80 = bytes[80]; } if (bytes.isNotEmpty) { version_81 = bytes[81]; } if (bytes.isNotEmpty) { version_82 = bytes[82]; } if (bytes.isNotEmpty) { version_83 = bytes[83]; } if (bytes.isNotEmpty) { version_84 = bytes[84]; } if (bytes.isNotEmpty) { version_85 = bytes[85]; } if (bytes.isNotEmpty) { version_86 = bytes[86]; } if (bytes.isNotEmpty) { version_87 = bytes[87]; } if (bytes.isNotEmpty) { version_88 = bytes[88]; } if (bytes.isNotEmpty) { version_89 = bytes[89]; } if (bytes.isNotEmpty) { version_90 = bytes[90]; } if (bytes.isNotEmpty) { version_91 = bytes[91]; } if (bytes.isNotEmpty) { version_92 = bytes[92]; } if (bytes.isNotEmpty) { version_93 = bytes[93]; } if (bytes.isNotEmpty) { version_94 = bytes[94]; } if (bytes.isNotEmpty) { version_95 = bytes[95]; } if (bytes.isNotEmpty) { version_96 = bytes[96]; } if (bytes.isNotEmpty) { version_97 = bytes[97]; } if (bytes.isNotEmpty) { version_98 = bytes[98]; } if (bytes.isNotEmpty) { version_99 = bytes[99]; } if (bytes.isNotEmpty) { version_100 = bytes[100]; } if (bytes.isNotEmpty) { version_101 = bytes[101]; } if (bytes.isNotEmpty) { version_102 = bytes[102]; } if (bytes.isNotEmpty) { version_103 = bytes[103]; } if (bytes.isNotEmpty) { version_104 = bytes[104]; } if (bytes.isNotEmpty) { version_105 = bytes[105]; } if (bytes.isNotEmpty) { version_106 = bytes[106]; } if (bytes.isNotEmpty) { version_107 = bytes[107]; } if (bytes.isNotEmpty) { version_108 = bytes[108]; } if (bytes.isNotEmpty) { version_109 = bytes[109]; } if (bytes.isNotEmpty) { version_110 = bytes[110]; } if (bytes.isNotEmpty) { version_111 = bytes[111]; } if (bytes.isNotEmpty) { version_112 = bytes[112]; } if (bytes.isNotEmpty) { version_113 = bytes[113]; } if (bytes.isNotEmpty) { version_114 = bytes[114]; } if (bytes.isNotEmpty) { version_115 = bytes[115]; } if (bytes.isNotEmpty) { version_116 = bytes[116]; } if (bytes.isNotEmpty) { version_117 = bytes[117]; } if (bytes.isNotEmpty) { version_118 = bytes[118]; } if (bytes.isNotEmpty) { version_119 = bytes[119]; } if (bytes.isNotEmpty) { version_120 = bytes[120]; } if (bytes.isNotEmpty) { version_121 = bytes[121]; } if (bytes.isNotEmpty) { version_122 = bytes[122]; } if (bytes.isNotEmpty) { version_123 = bytes[123]; } if (bytes.isNotEmpty) { version_124 = bytes[124]; } if (bytes.isNotEmpty) { version_125 = bytes[125]; } if (bytes.isNotEmpty) { version_126 = bytes[126]; } if (bytes.isNotEmpty) { version_127 = bytes[127]; } if (bytes.isNotEmpty) { version_128 = bytes[128]; } if (bytes.isNotEmpty) { version_129 = bytes[129]; } if (bytes.isNotEmpty) { version_130 = bytes[130]; } if (bytes.isNotEmpty) { version_131 = bytes[131]; } if (bytes.isNotEmpty) { version_132 = bytes[132]; } if (bytes.isNotEmpty) { version_133 = bytes[133]; } if (bytes.isNotEmpty) { version_134 = bytes[134]; } if (bytes.isNotEmpty) { version_135 = bytes[135]; } if (bytes.isNotEmpty) { version_136 = bytes[136]; } if (bytes.isNotEmpty) { version_137 = bytes[137]; } if (bytes.isNotEmpty) { version_138 = bytes[138]; } if (bytes.isNotEmpty) { version_139 = bytes[139]; } if (bytes.isNotEmpty) { version_140 = bytes[140]; } if (bytes.isNotEmpty) { version_141 = bytes[141]; } if (bytes.isNotEmpty) { version_142 = bytes[142]; } if (bytes.isNotEmpty) { version_143 = bytes[143]; } if (bytes.isNotEmpty) { version_144 = bytes[144]; } if (bytes.isNotEmpty) { version_145 = bytes[145]; } if (bytes.isNotEmpty) { version_146 = bytes[146]; } if (bytes.isNotEmpty) { version_147 = bytes[147]; } if (bytes.isNotEmpty) { version_148 = bytes[148]; } if (bytes.isNotEmpty) { version_149 = bytes[149]; } if (bytes.isNotEmpty) { version_150 = bytes[150]; } if (bytes.isNotEmpty) { version_151 = bytes[151]; } if (bytes.isNotEmpty) { version_152 = bytes[152]; } if (bytes.isNotEmpty) { version_153 = bytes[153]; } if (bytes.isNotEmpty) { version_154 = bytes[154]; } if (bytes.isNotEmpty) { version_155 = bytes[155]; } if (bytes.isNotEmpty) { version_156 = bytes[156]; } if (bytes.isNotEmpty) { version_157 = bytes[157]; } if (bytes.isNotEmpty) { version_158 = bytes[158]; } if (bytes.isNotEmpty) { version_159 = bytes[159]; } if (bytes.isNotEmpty) { version_160 = bytes[160]; } if (bytes.isNotEmpty) { version_161 = bytes[161]; } if (bytes.isNotEmpty) { version_162 = bytes[162]; } if (bytes.isNotEmpty) { version_163 = bytes[163]; } if (bytes.isNotEmpty) { version_164 = bytes[164]; } if (bytes.isNotEmpty) { version_165 = bytes[165]; } if (bytes.isNotEmpty) { version_166 = bytes[166]; } if (bytes.isNotEmpty) { version_167 = bytes[167]; } if (bytes.isNotEmpty) { version_168 = bytes[168]; } if (bytes.isNotEmpty) { version_169 = bytes[169]; } if (bytes.isNotEmpty) { version_170 = bytes[170]; } if (bytes.isNotEmpty) { version_171 = bytes[171]; } if (bytes.isNotEmpty) { version_172 = bytes[172]; } if (bytes.isNotEmpty) { version_173 = bytes[173]; } if (bytes.isNotEmpty) { version_174 = bytes[174]; } if (bytes.isNotEmpty) { version_175 = bytes[175]; } if (bytes.isNotEmpty) { version_176 = bytes[176]; } if (bytes.isNotEmpty) { version_177 = bytes[177]; } if (bytes.isNotEmpty) { version_178 = bytes[178]; } if (bytes.isNotEmpty) { version_179 = bytes[179]; } if (bytes.isNotEmpty) { version_180 = bytes[180]; } if (bytes.isNotEmpty) { version_181 = bytes[181]; } if (bytes.isNotEmpty) { version_182 = bytes[182]; } if (bytes.isNotEmpty) { version_183 = bytes[183]; } if (bytes.isNotEmpty) { version_184 = bytes[184]; } if (bytes.isNotEmpty) { version_185 = bytes[185]; } if (bytes.isNotEmpty) { version_186 = bytes[186]; } if (bytes.isNotEmpty) { version_187 = bytes[187]; } if (bytes.isNotEmpty) { version_188 = bytes[188]; } if (bytes.isNotEmpty) { version_189 = bytes[189]; } if (bytes.isNotEmpty) { version_190 = bytes[190]; } if (bytes.isNotEmpty) { version_191 = bytes[191]; } if (bytes.isNotEmpty) { version_192 = bytes[192]; } if (bytes.isNotEmpty) { version_193 = bytes[193]; } if (bytes.isNotEmpty) { version_194 = bytes[194]; } if (bytes.isNotEmpty) { version_195 = bytes[195]; } if (bytes.isNotEmpty) { version_196 = bytes[196]; } if (bytes.isNotEmpty) { version_197 = bytes[197]; } if (bytes.isNotEmpty) { version_198 = bytes[198]; } if (bytes.isNotEmpty) { version_199 = bytes[199]; } if (bytes.isNotEmpty) { version_200 = bytes[200]; } if (bytes.isNotEmpty) { version_201 = bytes[201]; } if (bytes.isNotEmpty) { version_202 = bytes[202]; } if (bytes.isNotEmpty) { version_203 = bytes[203]; } if (bytes.isNotEmpty) { version_204 = bytes[204]; } if (bytes.isNotEmpty) { version_205 = bytes[205]; } if (bytes.isNotEmpty) { version_206 = bytes[206]; } if (bytes.isNotEmpty) { version_207 = bytes[207]; } if (bytes.isNotEmpty) { version_208 = bytes[208]; } if (bytes.isNotEmpty) { version_209 = bytes[209]; } if (bytes.isNotEmpty) { version_210 = bytes[210]; } if (bytes.isNotEmpty) { version_211 = bytes[211]; } if (bytes.isNotEmpty) { version_212 = bytes[212]; } if (bytes.isNotEmpty) { version_213 = bytes[213]; } if (bytes.isNotEmpty) { version_214 = bytes[214]; } if (bytes.isNotEmpty) { version_215 = bytes[215]; } if (bytes.isNotEmpty) { version_216 = bytes[216]; } if (bytes.isNotEmpty) { version_217 = bytes[217]; } if (bytes.isNotEmpty) { version_218 = bytes[218]; } if (bytes.isNotEmpty) { version_219 = bytes[219]; } if (bytes.isNotEmpty) { version_220 = bytes[220]; } if (bytes.isNotEmpty) { version_221 = bytes[221]; } if (bytes.isNotEmpty) { version_222 = bytes[222]; } if (bytes.isNotEmpty) { version_223 = bytes[223]; } if (bytes.isNotEmpty) { version_224 = bytes[224]; } if (bytes.isNotEmpty) { version_225 = bytes[225]; } if (bytes.isNotEmpty) { version_226 = bytes[226]; } if (bytes.isNotEmpty) { version_227 = bytes[227]; } if (bytes.isNotEmpty) { version_228 = bytes[228]; } if (bytes.isNotEmpty) { version_229 = bytes[229]; } if (bytes.isNotEmpty) { version_230 = bytes[230]; } if (bytes.isNotEmpty) { version_231 = bytes[231]; } if (bytes.isNotEmpty) { version_232 = bytes[232]; } if (bytes.isNotEmpty) { version_233 = bytes[233]; } if (bytes.isNotEmpty) { version_234 = bytes[234]; } if (bytes.isNotEmpty) { version_235 = bytes[235]; } if (bytes.isNotEmpty) { version_236 = bytes[236]; } if (bytes.isNotEmpty) { version_237 = bytes[237]; } if (bytes.isNotEmpty) { version_238 = bytes[238]; } if (bytes.isNotEmpty) { version_239 = bytes[239]; } if (bytes.isNotEmpty) { version_240 = bytes[240]; } if (bytes.isNotEmpty) { version_241 = bytes[241]; } if (bytes.isNotEmpty) { version_242 = bytes[242]; } if (bytes.isNotEmpty) { version_243 = bytes[243]; } if (bytes.isNotEmpty) { version_244 = bytes[244]; } if (bytes.isNotEmpty) { version_245 = bytes[245]; } if (bytes.isNotEmpty) { version_246 = bytes[246]; } if (bytes.isNotEmpty) { version_247 = bytes[247]; } if (bytes.isNotEmpty) { version_248 = bytes[248]; } if (bytes.isNotEmpty) { version_249 = bytes[249]; } if (bytes.isNotEmpty) { version_250 = bytes[250]; } if (bytes.isNotEmpty) { version_251 = bytes[251]; } if (bytes.isNotEmpty) { version_252 = bytes[252]; } if (bytes.isNotEmpty) { version_253 = bytes[253]; } if (bytes.isNotEmpty) { version_254 = bytes[254]; } if (bytes.isNotEmpty) { version_255 = bytes[255]; }
  }
  @Uint32() int purposes;
  @Uint8() int description_0; @Uint8() int description_1; @Uint8() int description_2; @Uint8() int description_3; @Uint8() int description_4; @Uint8() int description_5; @Uint8() int description_6; @Uint8() int description_7; @Uint8() int description_8; @Uint8() int description_9; @Uint8() int description_10; @Uint8() int description_11; @Uint8() int description_12; @Uint8() int description_13; @Uint8() int description_14; @Uint8() int description_15; @Uint8() int description_16; @Uint8() int description_17; @Uint8() int description_18; @Uint8() int description_19; @Uint8() int description_20; @Uint8() int description_21; @Uint8() int description_22; @Uint8() int description_23; @Uint8() int description_24; @Uint8() int description_25; @Uint8() int description_26; @Uint8() int description_27; @Uint8() int description_28; @Uint8() int description_29; @Uint8() int description_30; @Uint8() int description_31; @Uint8() int description_32; @Uint8() int description_33; @Uint8() int description_34; @Uint8() int description_35; @Uint8() int description_36; @Uint8() int description_37; @Uint8() int description_38; @Uint8() int description_39; @Uint8() int description_40; @Uint8() int description_41; @Uint8() int description_42; @Uint8() int description_43; @Uint8() int description_44; @Uint8() int description_45; @Uint8() int description_46; @Uint8() int description_47; @Uint8() int description_48; @Uint8() int description_49; @Uint8() int description_50; @Uint8() int description_51; @Uint8() int description_52; @Uint8() int description_53; @Uint8() int description_54; @Uint8() int description_55; @Uint8() int description_56; @Uint8() int description_57; @Uint8() int description_58; @Uint8() int description_59; @Uint8() int description_60; @Uint8() int description_61; @Uint8() int description_62; @Uint8() int description_63; @Uint8() int description_64; @Uint8() int description_65; @Uint8() int description_66; @Uint8() int description_67; @Uint8() int description_68; @Uint8() int description_69; @Uint8() int description_70; @Uint8() int description_71; @Uint8() int description_72; @Uint8() int description_73; @Uint8() int description_74; @Uint8() int description_75; @Uint8() int description_76; @Uint8() int description_77; @Uint8() int description_78; @Uint8() int description_79; @Uint8() int description_80; @Uint8() int description_81; @Uint8() int description_82; @Uint8() int description_83; @Uint8() int description_84; @Uint8() int description_85; @Uint8() int description_86; @Uint8() int description_87; @Uint8() int description_88; @Uint8() int description_89; @Uint8() int description_90; @Uint8() int description_91; @Uint8() int description_92; @Uint8() int description_93; @Uint8() int description_94; @Uint8() int description_95; @Uint8() int description_96; @Uint8() int description_97; @Uint8() int description_98; @Uint8() int description_99; @Uint8() int description_100; @Uint8() int description_101; @Uint8() int description_102; @Uint8() int description_103; @Uint8() int description_104; @Uint8() int description_105; @Uint8() int description_106; @Uint8() int description_107; @Uint8() int description_108; @Uint8() int description_109; @Uint8() int description_110; @Uint8() int description_111; @Uint8() int description_112; @Uint8() int description_113; @Uint8() int description_114; @Uint8() int description_115; @Uint8() int description_116; @Uint8() int description_117; @Uint8() int description_118; @Uint8() int description_119; @Uint8() int description_120; @Uint8() int description_121; @Uint8() int description_122; @Uint8() int description_123; @Uint8() int description_124; @Uint8() int description_125; @Uint8() int description_126; @Uint8() int description_127; @Uint8() int description_128; @Uint8() int description_129; @Uint8() int description_130; @Uint8() int description_131; @Uint8() int description_132; @Uint8() int description_133; @Uint8() int description_134; @Uint8() int description_135; @Uint8() int description_136; @Uint8() int description_137; @Uint8() int description_138; @Uint8() int description_139; @Uint8() int description_140; @Uint8() int description_141; @Uint8() int description_142; @Uint8() int description_143; @Uint8() int description_144; @Uint8() int description_145; @Uint8() int description_146; @Uint8() int description_147; @Uint8() int description_148; @Uint8() int description_149; @Uint8() int description_150; @Uint8() int description_151; @Uint8() int description_152; @Uint8() int description_153; @Uint8() int description_154; @Uint8() int description_155; @Uint8() int description_156; @Uint8() int description_157; @Uint8() int description_158; @Uint8() int description_159; @Uint8() int description_160; @Uint8() int description_161; @Uint8() int description_162; @Uint8() int description_163; @Uint8() int description_164; @Uint8() int description_165; @Uint8() int description_166; @Uint8() int description_167; @Uint8() int description_168; @Uint8() int description_169; @Uint8() int description_170; @Uint8() int description_171; @Uint8() int description_172; @Uint8() int description_173; @Uint8() int description_174; @Uint8() int description_175; @Uint8() int description_176; @Uint8() int description_177; @Uint8() int description_178; @Uint8() int description_179; @Uint8() int description_180; @Uint8() int description_181; @Uint8() int description_182; @Uint8() int description_183; @Uint8() int description_184; @Uint8() int description_185; @Uint8() int description_186; @Uint8() int description_187; @Uint8() int description_188; @Uint8() int description_189; @Uint8() int description_190; @Uint8() int description_191; @Uint8() int description_192; @Uint8() int description_193; @Uint8() int description_194; @Uint8() int description_195; @Uint8() int description_196; @Uint8() int description_197; @Uint8() int description_198; @Uint8() int description_199; @Uint8() int description_200; @Uint8() int description_201; @Uint8() int description_202; @Uint8() int description_203; @Uint8() int description_204; @Uint8() int description_205; @Uint8() int description_206; @Uint8() int description_207; @Uint8() int description_208; @Uint8() int description_209; @Uint8() int description_210; @Uint8() int description_211; @Uint8() int description_212; @Uint8() int description_213; @Uint8() int description_214; @Uint8() int description_215; @Uint8() int description_216; @Uint8() int description_217; @Uint8() int description_218; @Uint8() int description_219; @Uint8() int description_220; @Uint8() int description_221; @Uint8() int description_222; @Uint8() int description_223; @Uint8() int description_224; @Uint8() int description_225; @Uint8() int description_226; @Uint8() int description_227; @Uint8() int description_228; @Uint8() int description_229; @Uint8() int description_230; @Uint8() int description_231; @Uint8() int description_232; @Uint8() int description_233; @Uint8() int description_234; @Uint8() int description_235; @Uint8() int description_236; @Uint8() int description_237; @Uint8() int description_238; @Uint8() int description_239; @Uint8() int description_240; @Uint8() int description_241; @Uint8() int description_242; @Uint8() int description_243; @Uint8() int description_244; @Uint8() int description_245; @Uint8() int description_246; @Uint8() int description_247; @Uint8() int description_248; @Uint8() int description_249; @Uint8() int description_250; @Uint8() int description_251; @Uint8() int description_252; @Uint8() int description_253; @Uint8() int description_254; @Uint8() int description_255;
  String get description {
    var bytes = [description_0, description_1, description_2, description_3, description_4, description_5, description_6, description_7, description_8, description_9, description_10, description_11, description_12, description_13, description_14, description_15, description_16, description_17, description_18, description_19, description_20, description_21, description_22, description_23, description_24, description_25, description_26, description_27, description_28, description_29, description_30, description_31, description_32, description_33, description_34, description_35, description_36, description_37, description_38, description_39, description_40, description_41, description_42, description_43, description_44, description_45, description_46, description_47, description_48, description_49, description_50, description_51, description_52, description_53, description_54, description_55, description_56, description_57, description_58, description_59, description_60, description_61, description_62, description_63, description_64, description_65, description_66, description_67, description_68, description_69, description_70, description_71, description_72, description_73, description_74, description_75, description_76, description_77, description_78, description_79, description_80, description_81, description_82, description_83, description_84, description_85, description_86, description_87, description_88, description_89, description_90, description_91, description_92, description_93, description_94, description_95, description_96, description_97, description_98, description_99, description_100, description_101, description_102, description_103, description_104, description_105, description_106, description_107, description_108, description_109, description_110, description_111, description_112, description_113, description_114, description_115, description_116, description_117, description_118, description_119, description_120, description_121, description_122, description_123, description_124, description_125, description_126, description_127, description_128, description_129, description_130, description_131, description_132, description_133, description_134, description_135, description_136, description_137, description_138, description_139, description_140, description_141, description_142, description_143, description_144, description_145, description_146, description_147, description_148, description_149, description_150, description_151, description_152, description_153, description_154, description_155, description_156, description_157, description_158, description_159, description_160, description_161, description_162, description_163, description_164, description_165, description_166, description_167, description_168, description_169, description_170, description_171, description_172, description_173, description_174, description_175, description_176, description_177, description_178, description_179, description_180, description_181, description_182, description_183, description_184, description_185, description_186, description_187, description_188, description_189, description_190, description_191, description_192, description_193, description_194, description_195, description_196, description_197, description_198, description_199, description_200, description_201, description_202, description_203, description_204, description_205, description_206, description_207, description_208, description_209, description_210, description_211, description_212, description_213, description_214, description_215, description_216, description_217, description_218, description_219, description_220, description_221, description_222, description_223, description_224, description_225, description_226, description_227, description_228, description_229, description_230, description_231, description_232, description_233, description_234, description_235, description_236, description_237, description_238, description_239, description_240, description_241, description_242, description_243, description_244, description_245, description_246, description_247, description_248, description_249, description_250, description_251, description_252, description_253, description_254, description_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set description(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { description_0 = bytes[0]; } if (bytes.isNotEmpty) { description_1 = bytes[1]; } if (bytes.isNotEmpty) { description_2 = bytes[2]; } if (bytes.isNotEmpty) { description_3 = bytes[3]; } if (bytes.isNotEmpty) { description_4 = bytes[4]; } if (bytes.isNotEmpty) { description_5 = bytes[5]; } if (bytes.isNotEmpty) { description_6 = bytes[6]; } if (bytes.isNotEmpty) { description_7 = bytes[7]; } if (bytes.isNotEmpty) { description_8 = bytes[8]; } if (bytes.isNotEmpty) { description_9 = bytes[9]; } if (bytes.isNotEmpty) { description_10 = bytes[10]; } if (bytes.isNotEmpty) { description_11 = bytes[11]; } if (bytes.isNotEmpty) { description_12 = bytes[12]; } if (bytes.isNotEmpty) { description_13 = bytes[13]; } if (bytes.isNotEmpty) { description_14 = bytes[14]; } if (bytes.isNotEmpty) { description_15 = bytes[15]; } if (bytes.isNotEmpty) { description_16 = bytes[16]; } if (bytes.isNotEmpty) { description_17 = bytes[17]; } if (bytes.isNotEmpty) { description_18 = bytes[18]; } if (bytes.isNotEmpty) { description_19 = bytes[19]; } if (bytes.isNotEmpty) { description_20 = bytes[20]; } if (bytes.isNotEmpty) { description_21 = bytes[21]; } if (bytes.isNotEmpty) { description_22 = bytes[22]; } if (bytes.isNotEmpty) { description_23 = bytes[23]; } if (bytes.isNotEmpty) { description_24 = bytes[24]; } if (bytes.isNotEmpty) { description_25 = bytes[25]; } if (bytes.isNotEmpty) { description_26 = bytes[26]; } if (bytes.isNotEmpty) { description_27 = bytes[27]; } if (bytes.isNotEmpty) { description_28 = bytes[28]; } if (bytes.isNotEmpty) { description_29 = bytes[29]; } if (bytes.isNotEmpty) { description_30 = bytes[30]; } if (bytes.isNotEmpty) { description_31 = bytes[31]; } if (bytes.isNotEmpty) { description_32 = bytes[32]; } if (bytes.isNotEmpty) { description_33 = bytes[33]; } if (bytes.isNotEmpty) { description_34 = bytes[34]; } if (bytes.isNotEmpty) { description_35 = bytes[35]; } if (bytes.isNotEmpty) { description_36 = bytes[36]; } if (bytes.isNotEmpty) { description_37 = bytes[37]; } if (bytes.isNotEmpty) { description_38 = bytes[38]; } if (bytes.isNotEmpty) { description_39 = bytes[39]; } if (bytes.isNotEmpty) { description_40 = bytes[40]; } if (bytes.isNotEmpty) { description_41 = bytes[41]; } if (bytes.isNotEmpty) { description_42 = bytes[42]; } if (bytes.isNotEmpty) { description_43 = bytes[43]; } if (bytes.isNotEmpty) { description_44 = bytes[44]; } if (bytes.isNotEmpty) { description_45 = bytes[45]; } if (bytes.isNotEmpty) { description_46 = bytes[46]; } if (bytes.isNotEmpty) { description_47 = bytes[47]; } if (bytes.isNotEmpty) { description_48 = bytes[48]; } if (bytes.isNotEmpty) { description_49 = bytes[49]; } if (bytes.isNotEmpty) { description_50 = bytes[50]; } if (bytes.isNotEmpty) { description_51 = bytes[51]; } if (bytes.isNotEmpty) { description_52 = bytes[52]; } if (bytes.isNotEmpty) { description_53 = bytes[53]; } if (bytes.isNotEmpty) { description_54 = bytes[54]; } if (bytes.isNotEmpty) { description_55 = bytes[55]; } if (bytes.isNotEmpty) { description_56 = bytes[56]; } if (bytes.isNotEmpty) { description_57 = bytes[57]; } if (bytes.isNotEmpty) { description_58 = bytes[58]; } if (bytes.isNotEmpty) { description_59 = bytes[59]; } if (bytes.isNotEmpty) { description_60 = bytes[60]; } if (bytes.isNotEmpty) { description_61 = bytes[61]; } if (bytes.isNotEmpty) { description_62 = bytes[62]; } if (bytes.isNotEmpty) { description_63 = bytes[63]; } if (bytes.isNotEmpty) { description_64 = bytes[64]; } if (bytes.isNotEmpty) { description_65 = bytes[65]; } if (bytes.isNotEmpty) { description_66 = bytes[66]; } if (bytes.isNotEmpty) { description_67 = bytes[67]; } if (bytes.isNotEmpty) { description_68 = bytes[68]; } if (bytes.isNotEmpty) { description_69 = bytes[69]; } if (bytes.isNotEmpty) { description_70 = bytes[70]; } if (bytes.isNotEmpty) { description_71 = bytes[71]; } if (bytes.isNotEmpty) { description_72 = bytes[72]; } if (bytes.isNotEmpty) { description_73 = bytes[73]; } if (bytes.isNotEmpty) { description_74 = bytes[74]; } if (bytes.isNotEmpty) { description_75 = bytes[75]; } if (bytes.isNotEmpty) { description_76 = bytes[76]; } if (bytes.isNotEmpty) { description_77 = bytes[77]; } if (bytes.isNotEmpty) { description_78 = bytes[78]; } if (bytes.isNotEmpty) { description_79 = bytes[79]; } if (bytes.isNotEmpty) { description_80 = bytes[80]; } if (bytes.isNotEmpty) { description_81 = bytes[81]; } if (bytes.isNotEmpty) { description_82 = bytes[82]; } if (bytes.isNotEmpty) { description_83 = bytes[83]; } if (bytes.isNotEmpty) { description_84 = bytes[84]; } if (bytes.isNotEmpty) { description_85 = bytes[85]; } if (bytes.isNotEmpty) { description_86 = bytes[86]; } if (bytes.isNotEmpty) { description_87 = bytes[87]; } if (bytes.isNotEmpty) { description_88 = bytes[88]; } if (bytes.isNotEmpty) { description_89 = bytes[89]; } if (bytes.isNotEmpty) { description_90 = bytes[90]; } if (bytes.isNotEmpty) { description_91 = bytes[91]; } if (bytes.isNotEmpty) { description_92 = bytes[92]; } if (bytes.isNotEmpty) { description_93 = bytes[93]; } if (bytes.isNotEmpty) { description_94 = bytes[94]; } if (bytes.isNotEmpty) { description_95 = bytes[95]; } if (bytes.isNotEmpty) { description_96 = bytes[96]; } if (bytes.isNotEmpty) { description_97 = bytes[97]; } if (bytes.isNotEmpty) { description_98 = bytes[98]; } if (bytes.isNotEmpty) { description_99 = bytes[99]; } if (bytes.isNotEmpty) { description_100 = bytes[100]; } if (bytes.isNotEmpty) { description_101 = bytes[101]; } if (bytes.isNotEmpty) { description_102 = bytes[102]; } if (bytes.isNotEmpty) { description_103 = bytes[103]; } if (bytes.isNotEmpty) { description_104 = bytes[104]; } if (bytes.isNotEmpty) { description_105 = bytes[105]; } if (bytes.isNotEmpty) { description_106 = bytes[106]; } if (bytes.isNotEmpty) { description_107 = bytes[107]; } if (bytes.isNotEmpty) { description_108 = bytes[108]; } if (bytes.isNotEmpty) { description_109 = bytes[109]; } if (bytes.isNotEmpty) { description_110 = bytes[110]; } if (bytes.isNotEmpty) { description_111 = bytes[111]; } if (bytes.isNotEmpty) { description_112 = bytes[112]; } if (bytes.isNotEmpty) { description_113 = bytes[113]; } if (bytes.isNotEmpty) { description_114 = bytes[114]; } if (bytes.isNotEmpty) { description_115 = bytes[115]; } if (bytes.isNotEmpty) { description_116 = bytes[116]; } if (bytes.isNotEmpty) { description_117 = bytes[117]; } if (bytes.isNotEmpty) { description_118 = bytes[118]; } if (bytes.isNotEmpty) { description_119 = bytes[119]; } if (bytes.isNotEmpty) { description_120 = bytes[120]; } if (bytes.isNotEmpty) { description_121 = bytes[121]; } if (bytes.isNotEmpty) { description_122 = bytes[122]; } if (bytes.isNotEmpty) { description_123 = bytes[123]; } if (bytes.isNotEmpty) { description_124 = bytes[124]; } if (bytes.isNotEmpty) { description_125 = bytes[125]; } if (bytes.isNotEmpty) { description_126 = bytes[126]; } if (bytes.isNotEmpty) { description_127 = bytes[127]; } if (bytes.isNotEmpty) { description_128 = bytes[128]; } if (bytes.isNotEmpty) { description_129 = bytes[129]; } if (bytes.isNotEmpty) { description_130 = bytes[130]; } if (bytes.isNotEmpty) { description_131 = bytes[131]; } if (bytes.isNotEmpty) { description_132 = bytes[132]; } if (bytes.isNotEmpty) { description_133 = bytes[133]; } if (bytes.isNotEmpty) { description_134 = bytes[134]; } if (bytes.isNotEmpty) { description_135 = bytes[135]; } if (bytes.isNotEmpty) { description_136 = bytes[136]; } if (bytes.isNotEmpty) { description_137 = bytes[137]; } if (bytes.isNotEmpty) { description_138 = bytes[138]; } if (bytes.isNotEmpty) { description_139 = bytes[139]; } if (bytes.isNotEmpty) { description_140 = bytes[140]; } if (bytes.isNotEmpty) { description_141 = bytes[141]; } if (bytes.isNotEmpty) { description_142 = bytes[142]; } if (bytes.isNotEmpty) { description_143 = bytes[143]; } if (bytes.isNotEmpty) { description_144 = bytes[144]; } if (bytes.isNotEmpty) { description_145 = bytes[145]; } if (bytes.isNotEmpty) { description_146 = bytes[146]; } if (bytes.isNotEmpty) { description_147 = bytes[147]; } if (bytes.isNotEmpty) { description_148 = bytes[148]; } if (bytes.isNotEmpty) { description_149 = bytes[149]; } if (bytes.isNotEmpty) { description_150 = bytes[150]; } if (bytes.isNotEmpty) { description_151 = bytes[151]; } if (bytes.isNotEmpty) { description_152 = bytes[152]; } if (bytes.isNotEmpty) { description_153 = bytes[153]; } if (bytes.isNotEmpty) { description_154 = bytes[154]; } if (bytes.isNotEmpty) { description_155 = bytes[155]; } if (bytes.isNotEmpty) { description_156 = bytes[156]; } if (bytes.isNotEmpty) { description_157 = bytes[157]; } if (bytes.isNotEmpty) { description_158 = bytes[158]; } if (bytes.isNotEmpty) { description_159 = bytes[159]; } if (bytes.isNotEmpty) { description_160 = bytes[160]; } if (bytes.isNotEmpty) { description_161 = bytes[161]; } if (bytes.isNotEmpty) { description_162 = bytes[162]; } if (bytes.isNotEmpty) { description_163 = bytes[163]; } if (bytes.isNotEmpty) { description_164 = bytes[164]; } if (bytes.isNotEmpty) { description_165 = bytes[165]; } if (bytes.isNotEmpty) { description_166 = bytes[166]; } if (bytes.isNotEmpty) { description_167 = bytes[167]; } if (bytes.isNotEmpty) { description_168 = bytes[168]; } if (bytes.isNotEmpty) { description_169 = bytes[169]; } if (bytes.isNotEmpty) { description_170 = bytes[170]; } if (bytes.isNotEmpty) { description_171 = bytes[171]; } if (bytes.isNotEmpty) { description_172 = bytes[172]; } if (bytes.isNotEmpty) { description_173 = bytes[173]; } if (bytes.isNotEmpty) { description_174 = bytes[174]; } if (bytes.isNotEmpty) { description_175 = bytes[175]; } if (bytes.isNotEmpty) { description_176 = bytes[176]; } if (bytes.isNotEmpty) { description_177 = bytes[177]; } if (bytes.isNotEmpty) { description_178 = bytes[178]; } if (bytes.isNotEmpty) { description_179 = bytes[179]; } if (bytes.isNotEmpty) { description_180 = bytes[180]; } if (bytes.isNotEmpty) { description_181 = bytes[181]; } if (bytes.isNotEmpty) { description_182 = bytes[182]; } if (bytes.isNotEmpty) { description_183 = bytes[183]; } if (bytes.isNotEmpty) { description_184 = bytes[184]; } if (bytes.isNotEmpty) { description_185 = bytes[185]; } if (bytes.isNotEmpty) { description_186 = bytes[186]; } if (bytes.isNotEmpty) { description_187 = bytes[187]; } if (bytes.isNotEmpty) { description_188 = bytes[188]; } if (bytes.isNotEmpty) { description_189 = bytes[189]; } if (bytes.isNotEmpty) { description_190 = bytes[190]; } if (bytes.isNotEmpty) { description_191 = bytes[191]; } if (bytes.isNotEmpty) { description_192 = bytes[192]; } if (bytes.isNotEmpty) { description_193 = bytes[193]; } if (bytes.isNotEmpty) { description_194 = bytes[194]; } if (bytes.isNotEmpty) { description_195 = bytes[195]; } if (bytes.isNotEmpty) { description_196 = bytes[196]; } if (bytes.isNotEmpty) { description_197 = bytes[197]; } if (bytes.isNotEmpty) { description_198 = bytes[198]; } if (bytes.isNotEmpty) { description_199 = bytes[199]; } if (bytes.isNotEmpty) { description_200 = bytes[200]; } if (bytes.isNotEmpty) { description_201 = bytes[201]; } if (bytes.isNotEmpty) { description_202 = bytes[202]; } if (bytes.isNotEmpty) { description_203 = bytes[203]; } if (bytes.isNotEmpty) { description_204 = bytes[204]; } if (bytes.isNotEmpty) { description_205 = bytes[205]; } if (bytes.isNotEmpty) { description_206 = bytes[206]; } if (bytes.isNotEmpty) { description_207 = bytes[207]; } if (bytes.isNotEmpty) { description_208 = bytes[208]; } if (bytes.isNotEmpty) { description_209 = bytes[209]; } if (bytes.isNotEmpty) { description_210 = bytes[210]; } if (bytes.isNotEmpty) { description_211 = bytes[211]; } if (bytes.isNotEmpty) { description_212 = bytes[212]; } if (bytes.isNotEmpty) { description_213 = bytes[213]; } if (bytes.isNotEmpty) { description_214 = bytes[214]; } if (bytes.isNotEmpty) { description_215 = bytes[215]; } if (bytes.isNotEmpty) { description_216 = bytes[216]; } if (bytes.isNotEmpty) { description_217 = bytes[217]; } if (bytes.isNotEmpty) { description_218 = bytes[218]; } if (bytes.isNotEmpty) { description_219 = bytes[219]; } if (bytes.isNotEmpty) { description_220 = bytes[220]; } if (bytes.isNotEmpty) { description_221 = bytes[221]; } if (bytes.isNotEmpty) { description_222 = bytes[222]; } if (bytes.isNotEmpty) { description_223 = bytes[223]; } if (bytes.isNotEmpty) { description_224 = bytes[224]; } if (bytes.isNotEmpty) { description_225 = bytes[225]; } if (bytes.isNotEmpty) { description_226 = bytes[226]; } if (bytes.isNotEmpty) { description_227 = bytes[227]; } if (bytes.isNotEmpty) { description_228 = bytes[228]; } if (bytes.isNotEmpty) { description_229 = bytes[229]; } if (bytes.isNotEmpty) { description_230 = bytes[230]; } if (bytes.isNotEmpty) { description_231 = bytes[231]; } if (bytes.isNotEmpty) { description_232 = bytes[232]; } if (bytes.isNotEmpty) { description_233 = bytes[233]; } if (bytes.isNotEmpty) { description_234 = bytes[234]; } if (bytes.isNotEmpty) { description_235 = bytes[235]; } if (bytes.isNotEmpty) { description_236 = bytes[236]; } if (bytes.isNotEmpty) { description_237 = bytes[237]; } if (bytes.isNotEmpty) { description_238 = bytes[238]; } if (bytes.isNotEmpty) { description_239 = bytes[239]; } if (bytes.isNotEmpty) { description_240 = bytes[240]; } if (bytes.isNotEmpty) { description_241 = bytes[241]; } if (bytes.isNotEmpty) { description_242 = bytes[242]; } if (bytes.isNotEmpty) { description_243 = bytes[243]; } if (bytes.isNotEmpty) { description_244 = bytes[244]; } if (bytes.isNotEmpty) { description_245 = bytes[245]; } if (bytes.isNotEmpty) { description_246 = bytes[246]; } if (bytes.isNotEmpty) { description_247 = bytes[247]; } if (bytes.isNotEmpty) { description_248 = bytes[248]; } if (bytes.isNotEmpty) { description_249 = bytes[249]; } if (bytes.isNotEmpty) { description_250 = bytes[250]; } if (bytes.isNotEmpty) { description_251 = bytes[251]; } if (bytes.isNotEmpty) { description_252 = bytes[252]; } if (bytes.isNotEmpty) { description_253 = bytes[253]; } if (bytes.isNotEmpty) { description_254 = bytes[254]; } if (bytes.isNotEmpty) { description_255 = bytes[255]; }
  }
  @Uint8() int layer_0; @Uint8() int layer_1; @Uint8() int layer_2; @Uint8() int layer_3; @Uint8() int layer_4; @Uint8() int layer_5; @Uint8() int layer_6; @Uint8() int layer_7; @Uint8() int layer_8; @Uint8() int layer_9; @Uint8() int layer_10; @Uint8() int layer_11; @Uint8() int layer_12; @Uint8() int layer_13; @Uint8() int layer_14; @Uint8() int layer_15; @Uint8() int layer_16; @Uint8() int layer_17; @Uint8() int layer_18; @Uint8() int layer_19; @Uint8() int layer_20; @Uint8() int layer_21; @Uint8() int layer_22; @Uint8() int layer_23; @Uint8() int layer_24; @Uint8() int layer_25; @Uint8() int layer_26; @Uint8() int layer_27; @Uint8() int layer_28; @Uint8() int layer_29; @Uint8() int layer_30; @Uint8() int layer_31; @Uint8() int layer_32; @Uint8() int layer_33; @Uint8() int layer_34; @Uint8() int layer_35; @Uint8() int layer_36; @Uint8() int layer_37; @Uint8() int layer_38; @Uint8() int layer_39; @Uint8() int layer_40; @Uint8() int layer_41; @Uint8() int layer_42; @Uint8() int layer_43; @Uint8() int layer_44; @Uint8() int layer_45; @Uint8() int layer_46; @Uint8() int layer_47; @Uint8() int layer_48; @Uint8() int layer_49; @Uint8() int layer_50; @Uint8() int layer_51; @Uint8() int layer_52; @Uint8() int layer_53; @Uint8() int layer_54; @Uint8() int layer_55; @Uint8() int layer_56; @Uint8() int layer_57; @Uint8() int layer_58; @Uint8() int layer_59; @Uint8() int layer_60; @Uint8() int layer_61; @Uint8() int layer_62; @Uint8() int layer_63; @Uint8() int layer_64; @Uint8() int layer_65; @Uint8() int layer_66; @Uint8() int layer_67; @Uint8() int layer_68; @Uint8() int layer_69; @Uint8() int layer_70; @Uint8() int layer_71; @Uint8() int layer_72; @Uint8() int layer_73; @Uint8() int layer_74; @Uint8() int layer_75; @Uint8() int layer_76; @Uint8() int layer_77; @Uint8() int layer_78; @Uint8() int layer_79; @Uint8() int layer_80; @Uint8() int layer_81; @Uint8() int layer_82; @Uint8() int layer_83; @Uint8() int layer_84; @Uint8() int layer_85; @Uint8() int layer_86; @Uint8() int layer_87; @Uint8() int layer_88; @Uint8() int layer_89; @Uint8() int layer_90; @Uint8() int layer_91; @Uint8() int layer_92; @Uint8() int layer_93; @Uint8() int layer_94; @Uint8() int layer_95; @Uint8() int layer_96; @Uint8() int layer_97; @Uint8() int layer_98; @Uint8() int layer_99; @Uint8() int layer_100; @Uint8() int layer_101; @Uint8() int layer_102; @Uint8() int layer_103; @Uint8() int layer_104; @Uint8() int layer_105; @Uint8() int layer_106; @Uint8() int layer_107; @Uint8() int layer_108; @Uint8() int layer_109; @Uint8() int layer_110; @Uint8() int layer_111; @Uint8() int layer_112; @Uint8() int layer_113; @Uint8() int layer_114; @Uint8() int layer_115; @Uint8() int layer_116; @Uint8() int layer_117; @Uint8() int layer_118; @Uint8() int layer_119; @Uint8() int layer_120; @Uint8() int layer_121; @Uint8() int layer_122; @Uint8() int layer_123; @Uint8() int layer_124; @Uint8() int layer_125; @Uint8() int layer_126; @Uint8() int layer_127; @Uint8() int layer_128; @Uint8() int layer_129; @Uint8() int layer_130; @Uint8() int layer_131; @Uint8() int layer_132; @Uint8() int layer_133; @Uint8() int layer_134; @Uint8() int layer_135; @Uint8() int layer_136; @Uint8() int layer_137; @Uint8() int layer_138; @Uint8() int layer_139; @Uint8() int layer_140; @Uint8() int layer_141; @Uint8() int layer_142; @Uint8() int layer_143; @Uint8() int layer_144; @Uint8() int layer_145; @Uint8() int layer_146; @Uint8() int layer_147; @Uint8() int layer_148; @Uint8() int layer_149; @Uint8() int layer_150; @Uint8() int layer_151; @Uint8() int layer_152; @Uint8() int layer_153; @Uint8() int layer_154; @Uint8() int layer_155; @Uint8() int layer_156; @Uint8() int layer_157; @Uint8() int layer_158; @Uint8() int layer_159; @Uint8() int layer_160; @Uint8() int layer_161; @Uint8() int layer_162; @Uint8() int layer_163; @Uint8() int layer_164; @Uint8() int layer_165; @Uint8() int layer_166; @Uint8() int layer_167; @Uint8() int layer_168; @Uint8() int layer_169; @Uint8() int layer_170; @Uint8() int layer_171; @Uint8() int layer_172; @Uint8() int layer_173; @Uint8() int layer_174; @Uint8() int layer_175; @Uint8() int layer_176; @Uint8() int layer_177; @Uint8() int layer_178; @Uint8() int layer_179; @Uint8() int layer_180; @Uint8() int layer_181; @Uint8() int layer_182; @Uint8() int layer_183; @Uint8() int layer_184; @Uint8() int layer_185; @Uint8() int layer_186; @Uint8() int layer_187; @Uint8() int layer_188; @Uint8() int layer_189; @Uint8() int layer_190; @Uint8() int layer_191; @Uint8() int layer_192; @Uint8() int layer_193; @Uint8() int layer_194; @Uint8() int layer_195; @Uint8() int layer_196; @Uint8() int layer_197; @Uint8() int layer_198; @Uint8() int layer_199; @Uint8() int layer_200; @Uint8() int layer_201; @Uint8() int layer_202; @Uint8() int layer_203; @Uint8() int layer_204; @Uint8() int layer_205; @Uint8() int layer_206; @Uint8() int layer_207; @Uint8() int layer_208; @Uint8() int layer_209; @Uint8() int layer_210; @Uint8() int layer_211; @Uint8() int layer_212; @Uint8() int layer_213; @Uint8() int layer_214; @Uint8() int layer_215; @Uint8() int layer_216; @Uint8() int layer_217; @Uint8() int layer_218; @Uint8() int layer_219; @Uint8() int layer_220; @Uint8() int layer_221; @Uint8() int layer_222; @Uint8() int layer_223; @Uint8() int layer_224; @Uint8() int layer_225; @Uint8() int layer_226; @Uint8() int layer_227; @Uint8() int layer_228; @Uint8() int layer_229; @Uint8() int layer_230; @Uint8() int layer_231; @Uint8() int layer_232; @Uint8() int layer_233; @Uint8() int layer_234; @Uint8() int layer_235; @Uint8() int layer_236; @Uint8() int layer_237; @Uint8() int layer_238; @Uint8() int layer_239; @Uint8() int layer_240; @Uint8() int layer_241; @Uint8() int layer_242; @Uint8() int layer_243; @Uint8() int layer_244; @Uint8() int layer_245; @Uint8() int layer_246; @Uint8() int layer_247; @Uint8() int layer_248; @Uint8() int layer_249; @Uint8() int layer_250; @Uint8() int layer_251; @Uint8() int layer_252; @Uint8() int layer_253; @Uint8() int layer_254; @Uint8() int layer_255;
  String get layer {
    var bytes = [layer_0, layer_1, layer_2, layer_3, layer_4, layer_5, layer_6, layer_7, layer_8, layer_9, layer_10, layer_11, layer_12, layer_13, layer_14, layer_15, layer_16, layer_17, layer_18, layer_19, layer_20, layer_21, layer_22, layer_23, layer_24, layer_25, layer_26, layer_27, layer_28, layer_29, layer_30, layer_31, layer_32, layer_33, layer_34, layer_35, layer_36, layer_37, layer_38, layer_39, layer_40, layer_41, layer_42, layer_43, layer_44, layer_45, layer_46, layer_47, layer_48, layer_49, layer_50, layer_51, layer_52, layer_53, layer_54, layer_55, layer_56, layer_57, layer_58, layer_59, layer_60, layer_61, layer_62, layer_63, layer_64, layer_65, layer_66, layer_67, layer_68, layer_69, layer_70, layer_71, layer_72, layer_73, layer_74, layer_75, layer_76, layer_77, layer_78, layer_79, layer_80, layer_81, layer_82, layer_83, layer_84, layer_85, layer_86, layer_87, layer_88, layer_89, layer_90, layer_91, layer_92, layer_93, layer_94, layer_95, layer_96, layer_97, layer_98, layer_99, layer_100, layer_101, layer_102, layer_103, layer_104, layer_105, layer_106, layer_107, layer_108, layer_109, layer_110, layer_111, layer_112, layer_113, layer_114, layer_115, layer_116, layer_117, layer_118, layer_119, layer_120, layer_121, layer_122, layer_123, layer_124, layer_125, layer_126, layer_127, layer_128, layer_129, layer_130, layer_131, layer_132, layer_133, layer_134, layer_135, layer_136, layer_137, layer_138, layer_139, layer_140, layer_141, layer_142, layer_143, layer_144, layer_145, layer_146, layer_147, layer_148, layer_149, layer_150, layer_151, layer_152, layer_153, layer_154, layer_155, layer_156, layer_157, layer_158, layer_159, layer_160, layer_161, layer_162, layer_163, layer_164, layer_165, layer_166, layer_167, layer_168, layer_169, layer_170, layer_171, layer_172, layer_173, layer_174, layer_175, layer_176, layer_177, layer_178, layer_179, layer_180, layer_181, layer_182, layer_183, layer_184, layer_185, layer_186, layer_187, layer_188, layer_189, layer_190, layer_191, layer_192, layer_193, layer_194, layer_195, layer_196, layer_197, layer_198, layer_199, layer_200, layer_201, layer_202, layer_203, layer_204, layer_205, layer_206, layer_207, layer_208, layer_209, layer_210, layer_211, layer_212, layer_213, layer_214, layer_215, layer_216, layer_217, layer_218, layer_219, layer_220, layer_221, layer_222, layer_223, layer_224, layer_225, layer_226, layer_227, layer_228, layer_229, layer_230, layer_231, layer_232, layer_233, layer_234, layer_235, layer_236, layer_237, layer_238, layer_239, layer_240, layer_241, layer_242, layer_243, layer_244, layer_245, layer_246, layer_247, layer_248, layer_249, layer_250, layer_251, layer_252, layer_253, layer_254, layer_255].takeWhile((b) => b > 0).toList();
    return Utf8Decoder().convert(bytes);
  }
  set layer(String value) {
    List<int> bytes =  Utf8Encoder().convert(value);
    if (bytes.isNotEmpty) { layer_0 = bytes[0]; } if (bytes.isNotEmpty) { layer_1 = bytes[1]; } if (bytes.isNotEmpty) { layer_2 = bytes[2]; } if (bytes.isNotEmpty) { layer_3 = bytes[3]; } if (bytes.isNotEmpty) { layer_4 = bytes[4]; } if (bytes.isNotEmpty) { layer_5 = bytes[5]; } if (bytes.isNotEmpty) { layer_6 = bytes[6]; } if (bytes.isNotEmpty) { layer_7 = bytes[7]; } if (bytes.isNotEmpty) { layer_8 = bytes[8]; } if (bytes.isNotEmpty) { layer_9 = bytes[9]; } if (bytes.isNotEmpty) { layer_10 = bytes[10]; } if (bytes.isNotEmpty) { layer_11 = bytes[11]; } if (bytes.isNotEmpty) { layer_12 = bytes[12]; } if (bytes.isNotEmpty) { layer_13 = bytes[13]; } if (bytes.isNotEmpty) { layer_14 = bytes[14]; } if (bytes.isNotEmpty) { layer_15 = bytes[15]; } if (bytes.isNotEmpty) { layer_16 = bytes[16]; } if (bytes.isNotEmpty) { layer_17 = bytes[17]; } if (bytes.isNotEmpty) { layer_18 = bytes[18]; } if (bytes.isNotEmpty) { layer_19 = bytes[19]; } if (bytes.isNotEmpty) { layer_20 = bytes[20]; } if (bytes.isNotEmpty) { layer_21 = bytes[21]; } if (bytes.isNotEmpty) { layer_22 = bytes[22]; } if (bytes.isNotEmpty) { layer_23 = bytes[23]; } if (bytes.isNotEmpty) { layer_24 = bytes[24]; } if (bytes.isNotEmpty) { layer_25 = bytes[25]; } if (bytes.isNotEmpty) { layer_26 = bytes[26]; } if (bytes.isNotEmpty) { layer_27 = bytes[27]; } if (bytes.isNotEmpty) { layer_28 = bytes[28]; } if (bytes.isNotEmpty) { layer_29 = bytes[29]; } if (bytes.isNotEmpty) { layer_30 = bytes[30]; } if (bytes.isNotEmpty) { layer_31 = bytes[31]; } if (bytes.isNotEmpty) { layer_32 = bytes[32]; } if (bytes.isNotEmpty) { layer_33 = bytes[33]; } if (bytes.isNotEmpty) { layer_34 = bytes[34]; } if (bytes.isNotEmpty) { layer_35 = bytes[35]; } if (bytes.isNotEmpty) { layer_36 = bytes[36]; } if (bytes.isNotEmpty) { layer_37 = bytes[37]; } if (bytes.isNotEmpty) { layer_38 = bytes[38]; } if (bytes.isNotEmpty) { layer_39 = bytes[39]; } if (bytes.isNotEmpty) { layer_40 = bytes[40]; } if (bytes.isNotEmpty) { layer_41 = bytes[41]; } if (bytes.isNotEmpty) { layer_42 = bytes[42]; } if (bytes.isNotEmpty) { layer_43 = bytes[43]; } if (bytes.isNotEmpty) { layer_44 = bytes[44]; } if (bytes.isNotEmpty) { layer_45 = bytes[45]; } if (bytes.isNotEmpty) { layer_46 = bytes[46]; } if (bytes.isNotEmpty) { layer_47 = bytes[47]; } if (bytes.isNotEmpty) { layer_48 = bytes[48]; } if (bytes.isNotEmpty) { layer_49 = bytes[49]; } if (bytes.isNotEmpty) { layer_50 = bytes[50]; } if (bytes.isNotEmpty) { layer_51 = bytes[51]; } if (bytes.isNotEmpty) { layer_52 = bytes[52]; } if (bytes.isNotEmpty) { layer_53 = bytes[53]; } if (bytes.isNotEmpty) { layer_54 = bytes[54]; } if (bytes.isNotEmpty) { layer_55 = bytes[55]; } if (bytes.isNotEmpty) { layer_56 = bytes[56]; } if (bytes.isNotEmpty) { layer_57 = bytes[57]; } if (bytes.isNotEmpty) { layer_58 = bytes[58]; } if (bytes.isNotEmpty) { layer_59 = bytes[59]; } if (bytes.isNotEmpty) { layer_60 = bytes[60]; } if (bytes.isNotEmpty) { layer_61 = bytes[61]; } if (bytes.isNotEmpty) { layer_62 = bytes[62]; } if (bytes.isNotEmpty) { layer_63 = bytes[63]; } if (bytes.isNotEmpty) { layer_64 = bytes[64]; } if (bytes.isNotEmpty) { layer_65 = bytes[65]; } if (bytes.isNotEmpty) { layer_66 = bytes[66]; } if (bytes.isNotEmpty) { layer_67 = bytes[67]; } if (bytes.isNotEmpty) { layer_68 = bytes[68]; } if (bytes.isNotEmpty) { layer_69 = bytes[69]; } if (bytes.isNotEmpty) { layer_70 = bytes[70]; } if (bytes.isNotEmpty) { layer_71 = bytes[71]; } if (bytes.isNotEmpty) { layer_72 = bytes[72]; } if (bytes.isNotEmpty) { layer_73 = bytes[73]; } if (bytes.isNotEmpty) { layer_74 = bytes[74]; } if (bytes.isNotEmpty) { layer_75 = bytes[75]; } if (bytes.isNotEmpty) { layer_76 = bytes[76]; } if (bytes.isNotEmpty) { layer_77 = bytes[77]; } if (bytes.isNotEmpty) { layer_78 = bytes[78]; } if (bytes.isNotEmpty) { layer_79 = bytes[79]; } if (bytes.isNotEmpty) { layer_80 = bytes[80]; } if (bytes.isNotEmpty) { layer_81 = bytes[81]; } if (bytes.isNotEmpty) { layer_82 = bytes[82]; } if (bytes.isNotEmpty) { layer_83 = bytes[83]; } if (bytes.isNotEmpty) { layer_84 = bytes[84]; } if (bytes.isNotEmpty) { layer_85 = bytes[85]; } if (bytes.isNotEmpty) { layer_86 = bytes[86]; } if (bytes.isNotEmpty) { layer_87 = bytes[87]; } if (bytes.isNotEmpty) { layer_88 = bytes[88]; } if (bytes.isNotEmpty) { layer_89 = bytes[89]; } if (bytes.isNotEmpty) { layer_90 = bytes[90]; } if (bytes.isNotEmpty) { layer_91 = bytes[91]; } if (bytes.isNotEmpty) { layer_92 = bytes[92]; } if (bytes.isNotEmpty) { layer_93 = bytes[93]; } if (bytes.isNotEmpty) { layer_94 = bytes[94]; } if (bytes.isNotEmpty) { layer_95 = bytes[95]; } if (bytes.isNotEmpty) { layer_96 = bytes[96]; } if (bytes.isNotEmpty) { layer_97 = bytes[97]; } if (bytes.isNotEmpty) { layer_98 = bytes[98]; } if (bytes.isNotEmpty) { layer_99 = bytes[99]; } if (bytes.isNotEmpty) { layer_100 = bytes[100]; } if (bytes.isNotEmpty) { layer_101 = bytes[101]; } if (bytes.isNotEmpty) { layer_102 = bytes[102]; } if (bytes.isNotEmpty) { layer_103 = bytes[103]; } if (bytes.isNotEmpty) { layer_104 = bytes[104]; } if (bytes.isNotEmpty) { layer_105 = bytes[105]; } if (bytes.isNotEmpty) { layer_106 = bytes[106]; } if (bytes.isNotEmpty) { layer_107 = bytes[107]; } if (bytes.isNotEmpty) { layer_108 = bytes[108]; } if (bytes.isNotEmpty) { layer_109 = bytes[109]; } if (bytes.isNotEmpty) { layer_110 = bytes[110]; } if (bytes.isNotEmpty) { layer_111 = bytes[111]; } if (bytes.isNotEmpty) { layer_112 = bytes[112]; } if (bytes.isNotEmpty) { layer_113 = bytes[113]; } if (bytes.isNotEmpty) { layer_114 = bytes[114]; } if (bytes.isNotEmpty) { layer_115 = bytes[115]; } if (bytes.isNotEmpty) { layer_116 = bytes[116]; } if (bytes.isNotEmpty) { layer_117 = bytes[117]; } if (bytes.isNotEmpty) { layer_118 = bytes[118]; } if (bytes.isNotEmpty) { layer_119 = bytes[119]; } if (bytes.isNotEmpty) { layer_120 = bytes[120]; } if (bytes.isNotEmpty) { layer_121 = bytes[121]; } if (bytes.isNotEmpty) { layer_122 = bytes[122]; } if (bytes.isNotEmpty) { layer_123 = bytes[123]; } if (bytes.isNotEmpty) { layer_124 = bytes[124]; } if (bytes.isNotEmpty) { layer_125 = bytes[125]; } if (bytes.isNotEmpty) { layer_126 = bytes[126]; } if (bytes.isNotEmpty) { layer_127 = bytes[127]; } if (bytes.isNotEmpty) { layer_128 = bytes[128]; } if (bytes.isNotEmpty) { layer_129 = bytes[129]; } if (bytes.isNotEmpty) { layer_130 = bytes[130]; } if (bytes.isNotEmpty) { layer_131 = bytes[131]; } if (bytes.isNotEmpty) { layer_132 = bytes[132]; } if (bytes.isNotEmpty) { layer_133 = bytes[133]; } if (bytes.isNotEmpty) { layer_134 = bytes[134]; } if (bytes.isNotEmpty) { layer_135 = bytes[135]; } if (bytes.isNotEmpty) { layer_136 = bytes[136]; } if (bytes.isNotEmpty) { layer_137 = bytes[137]; } if (bytes.isNotEmpty) { layer_138 = bytes[138]; } if (bytes.isNotEmpty) { layer_139 = bytes[139]; } if (bytes.isNotEmpty) { layer_140 = bytes[140]; } if (bytes.isNotEmpty) { layer_141 = bytes[141]; } if (bytes.isNotEmpty) { layer_142 = bytes[142]; } if (bytes.isNotEmpty) { layer_143 = bytes[143]; } if (bytes.isNotEmpty) { layer_144 = bytes[144]; } if (bytes.isNotEmpty) { layer_145 = bytes[145]; } if (bytes.isNotEmpty) { layer_146 = bytes[146]; } if (bytes.isNotEmpty) { layer_147 = bytes[147]; } if (bytes.isNotEmpty) { layer_148 = bytes[148]; } if (bytes.isNotEmpty) { layer_149 = bytes[149]; } if (bytes.isNotEmpty) { layer_150 = bytes[150]; } if (bytes.isNotEmpty) { layer_151 = bytes[151]; } if (bytes.isNotEmpty) { layer_152 = bytes[152]; } if (bytes.isNotEmpty) { layer_153 = bytes[153]; } if (bytes.isNotEmpty) { layer_154 = bytes[154]; } if (bytes.isNotEmpty) { layer_155 = bytes[155]; } if (bytes.isNotEmpty) { layer_156 = bytes[156]; } if (bytes.isNotEmpty) { layer_157 = bytes[157]; } if (bytes.isNotEmpty) { layer_158 = bytes[158]; } if (bytes.isNotEmpty) { layer_159 = bytes[159]; } if (bytes.isNotEmpty) { layer_160 = bytes[160]; } if (bytes.isNotEmpty) { layer_161 = bytes[161]; } if (bytes.isNotEmpty) { layer_162 = bytes[162]; } if (bytes.isNotEmpty) { layer_163 = bytes[163]; } if (bytes.isNotEmpty) { layer_164 = bytes[164]; } if (bytes.isNotEmpty) { layer_165 = bytes[165]; } if (bytes.isNotEmpty) { layer_166 = bytes[166]; } if (bytes.isNotEmpty) { layer_167 = bytes[167]; } if (bytes.isNotEmpty) { layer_168 = bytes[168]; } if (bytes.isNotEmpty) { layer_169 = bytes[169]; } if (bytes.isNotEmpty) { layer_170 = bytes[170]; } if (bytes.isNotEmpty) { layer_171 = bytes[171]; } if (bytes.isNotEmpty) { layer_172 = bytes[172]; } if (bytes.isNotEmpty) { layer_173 = bytes[173]; } if (bytes.isNotEmpty) { layer_174 = bytes[174]; } if (bytes.isNotEmpty) { layer_175 = bytes[175]; } if (bytes.isNotEmpty) { layer_176 = bytes[176]; } if (bytes.isNotEmpty) { layer_177 = bytes[177]; } if (bytes.isNotEmpty) { layer_178 = bytes[178]; } if (bytes.isNotEmpty) { layer_179 = bytes[179]; } if (bytes.isNotEmpty) { layer_180 = bytes[180]; } if (bytes.isNotEmpty) { layer_181 = bytes[181]; } if (bytes.isNotEmpty) { layer_182 = bytes[182]; } if (bytes.isNotEmpty) { layer_183 = bytes[183]; } if (bytes.isNotEmpty) { layer_184 = bytes[184]; } if (bytes.isNotEmpty) { layer_185 = bytes[185]; } if (bytes.isNotEmpty) { layer_186 = bytes[186]; } if (bytes.isNotEmpty) { layer_187 = bytes[187]; } if (bytes.isNotEmpty) { layer_188 = bytes[188]; } if (bytes.isNotEmpty) { layer_189 = bytes[189]; } if (bytes.isNotEmpty) { layer_190 = bytes[190]; } if (bytes.isNotEmpty) { layer_191 = bytes[191]; } if (bytes.isNotEmpty) { layer_192 = bytes[192]; } if (bytes.isNotEmpty) { layer_193 = bytes[193]; } if (bytes.isNotEmpty) { layer_194 = bytes[194]; } if (bytes.isNotEmpty) { layer_195 = bytes[195]; } if (bytes.isNotEmpty) { layer_196 = bytes[196]; } if (bytes.isNotEmpty) { layer_197 = bytes[197]; } if (bytes.isNotEmpty) { layer_198 = bytes[198]; } if (bytes.isNotEmpty) { layer_199 = bytes[199]; } if (bytes.isNotEmpty) { layer_200 = bytes[200]; } if (bytes.isNotEmpty) { layer_201 = bytes[201]; } if (bytes.isNotEmpty) { layer_202 = bytes[202]; } if (bytes.isNotEmpty) { layer_203 = bytes[203]; } if (bytes.isNotEmpty) { layer_204 = bytes[204]; } if (bytes.isNotEmpty) { layer_205 = bytes[205]; } if (bytes.isNotEmpty) { layer_206 = bytes[206]; } if (bytes.isNotEmpty) { layer_207 = bytes[207]; } if (bytes.isNotEmpty) { layer_208 = bytes[208]; } if (bytes.isNotEmpty) { layer_209 = bytes[209]; } if (bytes.isNotEmpty) { layer_210 = bytes[210]; } if (bytes.isNotEmpty) { layer_211 = bytes[211]; } if (bytes.isNotEmpty) { layer_212 = bytes[212]; } if (bytes.isNotEmpty) { layer_213 = bytes[213]; } if (bytes.isNotEmpty) { layer_214 = bytes[214]; } if (bytes.isNotEmpty) { layer_215 = bytes[215]; } if (bytes.isNotEmpty) { layer_216 = bytes[216]; } if (bytes.isNotEmpty) { layer_217 = bytes[217]; } if (bytes.isNotEmpty) { layer_218 = bytes[218]; } if (bytes.isNotEmpty) { layer_219 = bytes[219]; } if (bytes.isNotEmpty) { layer_220 = bytes[220]; } if (bytes.isNotEmpty) { layer_221 = bytes[221]; } if (bytes.isNotEmpty) { layer_222 = bytes[222]; } if (bytes.isNotEmpty) { layer_223 = bytes[223]; } if (bytes.isNotEmpty) { layer_224 = bytes[224]; } if (bytes.isNotEmpty) { layer_225 = bytes[225]; } if (bytes.isNotEmpty) { layer_226 = bytes[226]; } if (bytes.isNotEmpty) { layer_227 = bytes[227]; } if (bytes.isNotEmpty) { layer_228 = bytes[228]; } if (bytes.isNotEmpty) { layer_229 = bytes[229]; } if (bytes.isNotEmpty) { layer_230 = bytes[230]; } if (bytes.isNotEmpty) { layer_231 = bytes[231]; } if (bytes.isNotEmpty) { layer_232 = bytes[232]; } if (bytes.isNotEmpty) { layer_233 = bytes[233]; } if (bytes.isNotEmpty) { layer_234 = bytes[234]; } if (bytes.isNotEmpty) { layer_235 = bytes[235]; } if (bytes.isNotEmpty) { layer_236 = bytes[236]; } if (bytes.isNotEmpty) { layer_237 = bytes[237]; } if (bytes.isNotEmpty) { layer_238 = bytes[238]; } if (bytes.isNotEmpty) { layer_239 = bytes[239]; } if (bytes.isNotEmpty) { layer_240 = bytes[240]; } if (bytes.isNotEmpty) { layer_241 = bytes[241]; } if (bytes.isNotEmpty) { layer_242 = bytes[242]; } if (bytes.isNotEmpty) { layer_243 = bytes[243]; } if (bytes.isNotEmpty) { layer_244 = bytes[244]; } if (bytes.isNotEmpty) { layer_245 = bytes[245]; } if (bytes.isNotEmpty) { layer_246 = bytes[246]; } if (bytes.isNotEmpty) { layer_247 = bytes[247]; } if (bytes.isNotEmpty) { layer_248 = bytes[248]; } if (bytes.isNotEmpty) { layer_249 = bytes[249]; } if (bytes.isNotEmpty) { layer_250 = bytes[250]; } if (bytes.isNotEmpty) { layer_251 = bytes[251]; } if (bytes.isNotEmpty) { layer_252 = bytes[252]; } if (bytes.isNotEmpty) { layer_253 = bytes[253]; } if (bytes.isNotEmpty) { layer_254 = bytes[254]; } if (bytes.isNotEmpty) { layer_255 = bytes[255]; }
  }
}

class VkSamplerCustomBorderColorCreateInfoEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int format;
}

class VkPhysicalDeviceCustomBorderColorPropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxCustomBorderColorSamplers;
}

class VkPhysicalDeviceCustomBorderColorFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int customBorderColors;
  @Uint32() int customBorderColorWithoutFormat;
}

class VkDeviceOrHostAddressKHR extends Struct {
}

class VkDeviceOrHostAddressKHRDeviceAddress extends Struct {
  @Uint64() int deviceAddress;
}

class VkDeviceOrHostAddressKHRHostAddress extends Struct {
  Pointer hostAddress;
}

class VkDeviceOrHostAddressConstKHR extends Struct {
}

class VkDeviceOrHostAddressConstKHRDeviceAddress extends Struct {
  @Uint64() int deviceAddress;
}

class VkDeviceOrHostAddressConstKHRHostAddress extends Struct {
  Pointer hostAddress;
}

class VkAccelerationStructureGeometryTrianglesDataKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int vertexFormat;
  @Uint64() int vertexStride;
  @Int32() int indexType;
}

class VkAccelerationStructureGeometryAabbsDataKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int stride;
}

class VkAccelerationStructureGeometryInstancesDataKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int arrayOfPointers;
}

class VkAccelerationStructureGeometryDataKHR extends Struct {
}

class VkAccelerationStructureGeometryDataKHRTriangles extends Struct {
  @Int32() int triangles_sType;
  Pointer triangles_pNext;
  @Int32() int triangles_vertexFormat;
  @Uint64() int triangles_vertexStride;
  @Int32() int triangles_indexType;
}

class VkAccelerationStructureGeometryDataKHRAabbs extends Struct {
  @Int32() int aabbs_sType;
  Pointer aabbs_pNext;
  @Uint64() int aabbs_stride;
}

class VkAccelerationStructureGeometryDataKHRInstances extends Struct {
  @Int32() int instances_sType;
  Pointer instances_pNext;
  @Uint32() int instances_arrayOfPointers;
}

class VkAccelerationStructureGeometryKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int geometryType;
  @Uint32() int flags;
}

class VkAccelerationStructureBuildGeometryInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int type;
  @Uint32() int flags;
  @Uint32() int update;
  Pointer<VkAccelerationStructureKHR> srcAccelerationStructure;
  Pointer<VkAccelerationStructureKHR> dstAccelerationStructure;
  @Uint32() int geometryArrayOfPointers;
  @Uint32() int geometryCount;
  Pointer ppGeometries;
}

class VkAccelerationStructureBuildOffsetInfoKHR extends Struct {
  @Uint32() int primitiveCount;
  @Uint32() int primitiveOffset;
  @Uint32() int firstVertex;
  @Uint32() int transformOffset;
}

class VkAccelerationStructureCreateGeometryTypeInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int geometryType;
  @Uint32() int maxPrimitiveCount;
  @Int32() int indexType;
  @Uint32() int maxVertexCount;
  @Int32() int vertexFormat;
  @Uint32() int allowsTransforms;
}

class VkAccelerationStructureCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int compactedSize;
  @Int32() int type;
  @Uint32() int flags;
  @Uint32() int maxGeometryCount;
  Pointer<VkAccelerationStructureCreateGeometryTypeInfoKHR> pGeometryInfos;
  @Uint64() int deviceAddress;
}

class VkAabbPositionsKHR extends Struct {
  @Float() double minX;
  @Float() double minY;
  @Float() double minZ;
  @Float() double maxX;
  @Float() double maxY;
  @Float() double maxZ;
}

class VkAabbPositionsNV extends Struct {
}

class VkTransformMatrixKHR extends Struct {
  @Float() double matrix_0; @Float() double matrix_1; @Float() double matrix_2; @Float() double matrix_3; @Float() double matrix_4; @Float() double matrix_5; @Float() double matrix_6; @Float() double matrix_7; @Float() double matrix_8; @Float() double matrix_9; @Float() double matrix_10; @Float() double matrix_11;
}

class VkTransformMatrixNV extends Struct {
}

class VkAccelerationStructureInstanceKHR extends Struct {
  @Float() double transform_matrix_0; @Float() double transform_matrix_1; @Float() double transform_matrix_2; @Float() double transform_matrix_3; @Float() double transform_matrix_4; @Float() double transform_matrix_5; @Float() double transform_matrix_6; @Float() double transform_matrix_7; @Float() double transform_matrix_8; @Float() double transform_matrix_9; @Float() double transform_matrix_10; @Float() double transform_matrix_11;
  @Uint32() int instanceCustomIndex;
  @Uint32() int mask;
  @Uint32() int instanceShaderBindingTableRecordOffset;
  @Uint32() int flags;
  @Uint64() int accelerationStructureReference;
}

class VkAccelerationStructureInstanceNV extends Struct {
}

class VkAccelerationStructureDeviceAddressInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkAccelerationStructureKHR> accelerationStructure;
}

class VkAccelerationStructureVersionKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer versionData;
}

class VkCopyAccelerationStructureInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkAccelerationStructureKHR> src;
  Pointer<VkAccelerationStructureKHR> dst;
  @Int32() int mode;
}

class VkCopyAccelerationStructureToMemoryInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkAccelerationStructureKHR> src;
  @Int32() int mode;
}

class VkCopyMemoryToAccelerationStructureInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkAccelerationStructureKHR> dst;
  @Int32() int mode;
}

class VkRayTracingPipelineInterfaceCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int maxPayloadSize;
  @Uint32() int maxAttributeSize;
  @Uint32() int maxCallableSize;
}

class VkDeferredOperationInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  Pointer<VkDeferredOperationKHR> operationHandle;
}

class VkPipelineLibraryCreateInfoKHR extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int libraryCount;
  Pointer<Pointer<VkPipeline>> pLibraries;
}

class VkPhysicalDeviceExtendedDynamicStateFeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int extendedDynamicState;
}

class VkRenderPassTransformBeginInfoQCOM extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int transform;
}

class VkCommandBufferInheritanceRenderPassTransformInfoQCOM extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Int32() int transform;
  @Int32() int renderArea_offset_x;
  @Int32() int renderArea_offset_y;
  @Uint32() int renderArea_extent_width;
  @Uint32() int renderArea_extent_height;
}

class VkPhysicalDeviceDiagnosticsConfigFeaturesNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int diagnosticsConfig;
}

class VkDeviceDiagnosticsConfigCreateInfoNV extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int flags;
}

class VkPhysicalDeviceRobustness2FeaturesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint32() int robustBufferAccess2;
  @Uint32() int robustImageAccess2;
  @Uint32() int nullDescriptor;
}

class VkPhysicalDeviceRobustness2PropertiesEXT extends Struct {
  @Int32() int sType;
  Pointer pNext;
  @Uint64() int robustStorageBufferAccessSizeAlignment;
  @Uint64() int robustUniformBufferAccessSizeAlignment;
}

//null
typedef VkCreateInstanceNative = Int32 Function(Pointer<VkInstanceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkInstance>> pInstance);
typedef VkCreateInstance = int Function(Pointer<VkInstanceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkInstance>> pInstance);

typedef VkDestroyInstanceNative = Void Function(Pointer<VkInstance> instance, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyInstance = void Function(Pointer<VkInstance> instance, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkEnumeratePhysicalDevicesNative = Int32 Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceCount, Pointer<Pointer<VkPhysicalDevice>> pPhysicalDevices);
typedef VkEnumeratePhysicalDevices = int Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceCount, Pointer<Pointer<VkPhysicalDevice>> pPhysicalDevices);

typedef VkGetDeviceProcAddrNative = Pointer Function(Pointer<VkDevice> device, Pointer pName);
typedef VkGetDeviceProcAddr = Pointer Function(Pointer<VkDevice> device, Pointer pName);

typedef VkGetInstanceProcAddrNative = Pointer Function(Pointer<VkInstance> instance, Pointer pName);
typedef VkGetInstanceProcAddr = Pointer Function(Pointer<VkInstance> instance, Pointer pName);

typedef VkGetPhysicalDevicePropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties> pProperties);
typedef VkGetPhysicalDeviceProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties> pProperties);

typedef VkGetPhysicalDeviceQueueFamilyPropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties> pQueueFamilyProperties);
typedef VkGetPhysicalDeviceQueueFamilyProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties> pQueueFamilyProperties);

typedef VkGetPhysicalDeviceMemoryPropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties> pMemoryProperties);
typedef VkGetPhysicalDeviceMemoryProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties> pMemoryProperties);

typedef VkGetPhysicalDeviceFeaturesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures> pFeatures);
typedef VkGetPhysicalDeviceFeatures = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures> pFeatures);

typedef VkGetPhysicalDeviceFormatPropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Pointer<VkFormatProperties> pFormatProperties);
typedef VkGetPhysicalDeviceFormatProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, int format, Pointer<VkFormatProperties> pFormatProperties);

typedef VkGetPhysicalDeviceImageFormatPropertiesNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Int32 type, Int32 tiling, Uint32 usage, Uint32 flags, Pointer<VkImageFormatProperties> pImageFormatProperties);
typedef VkGetPhysicalDeviceImageFormatProperties = int Function(Pointer<VkPhysicalDevice> physicalDevice, int format, int type, int tiling, int usage, int flags, Pointer<VkImageFormatProperties> pImageFormatProperties);

typedef VkCreateDeviceNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDeviceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDevice>> pDevice);
typedef VkCreateDevice = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDeviceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDevice>> pDevice);

typedef VkDestroyDeviceNative = Void Function(Pointer<VkDevice> device, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDevice = void Function(Pointer<VkDevice> device, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkEnumerateInstanceVersionNative = Int32 Function(Pointer pApiVersion);
typedef VkEnumerateInstanceVersion = int Function(Pointer pApiVersion);

typedef VkEnumerateInstanceLayerPropertiesNative = Int32 Function(Pointer pPropertyCount, Pointer<VkLayerProperties> pProperties);
typedef VkEnumerateInstanceLayerProperties = int Function(Pointer pPropertyCount, Pointer<VkLayerProperties> pProperties);

typedef VkEnumerateInstanceExtensionPropertiesNative = Int32 Function(Pointer pLayerName, Pointer pPropertyCount, Pointer<VkExtensionProperties> pProperties);
typedef VkEnumerateInstanceExtensionProperties = int Function(Pointer pLayerName, Pointer pPropertyCount, Pointer<VkExtensionProperties> pProperties);

typedef VkEnumerateDeviceLayerPropertiesNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkLayerProperties> pProperties);
typedef VkEnumerateDeviceLayerProperties = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkLayerProperties> pProperties);

typedef VkEnumerateDeviceExtensionPropertiesNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pLayerName, Pointer pPropertyCount, Pointer<VkExtensionProperties> pProperties);
typedef VkEnumerateDeviceExtensionProperties = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pLayerName, Pointer pPropertyCount, Pointer<VkExtensionProperties> pProperties);

typedef VkGetDeviceQueueNative = Void Function(Pointer<VkDevice> device, Uint32 queueFamilyIndex, Uint32 queueIndex, Pointer<Pointer<VkQueue>> pQueue);
typedef VkGetDeviceQueue = void Function(Pointer<VkDevice> device, int queueFamilyIndex, int queueIndex, Pointer<Pointer<VkQueue>> pQueue);

typedef VkQueueSubmitNative = Int32 Function(Pointer<VkQueue> queue, Uint32 submitCount, Pointer<VkSubmitInfo> pSubmits, Pointer<VkFence> fence);
typedef VkQueueSubmit = int Function(Pointer<VkQueue> queue, int submitCount, Pointer<VkSubmitInfo> pSubmits, Pointer<VkFence> fence);

typedef VkQueueWaitIdleNative = Int32 Function(Pointer<VkQueue> queue);
typedef VkQueueWaitIdle = int Function(Pointer<VkQueue> queue);

typedef VkDeviceWaitIdleNative = Int32 Function(Pointer<VkDevice> device);
typedef VkDeviceWaitIdle = int Function(Pointer<VkDevice> device);

typedef VkAllocateMemoryNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkMemoryAllocateInfo> pAllocateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDeviceMemory>> pMemory);
typedef VkAllocateMemory = int Function(Pointer<VkDevice> device, Pointer<VkMemoryAllocateInfo> pAllocateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDeviceMemory>> pMemory);

typedef VkFreeMemoryNative = Void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkFreeMemory = void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkMapMemoryNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Uint64 offset, Uint64 size, Uint32 flags, Pointer ppData);
typedef VkMapMemory = int Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, int offset, int size, int flags, Pointer ppData);

typedef VkUnmapMemoryNative = Void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory);
typedef VkUnmapMemory = void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory);

typedef VkFlushMappedMemoryRangesNative = Int32 Function(Pointer<VkDevice> device, Uint32 memoryRangeCount, Pointer<VkMappedMemoryRange> pMemoryRanges);
typedef VkFlushMappedMemoryRanges = int Function(Pointer<VkDevice> device, int memoryRangeCount, Pointer<VkMappedMemoryRange> pMemoryRanges);

typedef VkInvalidateMappedMemoryRangesNative = Int32 Function(Pointer<VkDevice> device, Uint32 memoryRangeCount, Pointer<VkMappedMemoryRange> pMemoryRanges);
typedef VkInvalidateMappedMemoryRanges = int Function(Pointer<VkDevice> device, int memoryRangeCount, Pointer<VkMappedMemoryRange> pMemoryRanges);

typedef VkGetDeviceMemoryCommitmentNative = Void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Pointer pCommittedMemoryInBytes);
typedef VkGetDeviceMemoryCommitment = void Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Pointer pCommittedMemoryInBytes);

typedef VkGetBufferMemoryRequirementsNative = Void Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkMemoryRequirements> pMemoryRequirements);
typedef VkGetBufferMemoryRequirements = void Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkMemoryRequirements> pMemoryRequirements);

typedef VkBindBufferMemoryNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkDeviceMemory> memory, Uint64 memoryOffset);
typedef VkBindBufferMemory = int Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkDeviceMemory> memory, int memoryOffset);

typedef VkGetImageMemoryRequirementsNative = Void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkMemoryRequirements> pMemoryRequirements);
typedef VkGetImageMemoryRequirements = void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkMemoryRequirements> pMemoryRequirements);

typedef VkBindImageMemoryNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkDeviceMemory> memory, Uint64 memoryOffset);
typedef VkBindImageMemory = int Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkDeviceMemory> memory, int memoryOffset);

typedef VkGetImageSparseMemoryRequirementsNative = Void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements> pSparseMemoryRequirements);
typedef VkGetImageSparseMemoryRequirements = void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements> pSparseMemoryRequirements);

typedef VkGetPhysicalDeviceSparseImageFormatPropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Int32 type, Int32 samples, Uint32 usage, Int32 tiling, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties> pProperties);
typedef VkGetPhysicalDeviceSparseImageFormatProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, int format, int type, int samples, int usage, int tiling, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties> pProperties);

typedef VkQueueBindSparseNative = Int32 Function(Pointer<VkQueue> queue, Uint32 bindInfoCount, Pointer<VkBindSparseInfo> pBindInfo, Pointer<VkFence> fence);
typedef VkQueueBindSparse = int Function(Pointer<VkQueue> queue, int bindInfoCount, Pointer<VkBindSparseInfo> pBindInfo, Pointer<VkFence> fence);

typedef VkCreateFenceNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkFenceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);
typedef VkCreateFence = int Function(Pointer<VkDevice> device, Pointer<VkFenceCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);

typedef VkDestroyFenceNative = Void Function(Pointer<VkDevice> device, Pointer<VkFence> fence, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyFence = void Function(Pointer<VkDevice> device, Pointer<VkFence> fence, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkResetFencesNative = Int32 Function(Pointer<VkDevice> device, Uint32 fenceCount, Pointer<Pointer<VkFence>> pFences);
typedef VkResetFences = int Function(Pointer<VkDevice> device, int fenceCount, Pointer<Pointer<VkFence>> pFences);

typedef VkGetFenceStatusNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkFence> fence);
typedef VkGetFenceStatus = int Function(Pointer<VkDevice> device, Pointer<VkFence> fence);

typedef VkWaitForFencesNative = Int32 Function(Pointer<VkDevice> device, Uint32 fenceCount, Pointer<Pointer<VkFence>> pFences, Uint32 waitAll, Uint64 timeout);
typedef VkWaitForFences = int Function(Pointer<VkDevice> device, int fenceCount, Pointer<Pointer<VkFence>> pFences, int waitAll, int timeout);

typedef VkCreateSemaphoreNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSemaphore>> pSemaphore);
typedef VkCreateSemaphore = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSemaphore>> pSemaphore);

typedef VkDestroySemaphoreNative = Void Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySemaphore = void Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateEventNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkEventCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkEvent>> pEvent);
typedef VkCreateEvent = int Function(Pointer<VkDevice> device, Pointer<VkEventCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkEvent>> pEvent);

typedef VkDestroyEventNative = Void Function(Pointer<VkDevice> device, Pointer<VkEvent> event, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyEvent = void Function(Pointer<VkDevice> device, Pointer<VkEvent> event, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetEventStatusNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkEvent> event);
typedef VkGetEventStatus = int Function(Pointer<VkDevice> device, Pointer<VkEvent> event);

typedef VkSetEventNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkEvent> event);
typedef VkSetEvent = int Function(Pointer<VkDevice> device, Pointer<VkEvent> event);

typedef VkResetEventNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkEvent> event);
typedef VkResetEvent = int Function(Pointer<VkDevice> device, Pointer<VkEvent> event);

typedef VkCreateQueryPoolNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkQueryPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkQueryPool>> pQueryPool);
typedef VkCreateQueryPool = int Function(Pointer<VkDevice> device, Pointer<VkQueryPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkQueryPool>> pQueryPool);

typedef VkDestroyQueryPoolNative = Void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyQueryPool = void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetQueryPoolResultsNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, Uint32 firstQuery, Uint32 queryCount, Uint64 dataSize, Pointer pData, Uint64 stride, Uint32 flags);
typedef VkGetQueryPoolResults = int Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, int firstQuery, int queryCount, int dataSize, Pointer pData, int stride, int flags);

typedef VkResetQueryPoolNative = Void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, Uint32 firstQuery, Uint32 queryCount);
typedef VkResetQueryPool = void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, int firstQuery, int queryCount);

typedef VkResetQueryPoolEXTNative = Void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, Uint32 firstQuery, Uint32 queryCount);
typedef VkResetQueryPoolEXT = void Function(Pointer<VkDevice> device, Pointer<VkQueryPool> queryPool, int firstQuery, int queryCount);

typedef VkCreateBufferNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkBufferCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkBuffer>> pBuffer);
typedef VkCreateBuffer = int Function(Pointer<VkDevice> device, Pointer<VkBufferCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkBuffer>> pBuffer);

typedef VkDestroyBufferNative = Void Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyBuffer = void Function(Pointer<VkDevice> device, Pointer<VkBuffer> buffer, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateBufferViewNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkBufferViewCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkBufferView>> pView);
typedef VkCreateBufferView = int Function(Pointer<VkDevice> device, Pointer<VkBufferViewCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkBufferView>> pView);

typedef VkDestroyBufferViewNative = Void Function(Pointer<VkDevice> device, Pointer<VkBufferView> bufferView, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyBufferView = void Function(Pointer<VkDevice> device, Pointer<VkBufferView> bufferView, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateImageNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImageCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkImage>> pImage);
typedef VkCreateImage = int Function(Pointer<VkDevice> device, Pointer<VkImageCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkImage>> pImage);

typedef VkDestroyImageNative = Void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyImage = void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetImageSubresourceLayoutNative = Void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkImageSubresource> pSubresource, Pointer<VkSubresourceLayout> pLayout);
typedef VkGetImageSubresourceLayout = void Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkImageSubresource> pSubresource, Pointer<VkSubresourceLayout> pLayout);

typedef VkCreateImageViewNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImageViewCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkImageView>> pView);
typedef VkCreateImageView = int Function(Pointer<VkDevice> device, Pointer<VkImageViewCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkImageView>> pView);

typedef VkDestroyImageViewNative = Void Function(Pointer<VkDevice> device, Pointer<VkImageView> imageView, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyImageView = void Function(Pointer<VkDevice> device, Pointer<VkImageView> imageView, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateShaderModuleNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkShaderModuleCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkShaderModule>> pShaderModule);
typedef VkCreateShaderModule = int Function(Pointer<VkDevice> device, Pointer<VkShaderModuleCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkShaderModule>> pShaderModule);

typedef VkDestroyShaderModuleNative = Void Function(Pointer<VkDevice> device, Pointer<VkShaderModule> shaderModule, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyShaderModule = void Function(Pointer<VkDevice> device, Pointer<VkShaderModule> shaderModule, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreatePipelineCacheNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCacheCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipelineCache>> pPipelineCache);
typedef VkCreatePipelineCache = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCacheCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipelineCache>> pPipelineCache);

typedef VkDestroyPipelineCacheNative = Void Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyPipelineCache = void Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetPipelineCacheDataNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Pointer pDataSize, Pointer pData);
typedef VkGetPipelineCacheData = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Pointer pDataSize, Pointer pData);

typedef VkMergePipelineCachesNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> dstCache, Uint32 srcCacheCount, Pointer<Pointer<VkPipelineCache>> pSrcCaches);
typedef VkMergePipelineCaches = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> dstCache, int srcCacheCount, Pointer<Pointer<VkPipelineCache>> pSrcCaches);

typedef VkCreateGraphicsPipelinesNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Uint32 createInfoCount, Pointer<VkGraphicsPipelineCreateInfo> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);
typedef VkCreateGraphicsPipelines = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, int createInfoCount, Pointer<VkGraphicsPipelineCreateInfo> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);

typedef VkCreateComputePipelinesNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Uint32 createInfoCount, Pointer<VkComputePipelineCreateInfo> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);
typedef VkCreateComputePipelines = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, int createInfoCount, Pointer<VkComputePipelineCreateInfo> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);

typedef VkDestroyPipelineNative = Void Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyPipeline = void Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreatePipelineLayoutNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineLayoutCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipelineLayout>> pPipelineLayout);
typedef VkCreatePipelineLayout = int Function(Pointer<VkDevice> device, Pointer<VkPipelineLayoutCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipelineLayout>> pPipelineLayout);

typedef VkDestroyPipelineLayoutNative = Void Function(Pointer<VkDevice> device, Pointer<VkPipelineLayout> pipelineLayout, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyPipelineLayout = void Function(Pointer<VkDevice> device, Pointer<VkPipelineLayout> pipelineLayout, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateSamplerNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSamplerCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSampler>> pSampler);
typedef VkCreateSampler = int Function(Pointer<VkDevice> device, Pointer<VkSamplerCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSampler>> pSampler);

typedef VkDestroySamplerNative = Void Function(Pointer<VkDevice> device, Pointer<VkSampler> sampler, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySampler = void Function(Pointer<VkDevice> device, Pointer<VkSampler> sampler, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateDescriptorSetLayoutNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorSetLayout>> pSetLayout);
typedef VkCreateDescriptorSetLayout = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorSetLayout>> pSetLayout);

typedef VkDestroyDescriptorSetLayoutNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayout> descriptorSetLayout, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDescriptorSetLayout = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayout> descriptorSetLayout, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateDescriptorPoolNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorPool>> pDescriptorPool);
typedef VkCreateDescriptorPool = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorPool>> pDescriptorPool);

typedef VkDestroyDescriptorPoolNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDescriptorPool = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkResetDescriptorPoolNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, Uint32 flags);
typedef VkResetDescriptorPool = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, int flags);

typedef VkAllocateDescriptorSetsNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetAllocateInfo> pAllocateInfo, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets);
typedef VkAllocateDescriptorSets = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetAllocateInfo> pAllocateInfo, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets);

typedef VkFreeDescriptorSetsNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, Uint32 descriptorSetCount, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets);
typedef VkFreeDescriptorSets = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorPool> descriptorPool, int descriptorSetCount, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets);

typedef VkUpdateDescriptorSetsNative = Void Function(Pointer<VkDevice> device, Uint32 descriptorWriteCount, Pointer<VkWriteDescriptorSet> pDescriptorWrites, Uint32 descriptorCopyCount, Pointer<VkCopyDescriptorSet> pDescriptorCopies);
typedef VkUpdateDescriptorSets = void Function(Pointer<VkDevice> device, int descriptorWriteCount, Pointer<VkWriteDescriptorSet> pDescriptorWrites, int descriptorCopyCount, Pointer<VkCopyDescriptorSet> pDescriptorCopies);

typedef VkCreateFramebufferNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkFramebufferCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFramebuffer>> pFramebuffer);
typedef VkCreateFramebuffer = int Function(Pointer<VkDevice> device, Pointer<VkFramebufferCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFramebuffer>> pFramebuffer);

typedef VkDestroyFramebufferNative = Void Function(Pointer<VkDevice> device, Pointer<VkFramebuffer> framebuffer, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyFramebuffer = void Function(Pointer<VkDevice> device, Pointer<VkFramebuffer> framebuffer, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkCreateRenderPassNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);
typedef VkCreateRenderPass = int Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);

typedef VkDestroyRenderPassNative = Void Function(Pointer<VkDevice> device, Pointer<VkRenderPass> renderPass, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyRenderPass = void Function(Pointer<VkDevice> device, Pointer<VkRenderPass> renderPass, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetRenderAreaGranularityNative = Void Function(Pointer<VkDevice> device, Pointer<VkRenderPass> renderPass, Pointer<VkExtent2D> pGranularity);
typedef VkGetRenderAreaGranularity = void Function(Pointer<VkDevice> device, Pointer<VkRenderPass> renderPass, Pointer<VkExtent2D> pGranularity);

typedef VkCreateCommandPoolNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCommandPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkCommandPool>> pCommandPool);
typedef VkCreateCommandPool = int Function(Pointer<VkDevice> device, Pointer<VkCommandPoolCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkCommandPool>> pCommandPool);

typedef VkDestroyCommandPoolNative = Void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyCommandPool = void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkResetCommandPoolNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Uint32 flags);
typedef VkResetCommandPool = int Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, int flags);

typedef VkAllocateCommandBuffersNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCommandBufferAllocateInfo> pAllocateInfo, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);
typedef VkAllocateCommandBuffers = int Function(Pointer<VkDevice> device, Pointer<VkCommandBufferAllocateInfo> pAllocateInfo, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);

typedef VkFreeCommandBuffersNative = Void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Uint32 commandBufferCount, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);
typedef VkFreeCommandBuffers = void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, int commandBufferCount, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);

typedef VkBeginCommandBufferNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCommandBufferBeginInfo> pBeginInfo);
typedef VkBeginCommandBuffer = int Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCommandBufferBeginInfo> pBeginInfo);

typedef VkEndCommandBufferNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer);
typedef VkEndCommandBuffer = int Function(Pointer<VkCommandBuffer> commandBuffer);

typedef VkResetCommandBufferNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 flags);
typedef VkResetCommandBuffer = int Function(Pointer<VkCommandBuffer> commandBuffer, int flags);

typedef VkCmdBindPipelineNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineBindPoint, Pointer<VkPipeline> pipeline);
typedef VkCmdBindPipeline = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineBindPoint, Pointer<VkPipeline> pipeline);

typedef VkCmdSetViewportNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstViewport, Uint32 viewportCount, Pointer<VkViewport> pViewports);
typedef VkCmdSetViewport = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstViewport, int viewportCount, Pointer<VkViewport> pViewports);

typedef VkCmdSetScissorNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstScissor, Uint32 scissorCount, Pointer<VkRect2D> pScissors);
typedef VkCmdSetScissor = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstScissor, int scissorCount, Pointer<VkRect2D> pScissors);

typedef VkCmdSetLineWidthNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Float lineWidth);
typedef VkCmdSetLineWidth = void Function(Pointer<VkCommandBuffer> commandBuffer, double lineWidth);

typedef VkCmdSetDepthBiasNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Float depthBiasConstantFactor, Float depthBiasClamp, Float depthBiasSlopeFactor);
typedef VkCmdSetDepthBias = void Function(Pointer<VkCommandBuffer> commandBuffer, double depthBiasConstantFactor, double depthBiasClamp, double depthBiasSlopeFactor);

typedef VkCmdSetBlendConstantsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer blendConstants);
typedef VkCmdSetBlendConstants = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer blendConstants);

typedef VkCmdSetDepthBoundsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Float minDepthBounds, Float maxDepthBounds);
typedef VkCmdSetDepthBounds = void Function(Pointer<VkCommandBuffer> commandBuffer, double minDepthBounds, double maxDepthBounds);

typedef VkCmdSetStencilCompareMaskNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 faceMask, Uint32 compareMask);
typedef VkCmdSetStencilCompareMask = void Function(Pointer<VkCommandBuffer> commandBuffer, int faceMask, int compareMask);

typedef VkCmdSetStencilWriteMaskNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 faceMask, Uint32 writeMask);
typedef VkCmdSetStencilWriteMask = void Function(Pointer<VkCommandBuffer> commandBuffer, int faceMask, int writeMask);

typedef VkCmdSetStencilReferenceNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 faceMask, Uint32 reference);
typedef VkCmdSetStencilReference = void Function(Pointer<VkCommandBuffer> commandBuffer, int faceMask, int reference);

typedef VkCmdBindDescriptorSetsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineBindPoint, Pointer<VkPipelineLayout> layout, Uint32 firstSet, Uint32 descriptorSetCount, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets, Uint32 dynamicOffsetCount, Pointer pDynamicOffsets);
typedef VkCmdBindDescriptorSets = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineBindPoint, Pointer<VkPipelineLayout> layout, int firstSet, int descriptorSetCount, Pointer<Pointer<VkDescriptorSet>> pDescriptorSets, int dynamicOffsetCount, Pointer pDynamicOffsets);

typedef VkCmdBindIndexBufferNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Int32 indexType);
typedef VkCmdBindIndexBuffer = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, int indexType);

typedef VkCmdBindVertexBuffersNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstBinding, Uint32 bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets);
typedef VkCmdBindVertexBuffers = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstBinding, int bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets);

typedef VkCmdDrawNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 vertexCount, Uint32 instanceCount, Uint32 firstVertex, Uint32 firstInstance);
typedef VkCmdDraw = void Function(Pointer<VkCommandBuffer> commandBuffer, int vertexCount, int instanceCount, int firstVertex, int firstInstance);

typedef VkCmdDrawIndexedNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 indexCount, Uint32 instanceCount, Uint32 firstIndex, Int32 vertexOffset, Uint32 firstInstance);
typedef VkCmdDrawIndexed = void Function(Pointer<VkCommandBuffer> commandBuffer, int indexCount, int instanceCount, int firstIndex, int vertexOffset, int firstInstance);

typedef VkCmdDrawIndirectNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Uint32 drawCount, Uint32 stride);
typedef VkCmdDrawIndirect = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, int drawCount, int stride);

typedef VkCmdDrawIndexedIndirectNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Uint32 drawCount, Uint32 stride);
typedef VkCmdDrawIndexedIndirect = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, int drawCount, int stride);

typedef VkCmdDispatchNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 groupCountX, Uint32 groupCountY, Uint32 groupCountZ);
typedef VkCmdDispatch = void Function(Pointer<VkCommandBuffer> commandBuffer, int groupCountX, int groupCountY, int groupCountZ);

typedef VkCmdDispatchIndirectNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset);
typedef VkCmdDispatchIndirect = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset);

typedef VkCmdCopyBufferNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> srcBuffer, Pointer<VkBuffer> dstBuffer, Uint32 regionCount, Pointer<VkBufferCopy> pRegions);
typedef VkCmdCopyBuffer = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> srcBuffer, Pointer<VkBuffer> dstBuffer, int regionCount, Pointer<VkBufferCopy> pRegions);

typedef VkCmdCopyImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, Int32 srcImageLayout, Pointer<VkImage> dstImage, Int32 dstImageLayout, Uint32 regionCount, Pointer<VkImageCopy> pRegions);
typedef VkCmdCopyImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, int srcImageLayout, Pointer<VkImage> dstImage, int dstImageLayout, int regionCount, Pointer<VkImageCopy> pRegions);

typedef VkCmdBlitImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, Int32 srcImageLayout, Pointer<VkImage> dstImage, Int32 dstImageLayout, Uint32 regionCount, Pointer<VkImageBlit> pRegions, Int32 filter);
typedef VkCmdBlitImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, int srcImageLayout, Pointer<VkImage> dstImage, int dstImageLayout, int regionCount, Pointer<VkImageBlit> pRegions, int filter);

typedef VkCmdCopyBufferToImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> srcBuffer, Pointer<VkImage> dstImage, Int32 dstImageLayout, Uint32 regionCount, Pointer<VkBufferImageCopy> pRegions);
typedef VkCmdCopyBufferToImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> srcBuffer, Pointer<VkImage> dstImage, int dstImageLayout, int regionCount, Pointer<VkBufferImageCopy> pRegions);

typedef VkCmdCopyImageToBufferNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, Int32 srcImageLayout, Pointer<VkBuffer> dstBuffer, Uint32 regionCount, Pointer<VkBufferImageCopy> pRegions);
typedef VkCmdCopyImageToBuffer = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, int srcImageLayout, Pointer<VkBuffer> dstBuffer, int regionCount, Pointer<VkBufferImageCopy> pRegions);

typedef VkCmdUpdateBufferNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> dstBuffer, Uint64 dstOffset, Uint64 dataSize, Pointer pData);
typedef VkCmdUpdateBuffer = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> dstBuffer, int dstOffset, int dataSize, Pointer pData);

typedef VkCmdFillBufferNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> dstBuffer, Uint64 dstOffset, Uint64 size, Uint32 data);
typedef VkCmdFillBuffer = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> dstBuffer, int dstOffset, int size, int data);

typedef VkCmdClearColorImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> image, Int32 imageLayout, Pointer<VkClearColorValue> pColor, Uint32 rangeCount, Pointer<VkImageSubresourceRange> pRanges);
typedef VkCmdClearColorImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> image, int imageLayout, Pointer<VkClearColorValue> pColor, int rangeCount, Pointer<VkImageSubresourceRange> pRanges);

typedef VkCmdClearDepthStencilImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> image, Int32 imageLayout, Pointer<VkClearDepthStencilValue> pDepthStencil, Uint32 rangeCount, Pointer<VkImageSubresourceRange> pRanges);
typedef VkCmdClearDepthStencilImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> image, int imageLayout, Pointer<VkClearDepthStencilValue> pDepthStencil, int rangeCount, Pointer<VkImageSubresourceRange> pRanges);

typedef VkCmdClearAttachmentsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 attachmentCount, Pointer<VkClearAttachment> pAttachments, Uint32 rectCount, Pointer<VkClearRect> pRects);
typedef VkCmdClearAttachments = void Function(Pointer<VkCommandBuffer> commandBuffer, int attachmentCount, Pointer<VkClearAttachment> pAttachments, int rectCount, Pointer<VkClearRect> pRects);

typedef VkCmdResolveImageNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, Int32 srcImageLayout, Pointer<VkImage> dstImage, Int32 dstImageLayout, Uint32 regionCount, Pointer<VkImageResolve> pRegions);
typedef VkCmdResolveImage = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImage> srcImage, int srcImageLayout, Pointer<VkImage> dstImage, int dstImageLayout, int regionCount, Pointer<VkImageResolve> pRegions);

typedef VkCmdSetEventNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkEvent> event, Uint32 stageMask);
typedef VkCmdSetEvent = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkEvent> event, int stageMask);

typedef VkCmdResetEventNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkEvent> event, Uint32 stageMask);
typedef VkCmdResetEvent = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkEvent> event, int stageMask);

typedef VkCmdWaitEventsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 eventCount, Pointer<Pointer<VkEvent>> pEvents, Uint32 srcStageMask, Uint32 dstStageMask, Uint32 memoryBarrierCount, Pointer<VkMemoryBarrier> pMemoryBarriers, Uint32 bufferMemoryBarrierCount, Pointer<VkBufferMemoryBarrier> pBufferMemoryBarriers, Uint32 imageMemoryBarrierCount, Pointer<VkImageMemoryBarrier> pImageMemoryBarriers);
typedef VkCmdWaitEvents = void Function(Pointer<VkCommandBuffer> commandBuffer, int eventCount, Pointer<Pointer<VkEvent>> pEvents, int srcStageMask, int dstStageMask, int memoryBarrierCount, Pointer<VkMemoryBarrier> pMemoryBarriers, int bufferMemoryBarrierCount, Pointer<VkBufferMemoryBarrier> pBufferMemoryBarriers, int imageMemoryBarrierCount, Pointer<VkImageMemoryBarrier> pImageMemoryBarriers);

typedef VkCmdPipelineBarrierNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 srcStageMask, Uint32 dstStageMask, Uint32 dependencyFlags, Uint32 memoryBarrierCount, Pointer<VkMemoryBarrier> pMemoryBarriers, Uint32 bufferMemoryBarrierCount, Pointer<VkBufferMemoryBarrier> pBufferMemoryBarriers, Uint32 imageMemoryBarrierCount, Pointer<VkImageMemoryBarrier> pImageMemoryBarriers);
typedef VkCmdPipelineBarrier = void Function(Pointer<VkCommandBuffer> commandBuffer, int srcStageMask, int dstStageMask, int dependencyFlags, int memoryBarrierCount, Pointer<VkMemoryBarrier> pMemoryBarriers, int bufferMemoryBarrierCount, Pointer<VkBufferMemoryBarrier> pBufferMemoryBarriers, int imageMemoryBarrierCount, Pointer<VkImageMemoryBarrier> pImageMemoryBarriers);

typedef VkCmdBeginQueryNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 query, Uint32 flags);
typedef VkCmdBeginQuery = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int query, int flags);

typedef VkCmdEndQueryNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 query);
typedef VkCmdEndQuery = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int query);

typedef VkCmdBeginConditionalRenderingEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin);
typedef VkCmdBeginConditionalRenderingEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkConditionalRenderingBeginInfoEXT> pConditionalRenderingBegin);

typedef VkCmdEndConditionalRenderingEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer);
typedef VkCmdEndConditionalRenderingEXT = void Function(Pointer<VkCommandBuffer> commandBuffer);

typedef VkCmdResetQueryPoolNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 firstQuery, Uint32 queryCount);
typedef VkCmdResetQueryPool = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int firstQuery, int queryCount);

typedef VkCmdWriteTimestampNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineStage, Pointer<VkQueryPool> queryPool, Uint32 query);
typedef VkCmdWriteTimestamp = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineStage, Pointer<VkQueryPool> queryPool, int query);

typedef VkCmdCopyQueryPoolResultsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 firstQuery, Uint32 queryCount, Pointer<VkBuffer> dstBuffer, Uint64 dstOffset, Uint64 stride, Uint32 flags);
typedef VkCmdCopyQueryPoolResults = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int firstQuery, int queryCount, Pointer<VkBuffer> dstBuffer, int dstOffset, int stride, int flags);

typedef VkCmdPushConstantsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPipelineLayout> layout, Uint32 stageFlags, Uint32 offset, Uint32 size, Pointer pValues);
typedef VkCmdPushConstants = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPipelineLayout> layout, int stageFlags, int offset, int size, Pointer pValues);

typedef VkCmdBeginRenderPassNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, Int32 contents);
typedef VkCmdBeginRenderPass = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, int contents);

typedef VkCmdNextSubpassNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 contents);
typedef VkCmdNextSubpass = void Function(Pointer<VkCommandBuffer> commandBuffer, int contents);

typedef VkCmdEndRenderPassNative = Void Function(Pointer<VkCommandBuffer> commandBuffer);
typedef VkCmdEndRenderPass = void Function(Pointer<VkCommandBuffer> commandBuffer);

typedef VkCmdExecuteCommandsNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 commandBufferCount, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);
typedef VkCmdExecuteCommands = void Function(Pointer<VkCommandBuffer> commandBuffer, int commandBufferCount, Pointer<Pointer<VkCommandBuffer>> pCommandBuffers);

typedef VkCreateAndroidSurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkAndroidSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateAndroidSurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkAndroidSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceDisplayPropertiesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPropertiesKHR> pProperties);
typedef VkGetPhysicalDeviceDisplayPropertiesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPropertiesKHR> pProperties);

typedef VkGetPhysicalDeviceDisplayPlanePropertiesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPlanePropertiesKHR> pProperties);
typedef VkGetPhysicalDeviceDisplayPlanePropertiesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPlanePropertiesKHR> pProperties);

typedef VkGetDisplayPlaneSupportedDisplaysKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 planeIndex, Pointer pDisplayCount, Pointer<Pointer<VkDisplayKHR>> pDisplays);
typedef VkGetDisplayPlaneSupportedDisplaysKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int planeIndex, Pointer pDisplayCount, Pointer<Pointer<VkDisplayKHR>> pDisplays);

typedef VkGetDisplayModePropertiesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer pPropertyCount, Pointer<VkDisplayModePropertiesKHR> pProperties);
typedef VkGetDisplayModePropertiesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer pPropertyCount, Pointer<VkDisplayModePropertiesKHR> pProperties);

typedef VkCreateDisplayModeKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer<VkDisplayModeCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDisplayModeKHR>> pMode);
typedef VkCreateDisplayModeKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer<VkDisplayModeCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDisplayModeKHR>> pMode);

typedef VkGetDisplayPlaneCapabilitiesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayModeKHR> mode, Uint32 planeIndex, Pointer<VkDisplayPlaneCapabilitiesKHR> pCapabilities);
typedef VkGetDisplayPlaneCapabilitiesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayModeKHR> mode, int planeIndex, Pointer<VkDisplayPlaneCapabilitiesKHR> pCapabilities);

typedef VkCreateDisplayPlaneSurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkDisplaySurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateDisplayPlaneSurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkDisplaySurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateSharedSwapchainsKHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 swapchainCount, Pointer<VkSwapchainCreateInfoKHR> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSwapchainKHR>> pSwapchains);
typedef VkCreateSharedSwapchainsKHR = int Function(Pointer<VkDevice> device, int swapchainCount, Pointer<VkSwapchainCreateInfoKHR> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSwapchainKHR>> pSwapchains);

typedef VkDestroySurfaceKHRNative = Void Function(Pointer<VkInstance> instance, Pointer<VkSurfaceKHR> surface, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySurfaceKHR = void Function(Pointer<VkInstance> instance, Pointer<VkSurfaceKHR> surface, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetPhysicalDeviceSurfaceSupportKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex, Pointer<VkSurfaceKHR> surface, Pointer pSupported);
typedef VkGetPhysicalDeviceSurfaceSupportKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex, Pointer<VkSurfaceKHR> surface, Pointer pSupported);

typedef VkGetPhysicalDeviceSurfaceCapabilitiesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer<VkSurfaceCapabilitiesKHR> pSurfaceCapabilities);
typedef VkGetPhysicalDeviceSurfaceCapabilitiesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer<VkSurfaceCapabilitiesKHR> pSurfaceCapabilities);

typedef VkGetPhysicalDeviceSurfaceFormatsKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pSurfaceFormatCount, Pointer<VkSurfaceFormatKHR> pSurfaceFormats);
typedef VkGetPhysicalDeviceSurfaceFormatsKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pSurfaceFormatCount, Pointer<VkSurfaceFormatKHR> pSurfaceFormats);

typedef VkGetPhysicalDeviceSurfacePresentModesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pPresentModeCount, Pointer<Int32> pPresentModes);
typedef VkGetPhysicalDeviceSurfacePresentModesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pPresentModeCount, Pointer<Int32> pPresentModes);

typedef VkCreateSwapchainKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSwapchainKHR>> pSwapchain);
typedef VkCreateSwapchainKHR = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSwapchainKHR>> pSwapchain);

typedef VkDestroySwapchainKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySwapchainKHR = void Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetSwapchainImagesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer pSwapchainImageCount, Pointer<Pointer<VkImage>> pSwapchainImages);
typedef VkGetSwapchainImagesKHR = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer pSwapchainImageCount, Pointer<Pointer<VkImage>> pSwapchainImages);

typedef VkAcquireNextImageKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Uint64 timeout, Pointer<VkSemaphore> semaphore, Pointer<VkFence> fence, Pointer pImageIndex);
typedef VkAcquireNextImageKHR = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, int timeout, Pointer<VkSemaphore> semaphore, Pointer<VkFence> fence, Pointer pImageIndex);

typedef VkQueuePresentKHRNative = Int32 Function(Pointer<VkQueue> queue, Pointer<VkPresentInfoKHR> pPresentInfo);
typedef VkQueuePresentKHR = int Function(Pointer<VkQueue> queue, Pointer<VkPresentInfoKHR> pPresentInfo);

typedef VkCreateViSurfaceNNNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkViSurfaceCreateInfoNN> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateViSurfaceNN = int Function(Pointer<VkInstance> instance, Pointer<VkViSurfaceCreateInfoNN> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateWaylandSurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkWaylandSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateWaylandSurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkWaylandSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceWaylandPresentationSupportKHRNative = Uint32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex, Pointer display);
typedef VkGetPhysicalDeviceWaylandPresentationSupportKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex, Pointer display);

typedef VkCreateWin32SurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkWin32SurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateWin32SurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkWin32SurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceWin32PresentationSupportKHRNative = Uint32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex);
typedef VkGetPhysicalDeviceWin32PresentationSupportKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex);

typedef VkCreateXlibSurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkXlibSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateXlibSurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkXlibSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceXlibPresentationSupportKHRNative = Uint32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex, Pointer dpy, Pointer visualID);
typedef VkGetPhysicalDeviceXlibPresentationSupportKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex, Pointer dpy, Pointer visualID);

typedef VkCreateXcbSurfaceKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkXcbSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateXcbSurfaceKHR = int Function(Pointer<VkInstance> instance, Pointer<VkXcbSurfaceCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceXcbPresentationSupportKHRNative = Uint32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex, Pointer connection, Pointer visual_id);
typedef VkGetPhysicalDeviceXcbPresentationSupportKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex, Pointer connection, Pointer visual_id);

typedef VkCreateImagePipeSurfaceFUCHSIANative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkImagePipeSurfaceCreateInfoFUCHSIA> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateImagePipeSurfaceFUCHSIA = int Function(Pointer<VkInstance> instance, Pointer<VkImagePipeSurfaceCreateInfoFUCHSIA> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateStreamDescriptorSurfaceGGPNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkStreamDescriptorSurfaceCreateInfoGGP> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateStreamDescriptorSurfaceGGP = int Function(Pointer<VkInstance> instance, Pointer<VkStreamDescriptorSurfaceCreateInfoGGP> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateDebugReportCallbackEXTNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkDebugReportCallbackCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDebugReportCallbackEXT>> pCallback);
typedef VkCreateDebugReportCallbackEXT = int Function(Pointer<VkInstance> instance, Pointer<VkDebugReportCallbackCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDebugReportCallbackEXT>> pCallback);

typedef VkDestroyDebugReportCallbackEXTNative = Void Function(Pointer<VkInstance> instance, Pointer<VkDebugReportCallbackEXT> callback, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDebugReportCallbackEXT = void Function(Pointer<VkInstance> instance, Pointer<VkDebugReportCallbackEXT> callback, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkDebugReportMessageEXTNative = Void Function(Pointer<VkInstance> instance, Uint32 flags, Int32 objectType, Uint64 object, Uint64 location, Int32 messageCode, Pointer pLayerPrefix, Pointer pMessage);
typedef VkDebugReportMessageEXT = void Function(Pointer<VkInstance> instance, int flags, int objectType, int object, int location, int messageCode, Pointer pLayerPrefix, Pointer pMessage);

typedef VkDebugMarkerSetObjectNameEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDebugMarkerObjectNameInfoEXT> pNameInfo);
typedef VkDebugMarkerSetObjectNameEXT = int Function(Pointer<VkDevice> device, Pointer<VkDebugMarkerObjectNameInfoEXT> pNameInfo);

typedef VkDebugMarkerSetObjectTagEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDebugMarkerObjectTagInfoEXT> pTagInfo);
typedef VkDebugMarkerSetObjectTagEXT = int Function(Pointer<VkDevice> device, Pointer<VkDebugMarkerObjectTagInfoEXT> pTagInfo);

typedef VkCmdDebugMarkerBeginEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugMarkerMarkerInfoEXT> pMarkerInfo);
typedef VkCmdDebugMarkerBeginEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugMarkerMarkerInfoEXT> pMarkerInfo);

typedef VkCmdDebugMarkerEndEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer);
typedef VkCmdDebugMarkerEndEXT = void Function(Pointer<VkCommandBuffer> commandBuffer);

typedef VkCmdDebugMarkerInsertEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugMarkerMarkerInfoEXT> pMarkerInfo);
typedef VkCmdDebugMarkerInsertEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugMarkerMarkerInfoEXT> pMarkerInfo);

typedef VkGetPhysicalDeviceExternalImageFormatPropertiesNVNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Int32 type, Int32 tiling, Uint32 usage, Uint32 flags, Uint32 externalHandleType, Pointer<VkExternalImageFormatPropertiesNV> pExternalImageFormatProperties);
typedef VkGetPhysicalDeviceExternalImageFormatPropertiesNV = int Function(Pointer<VkPhysicalDevice> physicalDevice, int format, int type, int tiling, int usage, int flags, int externalHandleType, Pointer<VkExternalImageFormatPropertiesNV> pExternalImageFormatProperties);

typedef VkGetMemoryWin32HandleNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, Uint32 handleType, Pointer pHandle);
typedef VkGetMemoryWin32HandleNV = int Function(Pointer<VkDevice> device, Pointer<VkDeviceMemory> memory, int handleType, Pointer pHandle);

typedef VkCmdExecuteGeneratedCommandsNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 isPreprocessed, Pointer<VkGeneratedCommandsInfoNV> pGeneratedCommandsInfo);
typedef VkCmdExecuteGeneratedCommandsNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int isPreprocessed, Pointer<VkGeneratedCommandsInfoNV> pGeneratedCommandsInfo);

typedef VkCmdPreprocessGeneratedCommandsNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkGeneratedCommandsInfoNV> pGeneratedCommandsInfo);
typedef VkCmdPreprocessGeneratedCommandsNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkGeneratedCommandsInfoNV> pGeneratedCommandsInfo);

typedef VkCmdBindPipelineShaderGroupNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineBindPoint, Pointer<VkPipeline> pipeline, Uint32 groupIndex);
typedef VkCmdBindPipelineShaderGroupNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineBindPoint, Pointer<VkPipeline> pipeline, int groupIndex);

typedef VkGetGeneratedCommandsMemoryRequirementsNVNative = Void Function(Pointer<VkDevice> device, Pointer<VkGeneratedCommandsMemoryRequirementsInfoNV> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetGeneratedCommandsMemoryRequirementsNV = void Function(Pointer<VkDevice> device, Pointer<VkGeneratedCommandsMemoryRequirementsInfoNV> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkCreateIndirectCommandsLayoutNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkIndirectCommandsLayoutCreateInfoNV> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkIndirectCommandsLayoutNV>> pIndirectCommandsLayout);
typedef VkCreateIndirectCommandsLayoutNV = int Function(Pointer<VkDevice> device, Pointer<VkIndirectCommandsLayoutCreateInfoNV> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkIndirectCommandsLayoutNV>> pIndirectCommandsLayout);

typedef VkDestroyIndirectCommandsLayoutNVNative = Void Function(Pointer<VkDevice> device, Pointer<VkIndirectCommandsLayoutNV> indirectCommandsLayout, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyIndirectCommandsLayoutNV = void Function(Pointer<VkDevice> device, Pointer<VkIndirectCommandsLayoutNV> indirectCommandsLayout, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetPhysicalDeviceFeatures2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures2> pFeatures);
typedef VkGetPhysicalDeviceFeatures2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures2> pFeatures);

typedef VkGetPhysicalDeviceFeatures2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures2> pFeatures);
typedef VkGetPhysicalDeviceFeatures2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceFeatures2> pFeatures);

typedef VkGetPhysicalDeviceProperties2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties2> pProperties);
typedef VkGetPhysicalDeviceProperties2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties2> pProperties);

typedef VkGetPhysicalDeviceProperties2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties2> pProperties);
typedef VkGetPhysicalDeviceProperties2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceProperties2> pProperties);

typedef VkGetPhysicalDeviceFormatProperties2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Pointer<VkFormatProperties2> pFormatProperties);
typedef VkGetPhysicalDeviceFormatProperties2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, int format, Pointer<VkFormatProperties2> pFormatProperties);

typedef VkGetPhysicalDeviceFormatProperties2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 format, Pointer<VkFormatProperties2> pFormatProperties);
typedef VkGetPhysicalDeviceFormatProperties2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, int format, Pointer<VkFormatProperties2> pFormatProperties);

typedef VkGetPhysicalDeviceImageFormatProperties2Native = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceImageFormatInfo2> pImageFormatInfo, Pointer<VkImageFormatProperties2> pImageFormatProperties);
typedef VkGetPhysicalDeviceImageFormatProperties2 = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceImageFormatInfo2> pImageFormatInfo, Pointer<VkImageFormatProperties2> pImageFormatProperties);

typedef VkGetPhysicalDeviceImageFormatProperties2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceImageFormatInfo2> pImageFormatInfo, Pointer<VkImageFormatProperties2> pImageFormatProperties);
typedef VkGetPhysicalDeviceImageFormatProperties2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceImageFormatInfo2> pImageFormatInfo, Pointer<VkImageFormatProperties2> pImageFormatProperties);

typedef VkGetPhysicalDeviceQueueFamilyProperties2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties2> pQueueFamilyProperties);
typedef VkGetPhysicalDeviceQueueFamilyProperties2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties2> pQueueFamilyProperties);

typedef VkGetPhysicalDeviceQueueFamilyProperties2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties2> pQueueFamilyProperties);
typedef VkGetPhysicalDeviceQueueFamilyProperties2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pQueueFamilyPropertyCount, Pointer<VkQueueFamilyProperties2> pQueueFamilyProperties);

typedef VkGetPhysicalDeviceMemoryProperties2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties2> pMemoryProperties);
typedef VkGetPhysicalDeviceMemoryProperties2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties2> pMemoryProperties);

typedef VkGetPhysicalDeviceMemoryProperties2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties2> pMemoryProperties);
typedef VkGetPhysicalDeviceMemoryProperties2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceMemoryProperties2> pMemoryProperties);

typedef VkGetPhysicalDeviceSparseImageFormatProperties2Native = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSparseImageFormatInfo2> pFormatInfo, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties2> pProperties);
typedef VkGetPhysicalDeviceSparseImageFormatProperties2 = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSparseImageFormatInfo2> pFormatInfo, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties2> pProperties);

typedef VkGetPhysicalDeviceSparseImageFormatProperties2KHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSparseImageFormatInfo2> pFormatInfo, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties2> pProperties);
typedef VkGetPhysicalDeviceSparseImageFormatProperties2KHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSparseImageFormatInfo2> pFormatInfo, Pointer pPropertyCount, Pointer<VkSparseImageFormatProperties2> pProperties);

typedef VkCmdPushDescriptorSetKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineBindPoint, Pointer<VkPipelineLayout> layout, Uint32 set, Uint32 descriptorWriteCount, Pointer<VkWriteDescriptorSet> pDescriptorWrites);
typedef VkCmdPushDescriptorSetKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineBindPoint, Pointer<VkPipelineLayout> layout, int set, int descriptorWriteCount, Pointer<VkWriteDescriptorSet> pDescriptorWrites);

typedef VkTrimCommandPoolNative = Void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Uint32 flags);
typedef VkTrimCommandPool = void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, int flags);

typedef VkTrimCommandPoolKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, Uint32 flags);
typedef VkTrimCommandPoolKHR = void Function(Pointer<VkDevice> device, Pointer<VkCommandPool> commandPool, int flags);

typedef VkGetPhysicalDeviceExternalBufferPropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalBufferInfo> pExternalBufferInfo, Pointer<VkExternalBufferProperties> pExternalBufferProperties);
typedef VkGetPhysicalDeviceExternalBufferProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalBufferInfo> pExternalBufferInfo, Pointer<VkExternalBufferProperties> pExternalBufferProperties);

typedef VkGetPhysicalDeviceExternalBufferPropertiesKHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalBufferInfo> pExternalBufferInfo, Pointer<VkExternalBufferProperties> pExternalBufferProperties);
typedef VkGetPhysicalDeviceExternalBufferPropertiesKHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalBufferInfo> pExternalBufferInfo, Pointer<VkExternalBufferProperties> pExternalBufferProperties);

typedef VkGetMemoryWin32HandleKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkMemoryGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);
typedef VkGetMemoryWin32HandleKHR = int Function(Pointer<VkDevice> device, Pointer<VkMemoryGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);

typedef VkGetMemoryWin32HandlePropertiesKHRNative = Int32 Function(Pointer<VkDevice> device, Int32 handleType, Pointer handle, Pointer<VkMemoryWin32HandlePropertiesKHR> pMemoryWin32HandleProperties);
typedef VkGetMemoryWin32HandlePropertiesKHR = int Function(Pointer<VkDevice> device, int handleType, Pointer handle, Pointer<VkMemoryWin32HandlePropertiesKHR> pMemoryWin32HandleProperties);

typedef VkGetMemoryFdKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkMemoryGetFdInfoKHR> pGetFdInfo, Pointer pFd);
typedef VkGetMemoryFdKHR = int Function(Pointer<VkDevice> device, Pointer<VkMemoryGetFdInfoKHR> pGetFdInfo, Pointer pFd);

typedef VkGetMemoryFdPropertiesKHRNative = Int32 Function(Pointer<VkDevice> device, Int32 handleType, Pointer fd, Pointer<VkMemoryFdPropertiesKHR> pMemoryFdProperties);
typedef VkGetMemoryFdPropertiesKHR = int Function(Pointer<VkDevice> device, int handleType, Pointer fd, Pointer<VkMemoryFdPropertiesKHR> pMemoryFdProperties);

typedef VkGetPhysicalDeviceExternalSemaphorePropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo, Pointer<VkExternalSemaphoreProperties> pExternalSemaphoreProperties);
typedef VkGetPhysicalDeviceExternalSemaphoreProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo, Pointer<VkExternalSemaphoreProperties> pExternalSemaphoreProperties);

typedef VkGetPhysicalDeviceExternalSemaphorePropertiesKHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo, Pointer<VkExternalSemaphoreProperties> pExternalSemaphoreProperties);
typedef VkGetPhysicalDeviceExternalSemaphorePropertiesKHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalSemaphoreInfo> pExternalSemaphoreInfo, Pointer<VkExternalSemaphoreProperties> pExternalSemaphoreProperties);

typedef VkGetSemaphoreWin32HandleKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);
typedef VkGetSemaphoreWin32HandleKHR = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);

typedef VkImportSemaphoreWin32HandleKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImportSemaphoreWin32HandleInfoKHR> pImportSemaphoreWin32HandleInfo);
typedef VkImportSemaphoreWin32HandleKHR = int Function(Pointer<VkDevice> device, Pointer<VkImportSemaphoreWin32HandleInfoKHR> pImportSemaphoreWin32HandleInfo);

typedef VkGetSemaphoreFdKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreGetFdInfoKHR> pGetFdInfo, Pointer pFd);
typedef VkGetSemaphoreFdKHR = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreGetFdInfoKHR> pGetFdInfo, Pointer pFd);

typedef VkImportSemaphoreFdKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo);
typedef VkImportSemaphoreFdKHR = int Function(Pointer<VkDevice> device, Pointer<VkImportSemaphoreFdInfoKHR> pImportSemaphoreFdInfo);

typedef VkGetPhysicalDeviceExternalFencePropertiesNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalFenceInfo> pExternalFenceInfo, Pointer<VkExternalFenceProperties> pExternalFenceProperties);
typedef VkGetPhysicalDeviceExternalFenceProperties = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalFenceInfo> pExternalFenceInfo, Pointer<VkExternalFenceProperties> pExternalFenceProperties);

typedef VkGetPhysicalDeviceExternalFencePropertiesKHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalFenceInfo> pExternalFenceInfo, Pointer<VkExternalFenceProperties> pExternalFenceProperties);
typedef VkGetPhysicalDeviceExternalFencePropertiesKHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceExternalFenceInfo> pExternalFenceInfo, Pointer<VkExternalFenceProperties> pExternalFenceProperties);

typedef VkGetFenceWin32HandleKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkFenceGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);
typedef VkGetFenceWin32HandleKHR = int Function(Pointer<VkDevice> device, Pointer<VkFenceGetWin32HandleInfoKHR> pGetWin32HandleInfo, Pointer pHandle);

typedef VkImportFenceWin32HandleKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImportFenceWin32HandleInfoKHR> pImportFenceWin32HandleInfo);
typedef VkImportFenceWin32HandleKHR = int Function(Pointer<VkDevice> device, Pointer<VkImportFenceWin32HandleInfoKHR> pImportFenceWin32HandleInfo);

typedef VkGetFenceFdKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkFenceGetFdInfoKHR> pGetFdInfo, Pointer pFd);
typedef VkGetFenceFdKHR = int Function(Pointer<VkDevice> device, Pointer<VkFenceGetFdInfoKHR> pGetFdInfo, Pointer pFd);

typedef VkImportFenceFdKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImportFenceFdInfoKHR> pImportFenceFdInfo);
typedef VkImportFenceFdKHR = int Function(Pointer<VkDevice> device, Pointer<VkImportFenceFdInfoKHR> pImportFenceFdInfo);

typedef VkReleaseDisplayEXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display);
typedef VkReleaseDisplayEXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display);

typedef VkAcquireXlibDisplayEXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer dpy, Pointer<VkDisplayKHR> display);
typedef VkAcquireXlibDisplayEXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer dpy, Pointer<VkDisplayKHR> display);

typedef VkGetRandROutputDisplayEXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer dpy, Pointer rrOutput, Pointer<Pointer<VkDisplayKHR>> pDisplay);
typedef VkGetRandROutputDisplayEXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer dpy, Pointer rrOutput, Pointer<Pointer<VkDisplayKHR>> pDisplay);

typedef VkDisplayPowerControlEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDisplayKHR> display, Pointer<VkDisplayPowerInfoEXT> pDisplayPowerInfo);
typedef VkDisplayPowerControlEXT = int Function(Pointer<VkDevice> device, Pointer<VkDisplayKHR> display, Pointer<VkDisplayPowerInfoEXT> pDisplayPowerInfo);

typedef VkRegisterDeviceEventEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeviceEventInfoEXT> pDeviceEventInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);
typedef VkRegisterDeviceEventEXT = int Function(Pointer<VkDevice> device, Pointer<VkDeviceEventInfoEXT> pDeviceEventInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);

typedef VkRegisterDisplayEventEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDisplayKHR> display, Pointer<VkDisplayEventInfoEXT> pDisplayEventInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);
typedef VkRegisterDisplayEventEXT = int Function(Pointer<VkDevice> device, Pointer<VkDisplayKHR> display, Pointer<VkDisplayEventInfoEXT> pDisplayEventInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkFence>> pFence);

typedef VkGetSwapchainCounterEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Int32 counter, Pointer pCounterValue);
typedef VkGetSwapchainCounterEXT = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, int counter, Pointer pCounterValue);

typedef VkGetPhysicalDeviceSurfaceCapabilities2EXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer<VkSurfaceCapabilities2EXT> pSurfaceCapabilities);
typedef VkGetPhysicalDeviceSurfaceCapabilities2EXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer<VkSurfaceCapabilities2EXT> pSurfaceCapabilities);

typedef VkEnumeratePhysicalDeviceGroupsNative = Int32 Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceGroupCount, Pointer<VkPhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties);
typedef VkEnumeratePhysicalDeviceGroups = int Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceGroupCount, Pointer<VkPhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties);

typedef VkEnumeratePhysicalDeviceGroupsKHRNative = Int32 Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceGroupCount, Pointer<VkPhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties);
typedef VkEnumeratePhysicalDeviceGroupsKHR = int Function(Pointer<VkInstance> instance, Pointer pPhysicalDeviceGroupCount, Pointer<VkPhysicalDeviceGroupProperties> pPhysicalDeviceGroupProperties);

typedef VkGetDeviceGroupPeerMemoryFeaturesNative = Void Function(Pointer<VkDevice> device, Uint32 heapIndex, Uint32 localDeviceIndex, Uint32 remoteDeviceIndex, Pointer pPeerMemoryFeatures);
typedef VkGetDeviceGroupPeerMemoryFeatures = void Function(Pointer<VkDevice> device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, Pointer pPeerMemoryFeatures);

typedef VkGetDeviceGroupPeerMemoryFeaturesKHRNative = Void Function(Pointer<VkDevice> device, Uint32 heapIndex, Uint32 localDeviceIndex, Uint32 remoteDeviceIndex, Pointer pPeerMemoryFeatures);
typedef VkGetDeviceGroupPeerMemoryFeaturesKHR = void Function(Pointer<VkDevice> device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, Pointer pPeerMemoryFeatures);

typedef VkBindBufferMemory2Native = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindBufferMemoryInfo> pBindInfos);
typedef VkBindBufferMemory2 = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindBufferMemoryInfo> pBindInfos);

typedef VkBindBufferMemory2KHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindBufferMemoryInfo> pBindInfos);
typedef VkBindBufferMemory2KHR = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindBufferMemoryInfo> pBindInfos);

typedef VkBindImageMemory2Native = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindImageMemoryInfo> pBindInfos);
typedef VkBindImageMemory2 = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindImageMemoryInfo> pBindInfos);

typedef VkBindImageMemory2KHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindImageMemoryInfo> pBindInfos);
typedef VkBindImageMemory2KHR = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindImageMemoryInfo> pBindInfos);

typedef VkCmdSetDeviceMaskNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 deviceMask);
typedef VkCmdSetDeviceMask = void Function(Pointer<VkCommandBuffer> commandBuffer, int deviceMask);

typedef VkCmdSetDeviceMaskKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 deviceMask);
typedef VkCmdSetDeviceMaskKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, int deviceMask);

typedef VkGetDeviceGroupPresentCapabilitiesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities);
typedef VkGetDeviceGroupPresentCapabilitiesKHR = int Function(Pointer<VkDevice> device, Pointer<VkDeviceGroupPresentCapabilitiesKHR> pDeviceGroupPresentCapabilities);

typedef VkGetDeviceGroupSurfacePresentModesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSurfaceKHR> surface, Pointer pModes);
typedef VkGetDeviceGroupSurfacePresentModesKHR = int Function(Pointer<VkDevice> device, Pointer<VkSurfaceKHR> surface, Pointer pModes);

typedef VkAcquireNextImage2KHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAcquireNextImageInfoKHR> pAcquireInfo, Pointer pImageIndex);
typedef VkAcquireNextImage2KHR = int Function(Pointer<VkDevice> device, Pointer<VkAcquireNextImageInfoKHR> pAcquireInfo, Pointer pImageIndex);

typedef VkCmdDispatchBaseNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 baseGroupX, Uint32 baseGroupY, Uint32 baseGroupZ, Uint32 groupCountX, Uint32 groupCountY, Uint32 groupCountZ);
typedef VkCmdDispatchBase = void Function(Pointer<VkCommandBuffer> commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ);

typedef VkCmdDispatchBaseKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 baseGroupX, Uint32 baseGroupY, Uint32 baseGroupZ, Uint32 groupCountX, Uint32 groupCountY, Uint32 groupCountZ);
typedef VkCmdDispatchBaseKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ);

typedef VkGetPhysicalDevicePresentRectanglesKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pRectCount, Pointer<VkRect2D> pRects);
typedef VkGetPhysicalDevicePresentRectanglesKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkSurfaceKHR> surface, Pointer pRectCount, Pointer<VkRect2D> pRects);

typedef VkCreateDescriptorUpdateTemplateNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorUpdateTemplate>> pDescriptorUpdateTemplate);
typedef VkCreateDescriptorUpdateTemplate = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorUpdateTemplate>> pDescriptorUpdateTemplate);

typedef VkCreateDescriptorUpdateTemplateKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorUpdateTemplate>> pDescriptorUpdateTemplate);
typedef VkCreateDescriptorUpdateTemplateKHR = int Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDescriptorUpdateTemplate>> pDescriptorUpdateTemplate);

typedef VkDestroyDescriptorUpdateTemplateNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDescriptorUpdateTemplate = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkDestroyDescriptorUpdateTemplateKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDescriptorUpdateTemplateKHR = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkUpdateDescriptorSetWithTemplateNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSet> descriptorSet, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer pData);
typedef VkUpdateDescriptorSetWithTemplate = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSet> descriptorSet, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer pData);

typedef VkUpdateDescriptorSetWithTemplateKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSet> descriptorSet, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer pData);
typedef VkUpdateDescriptorSetWithTemplateKHR = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSet> descriptorSet, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer pData);

typedef VkCmdPushDescriptorSetWithTemplateKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkPipelineLayout> layout, Uint32 set, Pointer pData);
typedef VkCmdPushDescriptorSetWithTemplateKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDescriptorUpdateTemplate> descriptorUpdateTemplate, Pointer<VkPipelineLayout> layout, int set, Pointer pData);

typedef VkSetHdrMetadataEXTNative = Void Function(Pointer<VkDevice> device, Uint32 swapchainCount, Pointer<Pointer<VkSwapchainKHR>> pSwapchains, Pointer<VkHdrMetadataEXT> pMetadata);
typedef VkSetHdrMetadataEXT = void Function(Pointer<VkDevice> device, int swapchainCount, Pointer<Pointer<VkSwapchainKHR>> pSwapchains, Pointer<VkHdrMetadataEXT> pMetadata);

typedef VkGetSwapchainStatusKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);
typedef VkGetSwapchainStatusKHR = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);

typedef VkGetRefreshCycleDurationGOOGLENative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer<VkRefreshCycleDurationGOOGLE> pDisplayTimingProperties);
typedef VkGetRefreshCycleDurationGOOGLE = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer<VkRefreshCycleDurationGOOGLE> pDisplayTimingProperties);

typedef VkGetPastPresentationTimingGOOGLENative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer pPresentationTimingCount, Pointer<VkPastPresentationTimingGOOGLE> pPresentationTimings);
typedef VkGetPastPresentationTimingGOOGLE = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain, Pointer pPresentationTimingCount, Pointer<VkPastPresentationTimingGOOGLE> pPresentationTimings);

typedef VkCreateIOSSurfaceMVKNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkIOSSurfaceCreateInfoMVK> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateIOSSurfaceMVK = int Function(Pointer<VkInstance> instance, Pointer<VkIOSSurfaceCreateInfoMVK> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateMacOSSurfaceMVKNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkMacOSSurfaceCreateInfoMVK> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateMacOSSurfaceMVK = int Function(Pointer<VkInstance> instance, Pointer<VkMacOSSurfaceCreateInfoMVK> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCreateMetalSurfaceEXTNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkMetalSurfaceCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateMetalSurfaceEXT = int Function(Pointer<VkInstance> instance, Pointer<VkMetalSurfaceCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkCmdSetViewportWScalingNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstViewport, Uint32 viewportCount, Pointer<VkViewportWScalingNV> pViewportWScalings);
typedef VkCmdSetViewportWScalingNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstViewport, int viewportCount, Pointer<VkViewportWScalingNV> pViewportWScalings);

typedef VkCmdSetDiscardRectangleEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstDiscardRectangle, Uint32 discardRectangleCount, Pointer<VkRect2D> pDiscardRectangles);
typedef VkCmdSetDiscardRectangleEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstDiscardRectangle, int discardRectangleCount, Pointer<VkRect2D> pDiscardRectangles);

typedef VkCmdSetSampleLocationsEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSampleLocationsInfoEXT> pSampleLocationsInfo);
typedef VkCmdSetSampleLocationsEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSampleLocationsInfoEXT> pSampleLocationsInfo);

typedef VkGetPhysicalDeviceMultisamplePropertiesEXTNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Int32 samples, Pointer<VkMultisamplePropertiesEXT> pMultisampleProperties);
typedef VkGetPhysicalDeviceMultisamplePropertiesEXT = void Function(Pointer<VkPhysicalDevice> physicalDevice, int samples, Pointer<VkMultisamplePropertiesEXT> pMultisampleProperties);

typedef VkGetPhysicalDeviceSurfaceCapabilities2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer<VkSurfaceCapabilities2KHR> pSurfaceCapabilities);
typedef VkGetPhysicalDeviceSurfaceCapabilities2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer<VkSurfaceCapabilities2KHR> pSurfaceCapabilities);

typedef VkGetPhysicalDeviceSurfaceFormats2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pSurfaceFormatCount, Pointer<VkSurfaceFormat2KHR> pSurfaceFormats);
typedef VkGetPhysicalDeviceSurfaceFormats2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pSurfaceFormatCount, Pointer<VkSurfaceFormat2KHR> pSurfaceFormats);

typedef VkGetPhysicalDeviceDisplayProperties2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayProperties2KHR> pProperties);
typedef VkGetPhysicalDeviceDisplayProperties2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayProperties2KHR> pProperties);

typedef VkGetPhysicalDeviceDisplayPlaneProperties2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPlaneProperties2KHR> pProperties);
typedef VkGetPhysicalDeviceDisplayPlaneProperties2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkDisplayPlaneProperties2KHR> pProperties);

typedef VkGetDisplayModeProperties2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer pPropertyCount, Pointer<VkDisplayModeProperties2KHR> pProperties);
typedef VkGetDisplayModeProperties2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayKHR> display, Pointer pPropertyCount, Pointer<VkDisplayModeProperties2KHR> pProperties);

typedef VkGetDisplayPlaneCapabilities2KHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayPlaneInfo2KHR> pDisplayPlaneInfo, Pointer<VkDisplayPlaneCapabilities2KHR> pCapabilities);
typedef VkGetDisplayPlaneCapabilities2KHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkDisplayPlaneInfo2KHR> pDisplayPlaneInfo, Pointer<VkDisplayPlaneCapabilities2KHR> pCapabilities);

typedef VkGetBufferMemoryRequirements2Native = Void Function(Pointer<VkDevice> device, Pointer<VkBufferMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetBufferMemoryRequirements2 = void Function(Pointer<VkDevice> device, Pointer<VkBufferMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkGetBufferMemoryRequirements2KHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkBufferMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetBufferMemoryRequirements2KHR = void Function(Pointer<VkDevice> device, Pointer<VkBufferMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkGetImageMemoryRequirements2Native = Void Function(Pointer<VkDevice> device, Pointer<VkImageMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetImageMemoryRequirements2 = void Function(Pointer<VkDevice> device, Pointer<VkImageMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkGetImageMemoryRequirements2KHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkImageMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetImageMemoryRequirements2KHR = void Function(Pointer<VkDevice> device, Pointer<VkImageMemoryRequirementsInfo2> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkGetImageSparseMemoryRequirements2Native = Void Function(Pointer<VkDevice> device, Pointer<VkImageSparseMemoryRequirementsInfo2> pInfo, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements);
typedef VkGetImageSparseMemoryRequirements2 = void Function(Pointer<VkDevice> device, Pointer<VkImageSparseMemoryRequirementsInfo2> pInfo, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements);

typedef VkGetImageSparseMemoryRequirements2KHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkImageSparseMemoryRequirementsInfo2> pInfo, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements);
typedef VkGetImageSparseMemoryRequirements2KHR = void Function(Pointer<VkDevice> device, Pointer<VkImageSparseMemoryRequirementsInfo2> pInfo, Pointer pSparseMemoryRequirementCount, Pointer<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements);

typedef VkCreateSamplerYcbcrConversionNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSamplerYcbcrConversion>> pYcbcrConversion);
typedef VkCreateSamplerYcbcrConversion = int Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSamplerYcbcrConversion>> pYcbcrConversion);

typedef VkCreateSamplerYcbcrConversionKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSamplerYcbcrConversion>> pYcbcrConversion);
typedef VkCreateSamplerYcbcrConversionKHR = int Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSamplerYcbcrConversion>> pYcbcrConversion);

typedef VkDestroySamplerYcbcrConversionNative = Void Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversion> ycbcrConversion, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySamplerYcbcrConversion = void Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversion> ycbcrConversion, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkDestroySamplerYcbcrConversionKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversion> ycbcrConversion, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroySamplerYcbcrConversionKHR = void Function(Pointer<VkDevice> device, Pointer<VkSamplerYcbcrConversion> ycbcrConversion, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetDeviceQueue2Native = Void Function(Pointer<VkDevice> device, Pointer<VkDeviceQueueInfo2> pQueueInfo, Pointer<Pointer<VkQueue>> pQueue);
typedef VkGetDeviceQueue2 = void Function(Pointer<VkDevice> device, Pointer<VkDeviceQueueInfo2> pQueueInfo, Pointer<Pointer<VkQueue>> pQueue);

typedef VkCreateValidationCacheEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkValidationCacheCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkValidationCacheEXT>> pValidationCache);
typedef VkCreateValidationCacheEXT = int Function(Pointer<VkDevice> device, Pointer<VkValidationCacheCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkValidationCacheEXT>> pValidationCache);

typedef VkDestroyValidationCacheEXTNative = Void Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> validationCache, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyValidationCacheEXT = void Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> validationCache, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetValidationCacheDataEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> validationCache, Pointer pDataSize, Pointer pData);
typedef VkGetValidationCacheDataEXT = int Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> validationCache, Pointer pDataSize, Pointer pData);

typedef VkMergeValidationCachesEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> dstCache, Uint32 srcCacheCount, Pointer<Pointer<VkValidationCacheEXT>> pSrcCaches);
typedef VkMergeValidationCachesEXT = int Function(Pointer<VkDevice> device, Pointer<VkValidationCacheEXT> dstCache, int srcCacheCount, Pointer<Pointer<VkValidationCacheEXT>> pSrcCaches);

typedef VkGetDescriptorSetLayoutSupportNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkDescriptorSetLayoutSupport> pSupport);
typedef VkGetDescriptorSetLayoutSupport = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkDescriptorSetLayoutSupport> pSupport);

typedef VkGetDescriptorSetLayoutSupportKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkDescriptorSetLayoutSupport> pSupport);
typedef VkGetDescriptorSetLayoutSupportKHR = void Function(Pointer<VkDevice> device, Pointer<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Pointer<VkDescriptorSetLayoutSupport> pSupport);

typedef VkGetSwapchainGrallocUsageANDROIDNative = Int32 Function(Pointer<VkDevice> device, Int32 format, Uint32 imageUsage, Pointer grallocUsage);
typedef VkGetSwapchainGrallocUsageANDROID = int Function(Pointer<VkDevice> device, int format, int imageUsage, Pointer grallocUsage);

typedef VkGetSwapchainGrallocUsage2ANDROIDNative = Int32 Function(Pointer<VkDevice> device, Int32 format, Uint32 imageUsage, Uint32 swapchainImageUsage, Pointer grallocConsumerUsage, Pointer grallocProducerUsage);
typedef VkGetSwapchainGrallocUsage2ANDROID = int Function(Pointer<VkDevice> device, int format, int imageUsage, int swapchainImageUsage, Pointer grallocConsumerUsage, Pointer grallocProducerUsage);

typedef VkAcquireImageANDROIDNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer nativeFenceFd, Pointer<VkSemaphore> semaphore, Pointer<VkFence> fence);
typedef VkAcquireImageANDROID = int Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer nativeFenceFd, Pointer<VkSemaphore> semaphore, Pointer<VkFence> fence);

typedef VkQueueSignalReleaseImageANDROIDNative = Int32 Function(Pointer<VkQueue> queue, Uint32 waitSemaphoreCount, Pointer<Pointer<VkSemaphore>> pWaitSemaphores, Pointer<VkImage> image, Pointer pNativeFenceFd);
typedef VkQueueSignalReleaseImageANDROID = int Function(Pointer<VkQueue> queue, int waitSemaphoreCount, Pointer<Pointer<VkSemaphore>> pWaitSemaphores, Pointer<VkImage> image, Pointer pNativeFenceFd);

typedef VkGetShaderInfoAMDNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Int32 shaderStage, Int32 infoType, Pointer pInfoSize, Pointer pInfo);
typedef VkGetShaderInfoAMD = int Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, int shaderStage, int infoType, Pointer pInfoSize, Pointer pInfo);

typedef VkSetLocalDimmingAMDNative = Void Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapChain, Uint32 localDimmingEnable);
typedef VkSetLocalDimmingAMD = void Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapChain, int localDimmingEnable);

typedef VkGetPhysicalDeviceCalibrateableTimeDomainsEXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pTimeDomainCount, Int32 pTimeDomains);
typedef VkGetPhysicalDeviceCalibrateableTimeDomainsEXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pTimeDomainCount, int pTimeDomains);

typedef VkGetCalibratedTimestampsEXTNative = Int32 Function(Pointer<VkDevice> device, Uint32 timestampCount, Pointer<VkCalibratedTimestampInfoEXT> pTimestampInfos, Pointer pTimestamps, Pointer pMaxDeviation);
typedef VkGetCalibratedTimestampsEXT = int Function(Pointer<VkDevice> device, int timestampCount, Pointer<VkCalibratedTimestampInfoEXT> pTimestampInfos, Pointer pTimestamps, Pointer pMaxDeviation);

typedef VkSetDebugUtilsObjectNameEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDebugUtilsObjectNameInfoEXT> pNameInfo);
typedef VkSetDebugUtilsObjectNameEXT = int Function(Pointer<VkDevice> device, Pointer<VkDebugUtilsObjectNameInfoEXT> pNameInfo);

typedef VkSetDebugUtilsObjectTagEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDebugUtilsObjectTagInfoEXT> pTagInfo);
typedef VkSetDebugUtilsObjectTagEXT = int Function(Pointer<VkDevice> device, Pointer<VkDebugUtilsObjectTagInfoEXT> pTagInfo);

typedef VkQueueBeginDebugUtilsLabelEXTNative = Void Function(Pointer<VkQueue> queue, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);
typedef VkQueueBeginDebugUtilsLabelEXT = void Function(Pointer<VkQueue> queue, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);

typedef VkQueueEndDebugUtilsLabelEXTNative = Void Function(Pointer<VkQueue> queue);
typedef VkQueueEndDebugUtilsLabelEXT = void Function(Pointer<VkQueue> queue);

typedef VkQueueInsertDebugUtilsLabelEXTNative = Void Function(Pointer<VkQueue> queue, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);
typedef VkQueueInsertDebugUtilsLabelEXT = void Function(Pointer<VkQueue> queue, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);

typedef VkCmdBeginDebugUtilsLabelEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);
typedef VkCmdBeginDebugUtilsLabelEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);

typedef VkCmdEndDebugUtilsLabelEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer);
typedef VkCmdEndDebugUtilsLabelEXT = void Function(Pointer<VkCommandBuffer> commandBuffer);

typedef VkCmdInsertDebugUtilsLabelEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);
typedef VkCmdInsertDebugUtilsLabelEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkDebugUtilsLabelEXT> pLabelInfo);

typedef VkCreateDebugUtilsMessengerEXTNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkDebugUtilsMessengerCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDebugUtilsMessengerEXT>> pMessenger);
typedef VkCreateDebugUtilsMessengerEXT = int Function(Pointer<VkInstance> instance, Pointer<VkDebugUtilsMessengerCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDebugUtilsMessengerEXT>> pMessenger);

typedef VkDestroyDebugUtilsMessengerEXTNative = Void Function(Pointer<VkInstance> instance, Pointer<VkDebugUtilsMessengerEXT> messenger, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDebugUtilsMessengerEXT = void Function(Pointer<VkInstance> instance, Pointer<VkDebugUtilsMessengerEXT> messenger, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkSubmitDebugUtilsMessageEXTNative = Void Function(Pointer<VkInstance> instance, Int32 messageSeverity, Uint32 messageTypes, Pointer<VkDebugUtilsMessengerCallbackDataEXT> pCallbackData);
typedef VkSubmitDebugUtilsMessageEXT = void Function(Pointer<VkInstance> instance, int messageSeverity, int messageTypes, Pointer<VkDebugUtilsMessengerCallbackDataEXT> pCallbackData);

typedef VkGetMemoryHostPointerPropertiesEXTNative = Int32 Function(Pointer<VkDevice> device, Int32 handleType, Pointer pHostPointer, Pointer<VkMemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties);
typedef VkGetMemoryHostPointerPropertiesEXT = int Function(Pointer<VkDevice> device, int handleType, Pointer pHostPointer, Pointer<VkMemoryHostPointerPropertiesEXT> pMemoryHostPointerProperties);

typedef VkCmdWriteBufferMarkerAMDNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 pipelineStage, Pointer<VkBuffer> dstBuffer, Uint64 dstOffset, Uint32 marker);
typedef VkCmdWriteBufferMarkerAMD = void Function(Pointer<VkCommandBuffer> commandBuffer, int pipelineStage, Pointer<VkBuffer> dstBuffer, int dstOffset, int marker);

typedef VkCreateRenderPass2Native = Int32 Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo2> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);
typedef VkCreateRenderPass2 = int Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo2> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);

typedef VkCreateRenderPass2KHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo2> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);
typedef VkCreateRenderPass2KHR = int Function(Pointer<VkDevice> device, Pointer<VkRenderPassCreateInfo2> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkRenderPass>> pRenderPass);

typedef VkCmdBeginRenderPass2Native = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo);
typedef VkCmdBeginRenderPass2 = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo);

typedef VkCmdBeginRenderPass2KHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo);
typedef VkCmdBeginRenderPass2KHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkRenderPassBeginInfo> pRenderPassBegin, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo);

typedef VkCmdNextSubpass2Native = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo, Pointer<VkSubpassEndInfo> pSubpassEndInfo);
typedef VkCmdNextSubpass2 = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo, Pointer<VkSubpassEndInfo> pSubpassEndInfo);

typedef VkCmdNextSubpass2KHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo, Pointer<VkSubpassEndInfo> pSubpassEndInfo);
typedef VkCmdNextSubpass2KHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassBeginInfo> pSubpassBeginInfo, Pointer<VkSubpassEndInfo> pSubpassEndInfo);

typedef VkCmdEndRenderPass2Native = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassEndInfo> pSubpassEndInfo);
typedef VkCmdEndRenderPass2 = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassEndInfo> pSubpassEndInfo);

typedef VkCmdEndRenderPass2KHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassEndInfo> pSubpassEndInfo);
typedef VkCmdEndRenderPass2KHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkSubpassEndInfo> pSubpassEndInfo);

typedef VkGetSemaphoreCounterValueNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer pValue);
typedef VkGetSemaphoreCounterValue = int Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer pValue);

typedef VkGetSemaphoreCounterValueKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer pValue);
typedef VkGetSemaphoreCounterValueKHR = int Function(Pointer<VkDevice> device, Pointer<VkSemaphore> semaphore, Pointer pValue);

typedef VkWaitSemaphoresNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreWaitInfo> pWaitInfo, Uint64 timeout);
typedef VkWaitSemaphores = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreWaitInfo> pWaitInfo, int timeout);

typedef VkWaitSemaphoresKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreWaitInfo> pWaitInfo, Uint64 timeout);
typedef VkWaitSemaphoresKHR = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreWaitInfo> pWaitInfo, int timeout);

typedef VkSignalSemaphoreNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreSignalInfo> pSignalInfo);
typedef VkSignalSemaphore = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreSignalInfo> pSignalInfo);

typedef VkSignalSemaphoreKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSemaphoreSignalInfo> pSignalInfo);
typedef VkSignalSemaphoreKHR = int Function(Pointer<VkDevice> device, Pointer<VkSemaphoreSignalInfo> pSignalInfo);

typedef VkGetAndroidHardwareBufferPropertiesANDROIDNative = Int32 Function(Pointer<VkDevice> device, Pointer buffer, Pointer<VkAndroidHardwareBufferPropertiesANDROID> pProperties);
typedef VkGetAndroidHardwareBufferPropertiesANDROID = int Function(Pointer<VkDevice> device, Pointer buffer, Pointer<VkAndroidHardwareBufferPropertiesANDROID> pProperties);

typedef VkGetMemoryAndroidHardwareBufferANDROIDNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkMemoryGetAndroidHardwareBufferInfoANDROID> pInfo, Pointer pBuffer);
typedef VkGetMemoryAndroidHardwareBufferANDROID = int Function(Pointer<VkDevice> device, Pointer<VkMemoryGetAndroidHardwareBufferInfoANDROID> pInfo, Pointer pBuffer);

typedef VkCmdDrawIndirectCountNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndirectCount = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdDrawIndirectCountKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndirectCountKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdDrawIndirectCountAMDNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndirectCountAMD = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdDrawIndexedIndirectCountNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndexedIndirectCount = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdDrawIndexedIndirectCountKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndexedIndirectCountKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdDrawIndexedIndirectCountAMDNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawIndexedIndirectCountAMD = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCmdSetCheckpointNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer pCheckpointMarker);
typedef VkCmdSetCheckpointNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer pCheckpointMarker);

typedef VkGetQueueCheckpointDataNVNative = Void Function(Pointer<VkQueue> queue, Pointer pCheckpointDataCount, Pointer<VkCheckpointDataNV> pCheckpointData);
typedef VkGetQueueCheckpointDataNV = void Function(Pointer<VkQueue> queue, Pointer pCheckpointDataCount, Pointer<VkCheckpointDataNV> pCheckpointData);

typedef VkCmdBindTransformFeedbackBuffersEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstBinding, Uint32 bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets, Pointer pSizes);
typedef VkCmdBindTransformFeedbackBuffersEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstBinding, int bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets, Pointer pSizes);

typedef VkCmdBeginTransformFeedbackEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstCounterBuffer, Uint32 counterBufferCount, Pointer<Pointer<VkBuffer>> pCounterBuffers, Pointer pCounterBufferOffsets);
typedef VkCmdBeginTransformFeedbackEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstCounterBuffer, int counterBufferCount, Pointer<Pointer<VkBuffer>> pCounterBuffers, Pointer pCounterBufferOffsets);

typedef VkCmdEndTransformFeedbackEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstCounterBuffer, Uint32 counterBufferCount, Pointer<Pointer<VkBuffer>> pCounterBuffers, Pointer pCounterBufferOffsets);
typedef VkCmdEndTransformFeedbackEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstCounterBuffer, int counterBufferCount, Pointer<Pointer<VkBuffer>> pCounterBuffers, Pointer pCounterBufferOffsets);

typedef VkCmdBeginQueryIndexedEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 query, Uint32 flags, Uint32 index);
typedef VkCmdBeginQueryIndexedEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int query, int flags, int index);

typedef VkCmdEndQueryIndexedEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, Uint32 query, Uint32 index);
typedef VkCmdEndQueryIndexedEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkQueryPool> queryPool, int query, int index);

typedef VkCmdDrawIndirectByteCountEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 instanceCount, Uint32 firstInstance, Pointer<VkBuffer> counterBuffer, Uint64 counterBufferOffset, Uint32 counterOffset, Uint32 vertexStride);
typedef VkCmdDrawIndirectByteCountEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int instanceCount, int firstInstance, Pointer<VkBuffer> counterBuffer, int counterBufferOffset, int counterOffset, int vertexStride);

typedef VkCmdSetExclusiveScissorNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstExclusiveScissor, Uint32 exclusiveScissorCount, Pointer<VkRect2D> pExclusiveScissors);
typedef VkCmdSetExclusiveScissorNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstExclusiveScissor, int exclusiveScissorCount, Pointer<VkRect2D> pExclusiveScissors);

typedef VkCmdBindShadingRateImageNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImageView> imageView, Int32 imageLayout);
typedef VkCmdBindShadingRateImageNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkImageView> imageView, int imageLayout);

typedef VkCmdSetViewportShadingRatePaletteNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstViewport, Uint32 viewportCount, Pointer<VkShadingRatePaletteNV> pShadingRatePalettes);
typedef VkCmdSetViewportShadingRatePaletteNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstViewport, int viewportCount, Pointer<VkShadingRatePaletteNV> pShadingRatePalettes);

typedef VkCmdSetCoarseSampleOrderNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 sampleOrderType, Uint32 customSampleOrderCount, Pointer<VkCoarseSampleOrderCustomNV> pCustomSampleOrders);
typedef VkCmdSetCoarseSampleOrderNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int sampleOrderType, int customSampleOrderCount, Pointer<VkCoarseSampleOrderCustomNV> pCustomSampleOrders);

typedef VkCmdDrawMeshTasksNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 taskCount, Uint32 firstTask);
typedef VkCmdDrawMeshTasksNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int taskCount, int firstTask);

typedef VkCmdDrawMeshTasksIndirectNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Uint32 drawCount, Uint32 stride);
typedef VkCmdDrawMeshTasksIndirectNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, int drawCount, int stride);

typedef VkCmdDrawMeshTasksIndirectCountNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, Uint64 offset, Pointer<VkBuffer> countBuffer, Uint64 countBufferOffset, Uint32 maxDrawCount, Uint32 stride);
typedef VkCmdDrawMeshTasksIndirectCountNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> buffer, int offset, Pointer<VkBuffer> countBuffer, int countBufferOffset, int maxDrawCount, int stride);

typedef VkCompileDeferredNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Uint32 shader);
typedef VkCompileDeferredNV = int Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, int shader);

typedef VkCreateAccelerationStructureNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureCreateInfoNV> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer pAccelerationStructure);
typedef VkCreateAccelerationStructureNV = int Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureCreateInfoNV> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer pAccelerationStructure);

typedef VkDestroyAccelerationStructureKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyAccelerationStructureKHR = void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkDestroyAccelerationStructureNVNative = Void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyAccelerationStructureNV = void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetAccelerationStructureMemoryRequirementsKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureMemoryRequirementsInfoKHR> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);
typedef VkGetAccelerationStructureMemoryRequirementsKHR = void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureMemoryRequirementsInfoKHR> pInfo, Pointer<VkMemoryRequirements2> pMemoryRequirements);

typedef VkGetAccelerationStructureMemoryRequirementsNVNative = Void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureMemoryRequirementsInfoNV> pInfo, Pointer<VkMemoryRequirements2KHR> pMemoryRequirements);
typedef VkGetAccelerationStructureMemoryRequirementsNV = void Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureMemoryRequirementsInfoNV> pInfo, Pointer<VkMemoryRequirements2KHR> pMemoryRequirements);

typedef VkBindAccelerationStructureMemoryKHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindAccelerationStructureMemoryInfoKHR> pBindInfos);
typedef VkBindAccelerationStructureMemoryKHR = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindAccelerationStructureMemoryInfoKHR> pBindInfos);

typedef VkBindAccelerationStructureMemoryNVNative = Int32 Function(Pointer<VkDevice> device, Uint32 bindInfoCount, Pointer<VkBindAccelerationStructureMemoryInfoKHR> pBindInfos);
typedef VkBindAccelerationStructureMemoryNV = int Function(Pointer<VkDevice> device, int bindInfoCount, Pointer<VkBindAccelerationStructureMemoryInfoKHR> pBindInfos);

typedef VkCmdCopyAccelerationStructureNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureKHR> dst, Pointer<VkAccelerationStructureKHR> src, Int32 mode);
typedef VkCmdCopyAccelerationStructureNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureKHR> dst, Pointer<VkAccelerationStructureKHR> src, int mode);

typedef VkCmdCopyAccelerationStructureKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyAccelerationStructureInfoKHR> pInfo);
typedef VkCmdCopyAccelerationStructureKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyAccelerationStructureInfoKHR> pInfo);

typedef VkCopyAccelerationStructureKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCopyAccelerationStructureInfoKHR> pInfo);
typedef VkCopyAccelerationStructureKHR = int Function(Pointer<VkDevice> device, Pointer<VkCopyAccelerationStructureInfoKHR> pInfo);

typedef VkCmdCopyAccelerationStructureToMemoryKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyAccelerationStructureToMemoryInfoKHR> pInfo);
typedef VkCmdCopyAccelerationStructureToMemoryKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyAccelerationStructureToMemoryInfoKHR> pInfo);

typedef VkCopyAccelerationStructureToMemoryKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCopyAccelerationStructureToMemoryInfoKHR> pInfo);
typedef VkCopyAccelerationStructureToMemoryKHR = int Function(Pointer<VkDevice> device, Pointer<VkCopyAccelerationStructureToMemoryInfoKHR> pInfo);

typedef VkCmdCopyMemoryToAccelerationStructureKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyMemoryToAccelerationStructureInfoKHR> pInfo);
typedef VkCmdCopyMemoryToAccelerationStructureKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkCopyMemoryToAccelerationStructureInfoKHR> pInfo);

typedef VkCopyMemoryToAccelerationStructureKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkCopyMemoryToAccelerationStructureInfoKHR> pInfo);
typedef VkCopyMemoryToAccelerationStructureKHR = int Function(Pointer<VkDevice> device, Pointer<VkCopyMemoryToAccelerationStructureInfoKHR> pInfo);

typedef VkCmdWriteAccelerationStructuresPropertiesKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, Int32 queryType, Pointer<VkQueryPool> queryPool, Uint32 firstQuery);
typedef VkCmdWriteAccelerationStructuresPropertiesKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, int accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, int queryType, Pointer<VkQueryPool> queryPool, int firstQuery);

typedef VkCmdWriteAccelerationStructuresPropertiesNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, Int32 queryType, Pointer<VkQueryPool> queryPool, Uint32 firstQuery);
typedef VkCmdWriteAccelerationStructuresPropertiesNV = void Function(Pointer<VkCommandBuffer> commandBuffer, int accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, int queryType, Pointer<VkQueryPool> queryPool, int firstQuery);

typedef VkCmdBuildAccelerationStructureNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureInfoNV> pInfo, Pointer<VkBuffer> instanceData, Uint64 instanceOffset, Uint32 update, Pointer<VkAccelerationStructureKHR> dst, Pointer<VkAccelerationStructureKHR> src, Pointer<VkBuffer> scratch, Uint64 scratchOffset);
typedef VkCmdBuildAccelerationStructureNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureInfoNV> pInfo, Pointer<VkBuffer> instanceData, int instanceOffset, int update, Pointer<VkAccelerationStructureKHR> dst, Pointer<VkAccelerationStructureKHR> src, Pointer<VkBuffer> scratch, int scratchOffset);

typedef VkWriteAccelerationStructuresPropertiesKHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, Int32 queryType, Uint64 dataSize, Pointer pData, Uint64 stride);
typedef VkWriteAccelerationStructuresPropertiesKHR = int Function(Pointer<VkDevice> device, int accelerationStructureCount, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructures, int queryType, int dataSize, Pointer pData, int stride);

typedef VkCmdTraceRaysKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkStridedBufferRegionKHR> pRaygenShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pMissShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pHitShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pCallableShaderBindingTable, Uint32 width, Uint32 height, Uint32 depth);
typedef VkCmdTraceRaysKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkStridedBufferRegionKHR> pRaygenShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pMissShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pHitShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pCallableShaderBindingTable, int width, int height, int depth);

typedef VkCmdTraceRaysNVNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> raygenShaderBindingTableBuffer, Uint64 raygenShaderBindingOffset, Pointer<VkBuffer> missShaderBindingTableBuffer, Uint64 missShaderBindingOffset, Uint64 missShaderBindingStride, Pointer<VkBuffer> hitShaderBindingTableBuffer, Uint64 hitShaderBindingOffset, Uint64 hitShaderBindingStride, Pointer<VkBuffer> callableShaderBindingTableBuffer, Uint64 callableShaderBindingOffset, Uint64 callableShaderBindingStride, Uint32 width, Uint32 height, Uint32 depth);
typedef VkCmdTraceRaysNV = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkBuffer> raygenShaderBindingTableBuffer, int raygenShaderBindingOffset, Pointer<VkBuffer> missShaderBindingTableBuffer, int missShaderBindingOffset, int missShaderBindingStride, Pointer<VkBuffer> hitShaderBindingTableBuffer, int hitShaderBindingOffset, int hitShaderBindingStride, Pointer<VkBuffer> callableShaderBindingTableBuffer, int callableShaderBindingOffset, int callableShaderBindingStride, int width, int height, int depth);

typedef VkGetRayTracingShaderGroupHandlesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Uint32 firstGroup, Uint32 groupCount, Uint64 dataSize, Pointer pData);
typedef VkGetRayTracingShaderGroupHandlesKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, int firstGroup, int groupCount, int dataSize, Pointer pData);

typedef VkGetRayTracingShaderGroupHandlesNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Uint32 firstGroup, Uint32 groupCount, Uint64 dataSize, Pointer pData);
typedef VkGetRayTracingShaderGroupHandlesNV = int Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, int firstGroup, int groupCount, int dataSize, Pointer pData);

typedef VkGetRayTracingCaptureReplayShaderGroupHandlesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, Uint32 firstGroup, Uint32 groupCount, Uint64 dataSize, Pointer pData);
typedef VkGetRayTracingCaptureReplayShaderGroupHandlesKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipeline> pipeline, int firstGroup, int groupCount, int dataSize, Pointer pData);

typedef VkGetAccelerationStructureHandleNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, Uint64 dataSize, Pointer pData);
typedef VkGetAccelerationStructureHandleNV = int Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureKHR> accelerationStructure, int dataSize, Pointer pData);

typedef VkCreateRayTracingPipelinesNVNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Uint32 createInfoCount, Pointer<VkRayTracingPipelineCreateInfoNV> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);
typedef VkCreateRayTracingPipelinesNV = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, int createInfoCount, Pointer<VkRayTracingPipelineCreateInfoNV> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);

typedef VkCreateRayTracingPipelinesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, Uint32 createInfoCount, Pointer<VkRayTracingPipelineCreateInfoKHR> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);
typedef VkCreateRayTracingPipelinesKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipelineCache> pipelineCache, int createInfoCount, Pointer<VkRayTracingPipelineCreateInfoKHR> pCreateInfos, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPipeline>> pPipelines);

typedef VkGetPhysicalDeviceCooperativeMatrixPropertiesNVNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkCooperativeMatrixPropertiesNV> pProperties);
typedef VkGetPhysicalDeviceCooperativeMatrixPropertiesNV = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pPropertyCount, Pointer<VkCooperativeMatrixPropertiesNV> pProperties);

typedef VkCmdTraceRaysIndirectKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkStridedBufferRegionKHR> pRaygenShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pMissShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pHitShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pCallableShaderBindingTable, Pointer<VkBuffer> buffer, Uint64 offset);
typedef VkCmdTraceRaysIndirectKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkStridedBufferRegionKHR> pRaygenShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pMissShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pHitShaderBindingTable, Pointer<VkStridedBufferRegionKHR> pCallableShaderBindingTable, Pointer<VkBuffer> buffer, int offset);

typedef VkGetDeviceAccelerationStructureCompatibilityKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureVersionKHR> version);
typedef VkGetDeviceAccelerationStructureCompatibilityKHR = int Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureVersionKHR> version);

typedef VkGetImageViewHandleNVXNative = Uint32 Function(Pointer<VkDevice> device, Pointer<VkImageViewHandleInfoNVX> pInfo);
typedef VkGetImageViewHandleNVX = int Function(Pointer<VkDevice> device, Pointer<VkImageViewHandleInfoNVX> pInfo);

typedef VkGetImageViewAddressNVXNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImageView> imageView, Pointer<VkImageViewAddressPropertiesNVX> pProperties);
typedef VkGetImageViewAddressNVX = int Function(Pointer<VkDevice> device, Pointer<VkImageView> imageView, Pointer<VkImageViewAddressPropertiesNVX> pProperties);

typedef VkGetPhysicalDeviceSurfacePresentModes2EXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pPresentModeCount, Int32 pPresentModes);
typedef VkGetPhysicalDeviceSurfacePresentModes2EXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pPresentModeCount, int pPresentModes);

typedef VkGetDeviceGroupSurfacePresentModes2EXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pModes);
typedef VkGetDeviceGroupSurfacePresentModes2EXT = int Function(Pointer<VkDevice> device, Pointer<VkPhysicalDeviceSurfaceInfo2KHR> pSurfaceInfo, Pointer pModes);

typedef VkAcquireFullScreenExclusiveModeEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);
typedef VkAcquireFullScreenExclusiveModeEXT = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);

typedef VkReleaseFullScreenExclusiveModeEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);
typedef VkReleaseFullScreenExclusiveModeEXT = int Function(Pointer<VkDevice> device, Pointer<VkSwapchainKHR> swapchain);

typedef VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHRNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Uint32 queueFamilyIndex, Pointer pCounterCount, Pointer<VkPerformanceCounterKHR> pCounters, Pointer<VkPerformanceCounterDescriptionKHR> pCounterDescriptions);
typedef VkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = int Function(Pointer<VkPhysicalDevice> physicalDevice, int queueFamilyIndex, Pointer pCounterCount, Pointer<VkPerformanceCounterKHR> pCounters, Pointer<VkPerformanceCounterDescriptionKHR> pCounterDescriptions);

typedef VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHRNative = Void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkQueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo, Pointer pNumPasses);
typedef VkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = void Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer<VkQueryPoolPerformanceCreateInfoKHR> pPerformanceQueryCreateInfo, Pointer pNumPasses);

typedef VkAcquireProfilingLockKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAcquireProfilingLockInfoKHR> pInfo);
typedef VkAcquireProfilingLockKHR = int Function(Pointer<VkDevice> device, Pointer<VkAcquireProfilingLockInfoKHR> pInfo);

typedef VkReleaseProfilingLockKHRNative = Void Function(Pointer<VkDevice> device);
typedef VkReleaseProfilingLockKHR = void Function(Pointer<VkDevice> device);

typedef VkGetImageDrmFormatModifierPropertiesEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkImageDrmFormatModifierPropertiesEXT> pProperties);
typedef VkGetImageDrmFormatModifierPropertiesEXT = int Function(Pointer<VkDevice> device, Pointer<VkImage> image, Pointer<VkImageDrmFormatModifierPropertiesEXT> pProperties);

typedef VkGetBufferOpaqueCaptureAddressNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);
typedef VkGetBufferOpaqueCaptureAddress = int Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);

typedef VkGetBufferOpaqueCaptureAddressKHRNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);
typedef VkGetBufferOpaqueCaptureAddressKHR = int Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);

typedef VkGetBufferDeviceAddressNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);
typedef VkGetBufferDeviceAddress = int Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);

typedef VkGetBufferDeviceAddressKHRNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);
typedef VkGetBufferDeviceAddressKHR = int Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);

typedef VkGetBufferDeviceAddressEXTNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);
typedef VkGetBufferDeviceAddressEXT = int Function(Pointer<VkDevice> device, Pointer<VkBufferDeviceAddressInfo> pInfo);

typedef VkCreateHeadlessSurfaceEXTNative = Int32 Function(Pointer<VkInstance> instance, Pointer<VkHeadlessSurfaceCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);
typedef VkCreateHeadlessSurfaceEXT = int Function(Pointer<VkInstance> instance, Pointer<VkHeadlessSurfaceCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkSurfaceKHR>> pSurface);

typedef VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNVNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pCombinationCount, Pointer<VkFramebufferMixedSamplesCombinationNV> pCombinations);
typedef VkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pCombinationCount, Pointer<VkFramebufferMixedSamplesCombinationNV> pCombinations);

typedef VkInitializePerformanceApiINTELNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkInitializePerformanceApiInfoINTEL> pInitializeInfo);
typedef VkInitializePerformanceApiINTEL = int Function(Pointer<VkDevice> device, Pointer<VkInitializePerformanceApiInfoINTEL> pInitializeInfo);

typedef VkUninitializePerformanceApiINTELNative = Void Function(Pointer<VkDevice> device);
typedef VkUninitializePerformanceApiINTEL = void Function(Pointer<VkDevice> device);

typedef VkCmdSetPerformanceMarkerINTELNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceMarkerInfoINTEL> pMarkerInfo);
typedef VkCmdSetPerformanceMarkerINTEL = int Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceMarkerInfoINTEL> pMarkerInfo);

typedef VkCmdSetPerformanceStreamMarkerINTELNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceStreamMarkerInfoINTEL> pMarkerInfo);
typedef VkCmdSetPerformanceStreamMarkerINTEL = int Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceStreamMarkerInfoINTEL> pMarkerInfo);

typedef VkCmdSetPerformanceOverrideINTELNative = Int32 Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceOverrideInfoINTEL> pOverrideInfo);
typedef VkCmdSetPerformanceOverrideINTEL = int Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkPerformanceOverrideInfoINTEL> pOverrideInfo);

typedef VkAcquirePerformanceConfigurationINTELNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPerformanceConfigurationAcquireInfoINTEL> pAcquireInfo, Pointer<Pointer<VkPerformanceConfigurationINTEL>> pConfiguration);
typedef VkAcquirePerformanceConfigurationINTEL = int Function(Pointer<VkDevice> device, Pointer<VkPerformanceConfigurationAcquireInfoINTEL> pAcquireInfo, Pointer<Pointer<VkPerformanceConfigurationINTEL>> pConfiguration);

typedef VkReleasePerformanceConfigurationINTELNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPerformanceConfigurationINTEL> configuration);
typedef VkReleasePerformanceConfigurationINTEL = int Function(Pointer<VkDevice> device, Pointer<VkPerformanceConfigurationINTEL> configuration);

typedef VkQueueSetPerformanceConfigurationINTELNative = Int32 Function(Pointer<VkQueue> queue, Pointer<VkPerformanceConfigurationINTEL> configuration);
typedef VkQueueSetPerformanceConfigurationINTEL = int Function(Pointer<VkQueue> queue, Pointer<VkPerformanceConfigurationINTEL> configuration);

typedef VkGetPerformanceParameterINTELNative = Int32 Function(Pointer<VkDevice> device, Int32 parameter, Pointer<VkPerformanceValueINTEL> pValue);
typedef VkGetPerformanceParameterINTEL = int Function(Pointer<VkDevice> device, int parameter, Pointer<VkPerformanceValueINTEL> pValue);

typedef VkGetDeviceMemoryOpaqueCaptureAddressNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkDeviceMemoryOpaqueCaptureAddressInfo> pInfo);
typedef VkGetDeviceMemoryOpaqueCaptureAddress = int Function(Pointer<VkDevice> device, Pointer<VkDeviceMemoryOpaqueCaptureAddressInfo> pInfo);

typedef VkGetDeviceMemoryOpaqueCaptureAddressKHRNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkDeviceMemoryOpaqueCaptureAddressInfo> pInfo);
typedef VkGetDeviceMemoryOpaqueCaptureAddressKHR = int Function(Pointer<VkDevice> device, Pointer<VkDeviceMemoryOpaqueCaptureAddressInfo> pInfo);

typedef VkGetPipelineExecutablePropertiesKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineInfoKHR> pPipelineInfo, Pointer pExecutableCount, Pointer<VkPipelineExecutablePropertiesKHR> pProperties);
typedef VkGetPipelineExecutablePropertiesKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipelineInfoKHR> pPipelineInfo, Pointer pExecutableCount, Pointer<VkPipelineExecutablePropertiesKHR> pProperties);

typedef VkGetPipelineExecutableStatisticsKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineExecutableInfoKHR> pExecutableInfo, Pointer pStatisticCount, Pointer<VkPipelineExecutableStatisticKHR> pStatistics);
typedef VkGetPipelineExecutableStatisticsKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipelineExecutableInfoKHR> pExecutableInfo, Pointer pStatisticCount, Pointer<VkPipelineExecutableStatisticKHR> pStatistics);

typedef VkGetPipelineExecutableInternalRepresentationsKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPipelineExecutableInfoKHR> pExecutableInfo, Pointer pInternalRepresentationCount, Pointer<VkPipelineExecutableInternalRepresentationKHR> pInternalRepresentations);
typedef VkGetPipelineExecutableInternalRepresentationsKHR = int Function(Pointer<VkDevice> device, Pointer<VkPipelineExecutableInfoKHR> pExecutableInfo, Pointer pInternalRepresentationCount, Pointer<VkPipelineExecutableInternalRepresentationKHR> pInternalRepresentations);

typedef VkCmdSetLineStippleEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 lineStippleFactor, Uint16 lineStipplePattern);
typedef VkCmdSetLineStippleEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int lineStippleFactor, int lineStipplePattern);

typedef VkGetPhysicalDeviceToolPropertiesEXTNative = Int32 Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pToolCount, Pointer<VkPhysicalDeviceToolPropertiesEXT> pToolProperties);
typedef VkGetPhysicalDeviceToolPropertiesEXT = int Function(Pointer<VkPhysicalDevice> physicalDevice, Pointer pToolCount, Pointer<VkPhysicalDeviceToolPropertiesEXT> pToolProperties);

typedef VkCreateAccelerationStructureKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructure);
typedef VkCreateAccelerationStructureKHR = int Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureCreateInfoKHR> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkAccelerationStructureKHR>> pAccelerationStructure);

typedef VkCmdBuildAccelerationStructureKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 infoCount, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfos, Pointer ppOffsetInfos);
typedef VkCmdBuildAccelerationStructureKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, int infoCount, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfos, Pointer ppOffsetInfos);

typedef VkCmdBuildAccelerationStructureIndirectKHRNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfo, Pointer<VkBuffer> indirectBuffer, Uint64 indirectOffset, Uint32 indirectStride);
typedef VkCmdBuildAccelerationStructureIndirectKHR = void Function(Pointer<VkCommandBuffer> commandBuffer, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfo, Pointer<VkBuffer> indirectBuffer, int indirectOffset, int indirectStride);

typedef VkBuildAccelerationStructureKHRNative = Int32 Function(Pointer<VkDevice> device, Uint32 infoCount, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfos, Pointer ppOffsetInfos);
typedef VkBuildAccelerationStructureKHR = int Function(Pointer<VkDevice> device, int infoCount, Pointer<VkAccelerationStructureBuildGeometryInfoKHR> pInfos, Pointer ppOffsetInfos);

typedef VkGetAccelerationStructureDeviceAddressKHRNative = Uint64 Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureDeviceAddressInfoKHR> pInfo);
typedef VkGetAccelerationStructureDeviceAddressKHR = int Function(Pointer<VkDevice> device, Pointer<VkAccelerationStructureDeviceAddressInfoKHR> pInfo);

typedef VkCreateDeferredOperationKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDeferredOperationKHR>> pDeferredOperation);
typedef VkCreateDeferredOperationKHR = int Function(Pointer<VkDevice> device, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkDeferredOperationKHR>> pDeferredOperation);

typedef VkDestroyDeferredOperationKHRNative = Void Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyDeferredOperationKHR = void Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkGetDeferredOperationMaxConcurrencyKHRNative = Uint32 Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);
typedef VkGetDeferredOperationMaxConcurrencyKHR = int Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);

typedef VkGetDeferredOperationResultKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);
typedef VkGetDeferredOperationResultKHR = int Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);

typedef VkDeferredOperationJoinKHRNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);
typedef VkDeferredOperationJoinKHR = int Function(Pointer<VkDevice> device, Pointer<VkDeferredOperationKHR> operation);

typedef VkCmdSetCullModeEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 cullMode);
typedef VkCmdSetCullModeEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int cullMode);

typedef VkCmdSetFrontFaceEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 frontFace);
typedef VkCmdSetFrontFaceEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int frontFace);

typedef VkCmdSetPrimitiveTopologyEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 primitiveTopology);
typedef VkCmdSetPrimitiveTopologyEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int primitiveTopology);

typedef VkCmdSetViewportWithCountEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 viewportCount, Pointer<VkViewport> pViewports);
typedef VkCmdSetViewportWithCountEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int viewportCount, Pointer<VkViewport> pViewports);

typedef VkCmdSetScissorWithCountEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 scissorCount, Pointer<VkRect2D> pScissors);
typedef VkCmdSetScissorWithCountEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int scissorCount, Pointer<VkRect2D> pScissors);

typedef VkCmdBindVertexBuffers2EXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 firstBinding, Uint32 bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets, Pointer pSizes, Pointer pStrides);
typedef VkCmdBindVertexBuffers2EXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int firstBinding, int bindingCount, Pointer<Pointer<VkBuffer>> pBuffers, Pointer pOffsets, Pointer pSizes, Pointer pStrides);

typedef VkCmdSetDepthTestEnableEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 depthTestEnable);
typedef VkCmdSetDepthTestEnableEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int depthTestEnable);

typedef VkCmdSetDepthWriteEnableEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 depthWriteEnable);
typedef VkCmdSetDepthWriteEnableEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int depthWriteEnable);

typedef VkCmdSetDepthCompareOpEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Int32 depthCompareOp);
typedef VkCmdSetDepthCompareOpEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int depthCompareOp);

typedef VkCmdSetDepthBoundsTestEnableEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 depthBoundsTestEnable);
typedef VkCmdSetDepthBoundsTestEnableEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int depthBoundsTestEnable);

typedef VkCmdSetStencilTestEnableEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 stencilTestEnable);
typedef VkCmdSetStencilTestEnableEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int stencilTestEnable);

typedef VkCmdSetStencilOpEXTNative = Void Function(Pointer<VkCommandBuffer> commandBuffer, Uint32 faceMask, Int32 failOp, Int32 passOp, Int32 depthFailOp, Int32 compareOp);
typedef VkCmdSetStencilOpEXT = void Function(Pointer<VkCommandBuffer> commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp);

typedef VkCreatePrivateDataSlotEXTNative = Int32 Function(Pointer<VkDevice> device, Pointer<VkPrivateDataSlotCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPrivateDataSlotEXT>> pPrivateDataSlot);
typedef VkCreatePrivateDataSlotEXT = int Function(Pointer<VkDevice> device, Pointer<VkPrivateDataSlotCreateInfoEXT> pCreateInfo, Pointer<VkAllocationCallbacks> pAllocator, Pointer<Pointer<VkPrivateDataSlotEXT>> pPrivateDataSlot);

typedef VkDestroyPrivateDataSlotEXTNative = Void Function(Pointer<VkDevice> device, Pointer<VkPrivateDataSlotEXT> privateDataSlot, Pointer<VkAllocationCallbacks> pAllocator);
typedef VkDestroyPrivateDataSlotEXT = void Function(Pointer<VkDevice> device, Pointer<VkPrivateDataSlotEXT> privateDataSlot, Pointer<VkAllocationCallbacks> pAllocator);

typedef VkSetPrivateDataEXTNative = Int32 Function(Pointer<VkDevice> device, Int32 objectType, Uint64 objectHandle, Pointer<VkPrivateDataSlotEXT> privateDataSlot, Uint64 data);
typedef VkSetPrivateDataEXT = int Function(Pointer<VkDevice> device, int objectType, int objectHandle, Pointer<VkPrivateDataSlotEXT> privateDataSlot, int data);

typedef VkGetPrivateDataEXTNative = Void Function(Pointer<VkDevice> device, Int32 objectType, Uint64 objectHandle, Pointer<VkPrivateDataSlotEXT> privateDataSlot, Pointer pData);
typedef VkGetPrivateDataEXT = void Function(Pointer<VkDevice> device, int objectType, int objectHandle, Pointer<VkPrivateDataSlotEXT> privateDataSlot, Pointer pData);
